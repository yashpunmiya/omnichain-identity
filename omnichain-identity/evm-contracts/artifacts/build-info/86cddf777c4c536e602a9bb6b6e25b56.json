{"id":"86cddf777c4c536e602a9bb6b6e25b56","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { BytesLib } from \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\nimport { BitMap256 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\";\nimport { CalldataBytesLib } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\n\nlibrary DVNOptions {\n    using CalldataBytesLib for bytes;\n    using BytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 2;\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\n\n    error DVN_InvalidDVNIdx();\n    error DVN_InvalidDVNOptions(uint256 cursor);\n\n    /// @dev group dvn options by its idx\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @return dvnOptions the grouped options, still share the same format of _options\n    /// @return dvnIndices the dvn indices\n    function groupDVNOptionsByIdx(\n        bytes memory _options\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\n\n        uint8 numDVNs = getNumDVNs(_options);\n\n        // if there is only 1 dvn, we can just return the whole options\n        if (numDVNs == 1) {\n            dvnOptions = new bytes[](1);\n            dvnOptions[0] = _options;\n\n            dvnIndices = new uint8[](1);\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\n            return (dvnOptions, dvnIndices);\n        }\n\n        // otherwise, we need to group the options by dvn_idx\n        dvnIndices = new uint8[](numDVNs);\n        dvnOptions = new bytes[](numDVNs);\n        unchecked {\n            uint256 cursor = 0;\n            uint256 start = 0;\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\n\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                // optionLength asserted in getNumDVNs (skip check)\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n\n                // dvnIdx asserted in getNumDVNs (skip check)\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // dvnIdx must equal to the lastDVNIdx for the first option\n                // so it is always skipped in the first option\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\n                if (lastDVNIdx == 255) {\n                    lastDVNIdx = dvnIdx;\n                } else if (dvnIdx != lastDVNIdx) {\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\n                    bytes memory opt = _options.slice(start, len);\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\n\n                    // reset the start and lastDVNIdx\n                    start += len;\n                    lastDVNIdx = dvnIdx;\n                }\n\n                cursor += optionLength;\n            }\n\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\n            // if we have reached the end of the options, we need to process the last dvn\n            uint256 size = cursor - start;\n            bytes memory op = _options.slice(start, size);\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\n\n            // revert dvnIndices to start from 0\n            for (uint8 i = 0; i < numDVNs; ++i) {\n                --dvnIndices[i];\n            }\n        }\n    }\n\n    function _insertDVNOptions(\n        bytes[] memory _dvnOptions,\n        uint8[] memory _dvnIndices,\n        uint8 _dvnIdx,\n        bytes memory _newOptions\n    ) internal pure {\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\n        // so we tell if the slot is empty by adding 1 to dvnIdx\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\n        uint8 dvnIdxAdj = _dvnIdx + 1;\n\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\n            uint8 index = _dvnIndices[j];\n            if (dvnIdxAdj == index) {\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\n                break;\n            } else if (index == 0) {\n                // empty slot, that means it is the first time we see this dvn\n                _dvnIndices[j] = dvnIdxAdj;\n                _dvnOptions[j] = _newOptions;\n                break;\n            }\n        }\n    }\n\n    /// @dev get the number of unique dvns\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\n        uint256 cursor = 0;\n        BitMap256 bitmap;\n\n        // find number of unique dvn_idx\n        unchecked {\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\n\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // if dvnIdx is not set, increment numDVNs\n                // max num of dvns is 255, 255 is an invalid dvn_idx\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\n                // already enforced certain options can append additional options to the end of the enforced\n                // ones without restrictions.\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\n                if (!bitmap.get(dvnIdx)) {\n                    ++numDVNs;\n                    bitmap = bitmap.set(dvnIdx);\n                }\n\n                cursor += optionLength;\n            }\n        }\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\n    }\n\n    /// @dev decode the next dvn option from _options starting from the specified cursor\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    /// @param _cursor the cursor to start decoding\n    /// @return optionType the type of the option\n    /// @return option the option\n    /// @return cursor the cursor to start decoding the next option\n    function nextDVNOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IMessageLibManager } from \"./IMessageLibManager.sol\";\nimport { IMessagingComposer } from \"./IMessagingComposer.sol\";\nimport { IMessagingChannel } from \"./IMessagingChannel.sol\";\nimport { IMessagingContext } from \"./IMessagingContext.sol\";\n\nstruct MessagingParams {\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes message;\n    bytes options;\n    bool payInLzToken;\n}\n\nstruct MessagingReceipt {\n    bytes32 guid;\n    uint64 nonce;\n    MessagingFee fee;\n}\n\nstruct MessagingFee {\n    uint256 nativeFee;\n    uint256 lzTokenFee;\n}\n\nstruct Origin {\n    uint32 srcEid;\n    bytes32 sender;\n    uint64 nonce;\n}\n\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\n\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\n\n    event PacketDelivered(Origin origin, address receiver);\n\n    event LzReceiveAlert(\n        address indexed receiver,\n        address indexed executor,\n        Origin origin,\n        bytes32 guid,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    event LzTokenSet(address token);\n\n    event DelegateSet(address sender, address delegate);\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function lzReceive(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _guid,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\n\n    function setLzToken(address _lzToken) external;\n\n    function lzToken() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function setDelegate(address _delegate) external;\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"./ILayerZeroEndpointV2.sol\";\n\ninterface ILayerZeroReceiver {\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\n\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\n\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nstruct SetConfigParam {\n    uint32 eid;\n    uint32 configType;\n    bytes config;\n}\n\ninterface IMessageLibManager {\n    struct Timeout {\n        address lib;\n        uint256 expiry;\n    }\n\n    event LibraryRegistered(address newLib);\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\n\n    function registerLibrary(address _lib) external;\n\n    function isRegisteredLibrary(address _lib) external view returns (bool);\n\n    function getRegisteredLibraries() external view returns (address[] memory);\n\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\n\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\n\n    /// ------------------- OApp interfaces -------------------\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\n\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\n\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\n\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\n\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\n\n    function getConfig(\n        address _oapp,\n        address _lib,\n        uint32 _eid,\n        uint32 _configType\n    ) external view returns (bytes memory config);\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingChannel {\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n\n    function eid() external view returns (uint32);\n\n    // this is an emergency function if a message cannot be verified for some reasons\n    // required to provide _nextNonce to avoid race condition\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\n\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\n\n    function inboundPayloadHash(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce\n    ) external view returns (bytes32);\n\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingComposer {\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\n    event LzComposeAlert(\n        address indexed from,\n        address indexed to,\n        address indexed executor,\n        bytes32 guid,\n        uint16 index,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    function composeQueue(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index\n    ) external view returns (bytes32 messageHash);\n\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\n\n    function lzCompose(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingContext {\n    function isSendingMessage() external view returns (bool);\n\n    function getSendContext() external view returns (uint32 dstEid, address sender);\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary CalldataBytesLib {\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\n        return uint8(_bytes[_start]);\n    }\n\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\n        unchecked {\n            uint256 end = _start + 2;\n            return uint16(bytes2(_bytes[_start:end]));\n        }\n    }\n\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\n        unchecked {\n            uint256 end = _start + 4;\n            return uint32(bytes4(_bytes[_start:end]));\n        }\n    }\n\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\n        unchecked {\n            uint256 end = _start + 8;\n            return uint64(bytes8(_bytes[_start:end]));\n        }\n    }\n\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\n        unchecked {\n            uint256 end = _start + 16;\n            return uint128(bytes16(_bytes[_start:end]));\n        }\n    }\n\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\n        unchecked {\n            uint256 end = _start + 32;\n            return uint256(bytes32(_bytes[_start:end]));\n        }\n    }\n\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\n        unchecked {\n            uint256 end = _start + 20;\n            return address(bytes20(_bytes[_start:end]));\n        }\n    }\n\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\n        unchecked {\n            uint256 end = _start + 32;\n            return bytes32(_bytes[_start:end]);\n        }\n    }\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\npragma solidity ^0.8.20;\n\ntype BitMap256 is uint256;\n\nusing BitMaps for BitMap256 global;\n\nlibrary BitMaps {\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\n        uint256 mask = 1 << index;\n        return BitMap256.unwrap(bitmap) & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\n        uint256 mask = 1 << index;\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\n    }\n}\n"},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol":{"content":"// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { CalldataBytesLib } from \"../../libs/CalldataBytesLib.sol\";\n\nlibrary ExecutorOptions {\n    using CalldataBytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 1;\n\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\n\n    error Executor_InvalidLzReceiveOption();\n    error Executor_InvalidNativeDropOption();\n    error Executor_InvalidLzComposeOption();\n\n    /// @dev decode the next executor option from the options starting from the specified cursor\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\n    ///        executor_option = [option_size][option_type][option]\n    ///        option_size = len(option_type) + len(option)\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @param _cursor the cursor to start decoding from\n    /// @return optionType the type of the option\n    /// @return option the option of the executor\n    /// @return cursor the cursor to start decoding the next executor option\n    function nextExecutorOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor);\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 1; // skip option type\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\n        gas = _option.toU128(0);\n        value = _option.length == 32 ? _option.toU128(16) : 0;\n    }\n\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\n        amount = _option.toU128(0);\n        receiver = _option.toB32(16);\n    }\n\n    function decodeLzComposeOption(\n        bytes calldata _option\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\n        index = _option.toU16(0);\n        gas = _option.toU128(2);\n        value = _option.length == 34 ? _option.toU128(18) : 0;\n    }\n\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\n    }\n\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\n        return abi.encodePacked(_amount, _receiver);\n    }\n\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\n    }\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ILayerZeroReceiver, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\n\ninterface IOAppReceiver is ILayerZeroReceiver {\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata _origin,\n        bytes calldata _message,\n        address _sender\n    ) external view returns (bool isSender);\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { BytesLib } from \"solidity-bytes-utils/contracts/BytesLib.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport { ExecutorOptions } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\";\nimport { DVNOptions } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\";\n\n/**\n * @title OptionsBuilder\n * @dev Library for building and encoding various message options.\n */\nlibrary OptionsBuilder {\n    using SafeCast for uint256;\n    using BytesLib for bytes;\n\n    // Constants for options types\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\n    uint16 internal constant TYPE_3 = 3;\n\n    // Custom error message\n    error InvalidSize(uint256 max, uint256 actual);\n    error InvalidOptionType(uint16 optionType);\n\n    // Modifier to ensure only options of type 3 are used\n    modifier onlyType3(bytes memory _options) {\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\n        _;\n    }\n\n    /**\n     * @dev Creates a new options container with type 3.\n     * @return options The newly created options container.\n     */\n    function newOptions() internal pure returns (bytes memory) {\n        return abi.encodePacked(TYPE_3);\n    }\n\n    /**\n     * @dev Adds an executor LZ receive option to the existing options.\n     * @param _options The existing options container.\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed by the executor\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\n     */\n    function addExecutorLzReceiveOption(\n        bytes memory _options,\n        uint128 _gas,\n        uint128 _value\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\n    }\n\n    /**\n     * @dev Adds an executor native drop option to the existing options.\n     * @param _options The existing options container.\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\n     * @param _receiver The receiver address for the native drop option.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\n     */\n    function addExecutorNativeDropOption(\n        bytes memory _options,\n        uint128 _amount,\n        bytes32 _receiver\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\n    }\n\n    /**\n     * @dev Adds an executor LZ compose option to the existing options.\n     * @param _options The existing options container.\n     * @param _index The index for the lzCompose() function call.\n     * @param _gas The gasLimit for the lzCompose() function call.\n     * @param _value The msg.value for the lzCompose() function call.\n     * @return options The updated options container.\n     *\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\n     */\n    function addExecutorLzComposeOption(\n        bytes memory _options,\n        uint16 _index,\n        uint128 _gas,\n        uint128 _value\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\n    }\n\n    /**\n     * @dev Adds an executor ordered execution option to the existing options.\n     * @param _options The existing options container.\n     * @return options The updated options container.\n     */\n    function addExecutorOrderedExecutionOption(\n        bytes memory _options\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\"\"));\n    }\n\n    /**\n     * @dev Adds a DVN pre-crime option to the existing options.\n     * @param _options The existing options container.\n     * @param _dvnIdx The DVN index for the pre-crime option.\n     * @return options The updated options container.\n     */\n    function addDVNPreCrimeOption(\n        bytes memory _options,\n        uint8 _dvnIdx\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\"\"));\n    }\n\n    /**\n     * @dev Adds an executor option to the existing options.\n     * @param _options The existing options container.\n     * @param _optionType The type of the executor option.\n     * @param _option The encoded data for the executor option.\n     * @return options The updated options container.\n     */\n    function addExecutorOption(\n        bytes memory _options,\n        uint8 _optionType,\n        bytes memory _option\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _options,\n                ExecutorOptions.WORKER_ID,\n                _option.length.toUint16() + 1, // +1 for optionType\n                _optionType,\n                _option\n            );\n    }\n\n    /**\n     * @dev Adds a DVN option to the existing options.\n     * @param _options The existing options container.\n     * @param _dvnIdx The DVN index for the DVN option.\n     * @param _optionType The type of the DVN option.\n     * @param _option The encoded data for the DVN option.\n     * @return options The updated options container.\n     */\n    function addDVNOption(\n        bytes memory _options,\n        uint8 _dvnIdx,\n        uint8 _optionType,\n        bytes memory _option\n    ) internal pure onlyType3(_options) returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _options,\n                DVNOptions.WORKER_ID,\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\n                _dvnIdx,\n                _optionType,\n                _option\n            );\n    }\n\n    /**\n     * @dev Encodes legacy options of type 1.\n     * @param _executionGas The gasLimit value passed to lzReceive().\n     * @return legacyOptions The encoded legacy options.\n     */\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\n        return abi.encodePacked(TYPE_1, _executionGas);\n    }\n\n    /**\n     * @dev Encodes legacy options of type 2.\n     * @param _executionGas The gasLimit value passed to lzReceive().\n     * @param _nativeForDst The amount of native air dropped to the receiver.\n     * @param _receiver The _nativeForDst receiver address.\n     * @return legacyOptions The encoded legacy options of type 2.\n     */\n    function encodeLegacyOptionsType2(\n        uint256 _executionGas,\n        uint256 _nativeForDst,\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\n    ) internal pure returns (bytes memory) {\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\n    }\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppSender, MessagingFee, MessagingReceipt } from \"./OAppSender.sol\";\n// @dev Import the 'Origin' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppReceiver, Origin } from \"./OAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OApp\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\n */\nabstract contract OApp is OAppSender, OAppReceiver {\n    /**\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol implementation.\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\n     */\n    function oAppVersion()\n        public\n        pure\n        virtual\n        override(OAppSender, OAppReceiver)\n        returns (uint64 senderVersion, uint64 receiverVersion)\n    {\n        return (SENDER_VERSION, RECEIVER_VERSION);\n    }\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IOAppReceiver, Origin } from \"./interfaces/IOAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppReceiver\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\n */\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\n    // Custom error message for when the caller is not the registered endpoint/\n    error OnlyEndpoint(address addr);\n\n    // @dev The version of the OAppReceiver implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant RECEIVER_VERSION = 2;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n     * ie. this is a RECEIVE only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (0, RECEIVER_VERSION);\n    }\n\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @dev _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @dev _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata /*_origin*/,\n        bytes calldata /*_message*/,\n        address _sender\n    ) public view virtual returns (bool) {\n        return _sender == address(this);\n    }\n\n    /**\n     * @notice Checks if the path initialization is allowed based on the provided origin.\n     * @param origin The origin information containing the source endpoint and sender address.\n     * @return Whether the path has been initialized.\n     *\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n     * @dev This defaults to assuming if a peer has been set, its initialized.\n     * Can be overridden by the OApp if there is other logic to determine this.\n     */\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\n        return peers[origin.srcEid] == origin.sender;\n    }\n\n    /**\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\n     * @dev _srcEid The source endpoint ID.\n     * @dev _sender The sender address.\n     * @return nonce The next nonce.\n     *\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n     * @dev This is also enforced by the OApp.\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\n     */\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\n        return 0;\n    }\n\n    /**\n     * @dev Entry point for receiving messages or packets from the endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The payload of the received message.\n     * @param _executor The address of the executor for the received message.\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\n     *\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\n     */\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) public payable virtual {\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\n\n        // Ensure that the sender matches the expected peer for the source endpoint.\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\n\n        // Call the internal OApp implementation of lzReceive.\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}\n"},"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"},"contracts/OmnichainIdentityLinker.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\r\nimport \"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\";\r\n\r\n/**\r\n * @title OmnichainIdentityLinker\r\n * @dev Contract for linking EVM addresses to Solana addresses via LayerZero V2\r\n * This contract sends messages from EVM chains to a Solana OApp\r\n */\r\ncontract OmnichainIdentityLinker is OApp {\r\n    using OptionsBuilder for bytes;\r\n    // Solana chain ID in LayerZero V2\r\n    uint32 public constant SOLANA_CHAIN_ID = 40168; // Solana DEVNET chain ID in LZ V2\r\n\r\n    // Gas limit for cross-chain calls\r\n    uint256 public gasLimit = 200000;\r\n\r\n    // Store linked addresses history for reference\r\n    mapping(address => bytes[]) public linkedSolanaAddresses;\r\n\r\n    // Event emitted when a link is created\r\n    event IdentityLinked(address evmAddress, bytes solanaAddress, uint256 timestamp);\r\n\r\n    constructor(address _lzEndpoint, address _delegate) OApp(_lzEndpoint, _delegate) {}\r\n\r\n    /**\r\n     * @dev Link the sender's EVM address to a Solana address\r\n     * @param _solanaAddress Solana address as string\r\n     */\r\n    function linkAddress(string memory _solanaAddress) external payable {\r\n        // Format the message as CSV string for easy parsing on Solana\r\n        // Format: \"evmAddress,solanaAddress,timestamp\"\r\n        string memory evmAddressStr = addressToString(msg.sender);\r\n        string memory timestampStr = uint256ToString(block.timestamp);\r\n        string memory message = string(abi.encodePacked(\r\n            evmAddressStr, \",\", \r\n            _solanaAddress, \",\", \r\n            timestampStr\r\n        ));\r\n        \r\n        // Convert string to bytes for sending\r\n        bytes memory payload = bytes(message);\r\n\r\n        // Store the linked address in history\r\n        linkedSolanaAddresses[msg.sender].push(bytes(_solanaAddress));\r\n\r\n        // Emit event\r\n        emit IdentityLinked(msg.sender, bytes(_solanaAddress), block.timestamp);\r\n\r\n        // Prepare messaging parameters for LayerZero V2\r\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(200000, 0);\r\n        \r\n        // Send message to Solana via LayerZero V2\r\n        MessagingFee memory fee = _quote(SOLANA_CHAIN_ID, payload, options, false);\r\n        require(msg.value >= fee.nativeFee, \"Insufficient fee\");\r\n        \r\n        _lzSend(\r\n            SOLANA_CHAIN_ID,     // Destination chain ID (Solana)\r\n            payload,             // Payload\r\n            options,             // Options\r\n            MessagingFee(msg.value, 0), // Fee\r\n            payable(msg.sender)  // Refund address\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Convert an address to a string\r\n     * @param _addr The address to convert\r\n     * @return String representation of the address\r\n     */\r\n    function addressToString(address _addr) internal pure returns (string memory) {\r\n        bytes32 value = bytes32(uint256(uint160(_addr)));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        \r\n        bytes memory str = new bytes(42);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        \r\n        for (uint256 i = 0; i < 20; i++) {\r\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        \r\n        return string(str);\r\n    }\r\n    \r\n    /**\r\n     * @dev Convert a uint256 to a string\r\n     * @param _value The uint256 to convert\r\n     * @return String representation of the uint256\r\n     */\r\n    function uint256ToString(uint256 _value) internal pure returns (string memory) {\r\n        if (_value == 0) {\r\n            return \"0\";\r\n        }\r\n        \r\n        uint256 temp = _value;\r\n        uint256 digits;\r\n        \r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        \r\n        bytes memory buffer = new bytes(digits);\r\n        while (_value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(_value % 10)));\r\n            _value /= 10;\r\n        }\r\n        \r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Get linked Solana addresses for an EVM address\r\n     * @param _evmAddress The EVM address to check\r\n     * @return Array of linked Solana addresses as bytes\r\n     */\r\n    function getLinkedAddresses(address _evmAddress) external view returns (bytes[] memory) {\r\n        return linkedSolanaAddresses[_evmAddress];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get linked Solana addresses for an EVM address as strings\r\n     * @param _evmAddress The EVM address to check\r\n     * @return Array of linked Solana addresses as strings\r\n     */\r\n    function getLinkedAddressesAsStrings(address _evmAddress) external view returns (string[] memory) {\r\n        bytes[] memory bytesAddresses = linkedSolanaAddresses[_evmAddress];\r\n        string[] memory strAddresses = new string[](bytesAddresses.length);\r\n        \r\n        for (uint i = 0; i < bytesAddresses.length; i++) {\r\n            strAddresses[i] = string(bytesAddresses[i]);\r\n        }\r\n        \r\n        return strAddresses;\r\n    }\r\n\r\n    /**\r\n     * @dev Quote the fee for sending a message to Solana\r\n     * @param _solanaAddress The Solana address to link\r\n     * @return fee The estimated messaging fee\r\n     */\r\n    function quoteLinkFee(string memory _solanaAddress) external view returns (MessagingFee memory fee) {\r\n        // Format the message as CSV string for fee estimation\r\n        string memory evmAddressStr = addressToString(msg.sender);\r\n        string memory timestampStr = uint256ToString(block.timestamp);\r\n        string memory message = string(abi.encodePacked(\r\n            evmAddressStr, \",\", \r\n            _solanaAddress, \",\", \r\n            timestampStr\r\n        ));\r\n        \r\n        bytes memory payload = bytes(message);\r\n        bytes memory options = bytes(\"\"); // Default options\r\n        \r\n        return _quote(SOLANA_CHAIN_ID, payload, options, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Quote the fee for linking an address\r\n     * @param _solanaAddress Solana address as string\r\n     * @return Fee required for the cross-chain message\r\n     */\r\n    function quoteLinkAddress(string memory _solanaAddress) external view returns (uint256) {\r\n        // Format the same message as in linkAddress\r\n        string memory evmAddressStr = addressToString(msg.sender);\r\n        string memory timestampStr = uint256ToString(block.timestamp);\r\n        string memory message = string(abi.encodePacked(\r\n            evmAddressStr, \",\", \r\n            _solanaAddress, \",\", \r\n            timestampStr\r\n        ));\r\n        \r\n        bytes memory payload = bytes(message);\r\n        \r\n        // Build proper options with gas limit for destination execution\r\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(200000, 0);\r\n        \r\n        MessagingFee memory fee = _quote(SOLANA_CHAIN_ID, payload, options, false);\r\n        return fee.nativeFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Override the _lzReceive function to handle incoming messages (if needed)\r\n     * This would be used if you want to receive messages from Solana back to EVM\r\n     */\r\n    function _lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _payload,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) internal override {\r\n        // Add handling for received messages from Solana if needed\r\n        // For now, this is a placeholder\r\n    }\r\n\r\n    /**\r\n     * @dev Update the gas limit for cross-chain calls\r\n     * @param _gasLimit New gas limit\r\n     */\r\n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\r\n        gasLimit = _gasLimit;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw any stuck funds (admin function)\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n}\r\n"},"solidity-bytes-utils/contracts/BytesLib.sol":{"content":"// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        // We're using the unchecked block below because otherwise execution ends \n        // with the native overflow error code.\n        unchecked {\n            require(_length + 31 >= _length, \"slice_overflow\");\n        }\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol","exportedSymbols":{"BitMap256":[1412],"BytesLib":[6158],"CalldataBytesLib":[1408],"DVNOptions":[474]},"id":475,"license":"LZBL-1.2","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:0"},{"absolutePath":"solidity-bytes-utils/contracts/BytesLib.sol","file":"solidity-bytes-utils/contracts/BytesLib.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":475,"sourceUnit":6159,"src":"64:71:0","symbolAliases":[{"foreign":{"id":2,"name":"BytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"73:8:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":475,"sourceUnit":1474,"src":"137:100:0","symbolAliases":[{"foreign":{"id":4,"name":"BitMap256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"146:9:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":475,"sourceUnit":1409,"src":"238:105:0","symbolAliases":[{"foreign":{"id":6,"name":"CalldataBytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"247:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"DVNOptions","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":474,"linearizedBaseContracts":[474],"name":"DVNOptions","nameLocation":"353:10:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":10,"libraryName":{"id":8,"name":"CalldataBytesLib","nameLocations":["376:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1408,"src":"376:16:0"},"nodeType":"UsingForDirective","src":"370:33:0","typeName":{"id":9,"name":"bytes","nodeType":"ElementaryTypeName","src":"397:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"global":false,"id":13,"libraryName":{"id":11,"name":"BytesLib","nameLocations":["414:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":6158,"src":"414:8:0"},"nodeType":"UsingForDirective","src":"408:25:0","typeName":{"id":12,"name":"bytes","nodeType":"ElementaryTypeName","src":"427:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"id":16,"mutability":"constant","name":"WORKER_ID","nameLocation":"463:9:0","nodeType":"VariableDeclaration","scope":474,"src":"439:37:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":14,"name":"uint8","nodeType":"ElementaryTypeName","src":"439:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":15,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"475:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":19,"mutability":"constant","name":"OPTION_TYPE_PRECRIME","nameLocation":"506:20:0","nodeType":"VariableDeclaration","scope":474,"src":"482:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":17,"name":"uint8","nodeType":"ElementaryTypeName","src":"482:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":18,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"529:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"errorSelector":"d3d3d9bc","id":21,"name":"DVN_InvalidDVNIdx","nameLocation":"543:17:0","nodeType":"ErrorDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"560:2:0"},"src":"537:26:0"},{"errorSelector":"04eb6e0c","id":25,"name":"DVN_InvalidDVNOptions","nameLocation":"574:21:0","nodeType":"ErrorDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"cursor","nameLocation":"604:6:0","nodeType":"VariableDeclaration","scope":25,"src":"596:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"596:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:16:0"},"src":"568:44:0"},{"body":{"id":235,"nodeType":"Block","src":"1251:2455:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":37,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1265:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1274:6:0","memberName":"length","nodeType":"MemberAccess","src":"1265:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1284:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1265:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":45,"nodeType":"IfStatement","src":"1261:57:0","trueBody":{"expression":{"components":[{"id":41,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1295:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":42,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1307:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}}],"id":43,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1294:24:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"tuple(bytes memory[] memory,uint8[] memory)"}},"functionReturnParameters":36,"id":44,"nodeType":"Return","src":"1287:31:0"}},{"assignments":[47],"declarations":[{"constant":false,"id":47,"mutability":"mutable","name":"numDVNs","nameLocation":"1335:7:0","nodeType":"VariableDeclaration","scope":235,"src":"1329:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":46,"name":"uint8","nodeType":"ElementaryTypeName","src":"1329:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":51,"initialValue":{"arguments":[{"id":49,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1356:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":48,"name":"getNumDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1345:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint8_$","typeString":"function (bytes memory) pure returns (uint8)"}},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1345:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"1329:36:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":52,"name":"numDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"1452:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1452:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":91,"nodeType":"IfStatement","src":"1448:255:0","trueBody":{"id":90,"nodeType":"Block","src":"1466:237:0","statements":[{"expression":{"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":55,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1480:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":59,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1505:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":58,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1493:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":56,"name":"bytes","nodeType":"ElementaryTypeName","src":"1497:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":57,"nodeType":"ArrayTypeName","src":"1497:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1493:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"1480:27:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":62,"nodeType":"ExpressionStatement","src":"1480:27:0"},{"expression":{"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":63,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1521:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":65,"indexExpression":{"hexValue":"30","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1532:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1521:13:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":66,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1537:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1521:24:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":68,"nodeType":"ExpressionStatement","src":"1521:24:0"},{"expression":{"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":69,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1560:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1585:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":72,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1573:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint8[] memory)"},"typeName":{"baseType":{"id":70,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":71,"nodeType":"ArrayTypeName","src":"1577:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}}},"id":74,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"src":"1560:27:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":76,"nodeType":"ExpressionStatement","src":"1560:27:0"},{"expression":{"id":84,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":77,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1601:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":79,"indexExpression":{"hexValue":"30","id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1612:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1601:13:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"33","id":82,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1634:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}],"expression":{"id":80,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1617:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1626:7:0","memberName":"toUint8","nodeType":"MemberAccess","referencedDeclaration":5941,"src":"1617:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1617:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1601:35:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":85,"nodeType":"ExpressionStatement","src":"1601:35:0"},{"expression":{"components":[{"id":86,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1669:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":87,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1681:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}}],"id":88,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1668:24:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"tuple(bytes memory[] memory,uint8[] memory)"}},"functionReturnParameters":36,"id":89,"nodeType":"Return","src":"1661:31:0"}]}},{"expression":{"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":92,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1775:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":96,"name":"numDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"1800:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":95,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1788:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint8_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint8[] memory)"},"typeName":{"baseType":{"id":93,"name":"uint8","nodeType":"ElementaryTypeName","src":"1792:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":94,"nodeType":"ArrayTypeName","src":"1792:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1788:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"src":"1775:33:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":99,"nodeType":"ExpressionStatement","src":"1775:33:0"},{"expression":{"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":100,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1818:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":104,"name":"numDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"1843:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1831:11:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory[] memory)"},"typeName":{"baseType":{"id":101,"name":"bytes","nodeType":"ElementaryTypeName","src":"1835:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":102,"nodeType":"ArrayTypeName","src":"1835:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1831:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"1818:33:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":107,"nodeType":"ExpressionStatement","src":"1818:33:0"},{"id":234,"nodeType":"UncheckedBlock","src":"1861:1839:0","statements":[{"assignments":[109],"declarations":[{"constant":false,"id":109,"mutability":"mutable","name":"cursor","nameLocation":"1893:6:0","nodeType":"VariableDeclaration","scope":234,"src":"1885:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":108,"name":"uint256","nodeType":"ElementaryTypeName","src":"1885:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":111,"initialValue":{"hexValue":"30","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1902:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1885:18:0"},{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"start","nameLocation":"1925:5:0","nodeType":"VariableDeclaration","scope":234,"src":"1917:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1917:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":115,"initialValue":{"hexValue":"30","id":114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1933:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1917:17:0"},{"assignments":[117],"declarations":[{"constant":false,"id":117,"mutability":"mutable","name":"lastDVNIdx","nameLocation":"1954:10:0","nodeType":"VariableDeclaration","scope":234,"src":"1948:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":116,"name":"uint8","nodeType":"ElementaryTypeName","src":"1948:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":119,"initialValue":{"hexValue":"323535","id":118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1967:3:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"nodeType":"VariableDeclarationStatement","src":"1948:22:0"},{"body":{"id":194,"nodeType":"Block","src":"2047:1145:0","statements":[{"expression":{"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2065:8:0","subExpression":{"id":124,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2067:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":126,"nodeType":"ExpressionStatement","src":"2065:8:0"},{"assignments":[128],"declarations":[{"constant":false,"id":128,"mutability":"mutable","name":"optionLength","nameLocation":"2185:12:0","nodeType":"VariableDeclaration","scope":194,"src":"2178:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":127,"name":"uint16","nodeType":"ElementaryTypeName","src":"2178:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":133,"initialValue":{"arguments":[{"id":131,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2218:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":129,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2200:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2209:8:0","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"2200:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2200:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"2178:47:0"},{"expression":{"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":134,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2243:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2253:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2243:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":137,"nodeType":"ExpressionStatement","src":"2243:11:0"},{"assignments":[139],"declarations":[{"constant":false,"id":139,"mutability":"mutable","name":"dvnIdx","nameLocation":"2341:6:0","nodeType":"VariableDeclaration","scope":194,"src":"2335:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":138,"name":"uint8","nodeType":"ElementaryTypeName","src":"2335:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":144,"initialValue":{"arguments":[{"id":142,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2367:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":140,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2350:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2359:7:0","memberName":"toUint8","nodeType":"MemberAccess","referencedDeclaration":5941,"src":"2350:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2350:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"2335:39:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":145,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2636:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"323535","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2650:3:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2636:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":153,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"2725:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":154,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2735:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2725:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"2721:416:0","trueBody":{"id":187,"nodeType":"Block","src":"2747:390:0","statements":[{"assignments":[157],"declarations":[{"constant":false,"id":157,"mutability":"mutable","name":"len","nameLocation":"2777:3:0","nodeType":"VariableDeclaration","scope":187,"src":"2769:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"2769:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":163,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":158,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2783:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":159,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"2792:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2783:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33","id":161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2800:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"2783:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2769:32:0"},{"assignments":[165],"declarations":[{"constant":false,"id":165,"mutability":"mutable","name":"opt","nameLocation":"2876:3:0","nodeType":"VariableDeclaration","scope":187,"src":"2863:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":164,"name":"bytes","nodeType":"ElementaryTypeName","src":"2863:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":171,"initialValue":{"arguments":[{"id":168,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"2897:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":169,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2904:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":166,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2882:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2891:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":5889,"src":"2882:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2863:45:0"},{"expression":{"arguments":[{"id":173,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2948:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":174,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"2960:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},{"id":175,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2972:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":176,"name":"opt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"2984:3:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":172,"name":"_insertDVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2930:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory[] memory,uint8[] memory,uint8,bytes memory) pure"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2930:58:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":178,"nodeType":"ExpressionStatement","src":"2930:58:0"},{"expression":{"id":181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":179,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3065:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":180,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"3074:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3065:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":182,"nodeType":"ExpressionStatement","src":"3065:12:0"},{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3099:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":184,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3112:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3099:19:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":186,"nodeType":"ExpressionStatement","src":"3099:19:0"}]}},"id":189,"nodeType":"IfStatement","src":"2632:505:0","trueBody":{"id":152,"nodeType":"Block","src":"2655:60:0","statements":[{"expression":{"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":148,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"2677:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":149,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"2690:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2677:19:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":151,"nodeType":"ExpressionStatement","src":"2677:19:0"}]}},{"expression":{"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":190,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"3155:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":191,"name":"optionLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3165:12:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3155:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":193,"nodeType":"ExpressionStatement","src":"3155:22:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":120,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2021:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":121,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2030:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2039:6:0","memberName":"length","nodeType":"MemberAccess","src":"2030:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2021:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":195,"nodeType":"WhileStatement","src":"2014:1178:0"},{"assignments":[197],"declarations":[{"constant":false,"id":197,"mutability":"mutable","name":"size","nameLocation":"3391:4:0","nodeType":"VariableDeclaration","scope":234,"src":"3383:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":196,"name":"uint256","nodeType":"ElementaryTypeName","src":"3383:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":201,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":198,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"3398:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":199,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3407:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3398:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3383:29:0"},{"assignments":[203],"declarations":[{"constant":false,"id":203,"mutability":"mutable","name":"op","nameLocation":"3439:2:0","nodeType":"VariableDeclaration","scope":234,"src":"3426:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":202,"name":"bytes","nodeType":"ElementaryTypeName","src":"3426:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":209,"initialValue":{"arguments":[{"id":206,"name":"start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3459:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":207,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"3466:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":204,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"3444:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3453:5:0","memberName":"slice","nodeType":"MemberAccess","referencedDeclaration":5889,"src":"3444:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3444:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3426:45:0"},{"expression":{"arguments":[{"id":211,"name":"dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"3503:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},{"id":212,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"3515:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},{"id":213,"name":"lastDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3527:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":214,"name":"op","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"3539:2:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"},{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":210,"name":"_insertDVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3485:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory[] memory,uint8[] memory,uint8,bytes memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3485:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"3485:57:0"},{"body":{"id":232,"nodeType":"Block","src":"3642:48:0","statements":[{"expression":{"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"3660:15:0","subExpression":{"baseExpression":{"id":227,"name":"dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"3662:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":229,"indexExpression":{"id":228,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3673:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3662:13:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":231,"nodeType":"ExpressionStatement","src":"3660:15:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3624:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":222,"name":"numDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"3628:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3624:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":233,"initializationExpression":{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"i","nameLocation":"3617:1:0","nodeType":"VariableDeclaration","scope":233,"src":"3611:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":217,"name":"uint8","nodeType":"ElementaryTypeName","src":"3611:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":220,"initialValue":{"hexValue":"30","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3621:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3611:11:0"},"loopExpression":{"expression":{"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3637:3:0","subExpression":{"id":224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3639:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":226,"nodeType":"ExpressionStatement","src":"3637:3:0"},"nodeType":"ForStatement","src":"3606:84:0"}]}]},"documentation":{"id":26,"nodeType":"StructuredDocumentation","src":"618:484:0","text":"@dev group dvn options by its idx\n @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\n        dvn_option = [option_size][dvn_idx][option_type][option]\n        option_size = len(dvn_idx) + len(option_type) + len(option)\n        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\n @return dvnOptions the grouped options, still share the same format of _options\n @return dvnIndices the dvn indices"},"id":236,"implemented":true,"kind":"function","modifiers":[],"name":"groupDVNOptionsByIdx","nameLocation":"1116:20:0","nodeType":"FunctionDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"_options","nameLocation":"1159:8:0","nodeType":"VariableDeclaration","scope":236,"src":"1146:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":27,"name":"bytes","nodeType":"ElementaryTypeName","src":"1146:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1136:37:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"dvnOptions","nameLocation":"1212:10:0","nodeType":"VariableDeclaration","scope":236,"src":"1197:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":30,"name":"bytes","nodeType":"ElementaryTypeName","src":"1197:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":31,"nodeType":"ArrayTypeName","src":"1197:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"dvnIndices","nameLocation":"1239:10:0","nodeType":"VariableDeclaration","scope":236,"src":"1224:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":33,"name":"uint8","nodeType":"ElementaryTypeName","src":"1224:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":34,"nodeType":"ArrayTypeName","src":"1224:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"}],"src":"1196:54:0"},"scope":474,"src":"1107:2599:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":317,"nodeType":"Block","src":"3888:733:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":249,"name":"_dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4037:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"323535","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4048:3:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4037:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":255,"nodeType":"IfStatement","src":"4033:46:0","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":252,"name":"DVN_InvalidDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"4060:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4060:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"RevertStatement","src":"4053:26:0"}},{"assignments":[257],"declarations":[{"constant":false,"id":257,"mutability":"mutable","name":"dvnIdxAdj","nameLocation":"4095:9:0","nodeType":"VariableDeclaration","scope":317,"src":"4089:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":256,"name":"uint8","nodeType":"ElementaryTypeName","src":"4089:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":261,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":258,"name":"_dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4107:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4117:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4107:11:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4089:29:0"},{"body":{"id":315,"nodeType":"Block","src":"4178:437:0","statements":[{"assignments":[274],"declarations":[{"constant":false,"id":274,"mutability":"mutable","name":"index","nameLocation":"4198:5:0","nodeType":"VariableDeclaration","scope":315,"src":"4192:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":273,"name":"uint8","nodeType":"ElementaryTypeName","src":"4192:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":278,"initialValue":{"baseExpression":{"id":275,"name":"_dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4206:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":277,"indexExpression":{"id":276,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4218:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4206:14:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4192:28:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":279,"name":"dvnIdxAdj","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4238:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":280,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"4251:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4238:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":296,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"4386:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4395:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4386:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":313,"nodeType":"IfStatement","src":"4382:223:0","trueBody":{"id":312,"nodeType":"Block","src":"4398:207:0","statements":[{"expression":{"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":299,"name":"_dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4495:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":301,"indexExpression":{"id":300,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4507:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4495:14:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":302,"name":"dvnIdxAdj","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4512:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4495:26:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":304,"nodeType":"ExpressionStatement","src":"4495:26:0"},{"expression":{"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":305,"name":"_dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4539:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":307,"indexExpression":{"id":306,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4551:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4539:14:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":308,"name":"_newOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"4556:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4539:28:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":310,"nodeType":"ExpressionStatement","src":"4539:28:0"},{"id":311,"nodeType":"Break","src":"4585:5:0"}]}},"id":314,"nodeType":"IfStatement","src":"4234:371:0","trueBody":{"id":295,"nodeType":"Block","src":"4258:118:0","statements":[{"expression":{"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":282,"name":"_dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4276:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":284,"indexExpression":{"id":283,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4288:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4276:14:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":287,"name":"_dvnOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4310:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":289,"indexExpression":{"id":288,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4322:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4310:14:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":290,"name":"_newOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"4326:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":285,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4293:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4297:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4293:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4293:45:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4276:62:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":293,"nodeType":"ExpressionStatement","src":"4276:62:0"},{"id":294,"nodeType":"Break","src":"4356:5:0"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4149:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":267,"name":"_dvnIndices","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4153:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[] memory"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4165:6:0","memberName":"length","nodeType":"MemberAccess","src":"4153:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4149:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":316,"initializationExpression":{"assignments":[263],"declarations":[{"constant":false,"id":263,"mutability":"mutable","name":"j","nameLocation":"4142:1:0","nodeType":"VariableDeclaration","scope":316,"src":"4134:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"4134:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":265,"initialValue":{"hexValue":"30","id":264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4146:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4134:13:0"},"loopExpression":{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4173:3:0","subExpression":{"id":270,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"4175:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":272,"nodeType":"ExpressionStatement","src":"4173:3:0"},"nodeType":"ForStatement","src":"4129:486:0"}]},"id":318,"implemented":true,"kind":"function","modifiers":[],"name":"_insertDVNOptions","nameLocation":"3721:17:0","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"_dvnOptions","nameLocation":"3763:11:0","nodeType":"VariableDeclaration","scope":318,"src":"3748:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":237,"name":"bytes","nodeType":"ElementaryTypeName","src":"3748:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":238,"nodeType":"ArrayTypeName","src":"3748:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"_dvnIndices","nameLocation":"3799:11:0","nodeType":"VariableDeclaration","scope":318,"src":"3784:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_memory_ptr","typeString":"uint8[]"},"typeName":{"baseType":{"id":240,"name":"uint8","nodeType":"ElementaryTypeName","src":"3784:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":241,"nodeType":"ArrayTypeName","src":"3784:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$dyn_storage_ptr","typeString":"uint8[]"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"_dvnIdx","nameLocation":"3826:7:0","nodeType":"VariableDeclaration","scope":318,"src":"3820:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":243,"name":"uint8","nodeType":"ElementaryTypeName","src":"3820:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"_newOptions","nameLocation":"3856:11:0","nodeType":"VariableDeclaration","scope":318,"src":"3843:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":245,"name":"bytes","nodeType":"ElementaryTypeName","src":"3843:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:135:0"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"3888:0:0"},"scope":474,"src":"3712:909:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":407,"nodeType":"Block","src":"4822:1357:0","statements":[{"assignments":[327],"declarations":[{"constant":false,"id":327,"mutability":"mutable","name":"cursor","nameLocation":"4840:6:0","nodeType":"VariableDeclaration","scope":407,"src":"4832:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint256","nodeType":"ElementaryTypeName","src":"4832:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":329,"initialValue":{"hexValue":"30","id":328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4849:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4832:18:0"},{"assignments":[332],"declarations":[{"constant":false,"id":332,"mutability":"mutable","name":"bitmap","nameLocation":"4870:6:0","nodeType":"VariableDeclaration","scope":407,"src":"4860:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"},"typeName":{"id":331,"nodeType":"UserDefinedTypeName","pathNode":{"id":330,"name":"BitMap256","nameLocations":["4860:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":1412,"src":"4860:9:0"},"referencedDeclaration":1412,"src":"4860:9:0","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"visibility":"internal"}],"id":333,"nodeType":"VariableDeclarationStatement","src":"4860:16:0"},{"id":397,"nodeType":"UncheckedBlock","src":"4928:1168:0","statements":[{"body":{"id":395,"nodeType":"Block","src":"4985:1101:0","statements":[{"expression":{"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5003:8:0","subExpression":{"id":338,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5005:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":340,"nodeType":"ExpressionStatement","src":"5003:8:0"},{"assignments":[342],"declarations":[{"constant":false,"id":342,"mutability":"mutable","name":"optionLength","nameLocation":"5055:12:0","nodeType":"VariableDeclaration","scope":395,"src":"5048:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":341,"name":"uint16","nodeType":"ElementaryTypeName","src":"5048:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":347,"initialValue":{"arguments":[{"id":345,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5088:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":343,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"5070:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5079:8:0","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"5070:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5070:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"5048:47:0"},{"expression":{"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":348,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5113:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5123:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5113:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":351,"nodeType":"ExpressionStatement","src":"5113:11:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":352,"name":"optionLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"5146:12:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"32","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5161:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5146:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":359,"nodeType":"IfStatement","src":"5142:58:0","trueBody":{"errorCall":{"arguments":[{"id":356,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5193:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":355,"name":"DVN_InvalidDVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"5171:21:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5171:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":358,"nodeType":"RevertStatement","src":"5164:36:0"}},{"assignments":[361],"declarations":[{"constant":false,"id":361,"mutability":"mutable","name":"dvnIdx","nameLocation":"5283:6:0","nodeType":"VariableDeclaration","scope":395,"src":"5277:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":360,"name":"uint8","nodeType":"ElementaryTypeName","src":"5277:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":366,"initialValue":{"arguments":[{"id":364,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5309:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":362,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"5292:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5301:7:0","memberName":"toUint8","nodeType":"MemberAccess","referencedDeclaration":5941,"src":"5292:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint8_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint8)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5292:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"5277:39:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":367,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5848:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"323535","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5858:3:0","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"5848:13:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":373,"nodeType":"IfStatement","src":"5844:45:0","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":370,"name":"DVN_InvalidDVNIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"5870:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5870:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":372,"nodeType":"RevertStatement","src":"5863:26:0"}},{"condition":{"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5911:19:0","subExpression":{"arguments":[{"id":376,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5923:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":374,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5912:6:0","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5919:3:0","memberName":"get","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"5912:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_BitMap256_$1412_$_t_uint8_$returns$_t_bool_$attached_to$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"function (BitMap256,uint8) pure returns (bool)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5912:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":390,"nodeType":"IfStatement","src":"5907:124:0","trueBody":{"id":389,"nodeType":"Block","src":"5932:99:0","statements":[{"expression":{"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5954:9:0","subExpression":{"id":379,"name":"numDVNs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"5956:7:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":381,"nodeType":"ExpressionStatement","src":"5954:9:0"},{"expression":{"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":382,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5985:6:0","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":385,"name":"dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"6005:6:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":383,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"5994:6:0","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6001:3:0","memberName":"set","nodeType":"MemberAccess","referencedDeclaration":1472,"src":"5994:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_BitMap256_$1412_$_t_uint8_$returns$_t_userDefinedValueType$_BitMap256_$1412_$attached_to$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"function (BitMap256,uint8) pure returns (BitMap256)"}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"src":"5985:27:0","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"id":388,"nodeType":"ExpressionStatement","src":"5985:27:0"}]}},{"expression":{"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":391,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"6049:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":392,"name":"optionLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"6059:12:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6049:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":394,"nodeType":"ExpressionStatement","src":"6049:22:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":334,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4959:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":335,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"4968:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4977:6:0","memberName":"length","nodeType":"MemberAccess","src":"4968:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4959:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":396,"nodeType":"WhileStatement","src":"4952:1134:0"}]},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"6109:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":399,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"6119:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6128:6:0","memberName":"length","nodeType":"MemberAccess","src":"6119:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6109:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":406,"nodeType":"IfStatement","src":"6105:67:0","trueBody":{"errorCall":{"arguments":[{"id":403,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"6165:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":402,"name":"DVN_InvalidDVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"6143:21:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6143:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"RevertStatement","src":"6136:36:0"}}]},"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"4627:109:0","text":"@dev get the number of unique dvns\n @param _options the format is the same as groupDVNOptionsByIdx"},"id":408,"implemented":true,"kind":"function","modifiers":[],"name":"getNumDVNs","nameLocation":"4750:10:0","nodeType":"FunctionDefinition","parameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"_options","nameLocation":"4774:8:0","nodeType":"VariableDeclaration","scope":408,"src":"4761:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":320,"name":"bytes","nodeType":"ElementaryTypeName","src":"4761:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4760:23:0"},"returnParameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"mutability":"mutable","name":"numDVNs","nameLocation":"4813:7:0","nodeType":"VariableDeclaration","scope":408,"src":"4807:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":323,"name":"uint8","nodeType":"ElementaryTypeName","src":"4807:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4806:15:0"},"scope":474,"src":"4741:1438:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":472,"nodeType":"Block","src":"6716:602:0","statements":[{"id":471,"nodeType":"UncheckedBlock","src":"6726:586:0","statements":[{"expression":{"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":422,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6780:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":423,"name":"_cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"6789:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6799:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6789:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6780:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":427,"nodeType":"ExpressionStatement","src":"6780:20:0"},{"assignments":[429],"declarations":[{"constant":false,"id":429,"mutability":"mutable","name":"size","nameLocation":"6854:4:0","nodeType":"VariableDeclaration","scope":471,"src":"6847:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":428,"name":"uint16","nodeType":"ElementaryTypeName","src":"6847:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":434,"initialValue":{"arguments":[{"id":432,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6876:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":430,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6861:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6870:5:0","memberName":"toU16","nodeType":"MemberAccess","referencedDeclaration":1242,"src":"6861:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint16)"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6861:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"6847:36:0"},{"expression":{"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":435,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6897:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6907:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6897:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":438,"nodeType":"ExpressionStatement","src":"6897:11:0"},{"expression":{"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":439,"name":"optionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"6955:10:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":442,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"6982:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6991:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6982:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":440,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6968:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6977:4:0","memberName":"toU8","nodeType":"MemberAccess","referencedDeclaration":1214,"src":"6968:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint8_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint8)"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6968:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6955:38:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":447,"nodeType":"ExpressionStatement","src":"6955:38:0"},{"assignments":[449],"declarations":[{"constant":false,"id":449,"mutability":"mutable","name":"startCursor","nameLocation":"7116:11:0","nodeType":"VariableDeclaration","scope":471,"src":"7108:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"7108:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":453,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":450,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"7130:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7139:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7130:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7108:32:0"},{"assignments":[455],"declarations":[{"constant":false,"id":455,"mutability":"mutable","name":"endCursor","nameLocation":"7194:9:0","nodeType":"VariableDeclaration","scope":471,"src":"7186:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"7186:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":459,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":456,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"7206:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":457,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"7215:4:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7206:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7186:33:0"},{"expression":{"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":460,"name":"option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"7233:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":461,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"7242:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":463,"name":"endCursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"7263:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"7242:31:0","startExpression":{"id":462,"name":"startCursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"7251:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"src":"7233:40:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":466,"nodeType":"ExpressionStatement","src":"7233:40:0"},{"expression":{"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":467,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"7287:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":468,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"7297:4:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7287:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":470,"nodeType":"ExpressionStatement","src":"7287:14:0"}]}]},"documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"6185:359:0","text":"@dev decode the next dvn option from _options starting from the specified cursor\n @param _options the format is the same as groupDVNOptionsByIdx\n @param _cursor the cursor to start decoding\n @return optionType the type of the option\n @return option the option\n @return cursor the cursor to start decoding the next option"},"id":473,"implemented":true,"kind":"function","modifiers":[],"name":"nextDVNOption","nameLocation":"6558:13:0","nodeType":"FunctionDefinition","parameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"_options","nameLocation":"6596:8:0","nodeType":"VariableDeclaration","scope":473,"src":"6581:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":410,"name":"bytes","nodeType":"ElementaryTypeName","src":"6581:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"_cursor","nameLocation":"6622:7:0","nodeType":"VariableDeclaration","scope":473,"src":"6614:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"6614:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6571:64:0"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"optionType","nameLocation":"6665:10:0","nodeType":"VariableDeclaration","scope":473,"src":"6659:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":415,"name":"uint8","nodeType":"ElementaryTypeName","src":"6659:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"option","nameLocation":"6692:6:0","nodeType":"VariableDeclaration","scope":473,"src":"6677:21:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":417,"name":"bytes","nodeType":"ElementaryTypeName","src":"6677:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"cursor","nameLocation":"6708:6:0","nodeType":"VariableDeclaration","scope":473,"src":"6700:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":419,"name":"uint256","nodeType":"ElementaryTypeName","src":"6700:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6658:57:0"},"scope":474,"src":"6549:769:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":475,"src":"345:6975:0","usedErrors":[21,25],"usedEvents":[]}],"src":"38:7283:0"},"id":0},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","exportedSymbols":{"ILayerZeroEndpointV2":[677],"IMessageLibManager":[958],"IMessagingChannel":[1094],"IMessagingComposer":[1180],"IMessagingContext":[1195],"MessagingFee":[508],"MessagingParams":[495],"MessagingReceipt":[503],"Origin":[515]},"id":678,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":476,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:1"},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol","file":"./IMessageLibManager.sol","id":478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":678,"sourceUnit":959,"src":"59:62:1","symbolAliases":[{"foreign":{"id":477,"name":"IMessageLibManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"68:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol","file":"./IMessagingComposer.sol","id":480,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":678,"sourceUnit":1181,"src":"122:62:1","symbolAliases":[{"foreign":{"id":479,"name":"IMessagingComposer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"131:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol","file":"./IMessagingChannel.sol","id":482,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":678,"sourceUnit":1095,"src":"185:60:1","symbolAliases":[{"foreign":{"id":481,"name":"IMessagingChannel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"194:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol","file":"./IMessagingContext.sol","id":484,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":678,"sourceUnit":1196,"src":"246:60:1","symbolAliases":[{"foreign":{"id":483,"name":"IMessagingContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1195,"src":"255:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"MessagingParams","id":495,"members":[{"constant":false,"id":486,"mutability":"mutable","name":"dstEid","nameLocation":"344:6:1","nodeType":"VariableDeclaration","scope":495,"src":"337:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":485,"name":"uint32","nodeType":"ElementaryTypeName","src":"337:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"receiver","nameLocation":"364:8:1","nodeType":"VariableDeclaration","scope":495,"src":"356:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"356:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"message","nameLocation":"384:7:1","nodeType":"VariableDeclaration","scope":495,"src":"378:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":489,"name":"bytes","nodeType":"ElementaryTypeName","src":"378:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":492,"mutability":"mutable","name":"options","nameLocation":"403:7:1","nodeType":"VariableDeclaration","scope":495,"src":"397:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":491,"name":"bytes","nodeType":"ElementaryTypeName","src":"397:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"payInLzToken","nameLocation":"421:12:1","nodeType":"VariableDeclaration","scope":495,"src":"416:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"416:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"MessagingParams","nameLocation":"315:15:1","nodeType":"StructDefinition","scope":678,"src":"308:128:1","visibility":"public"},{"canonicalName":"MessagingReceipt","id":503,"members":[{"constant":false,"id":497,"mutability":"mutable","name":"guid","nameLocation":"476:4:1","nodeType":"VariableDeclaration","scope":503,"src":"468:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"468:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":499,"mutability":"mutable","name":"nonce","nameLocation":"493:5:1","nodeType":"VariableDeclaration","scope":503,"src":"486:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":498,"name":"uint64","nodeType":"ElementaryTypeName","src":"486:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"fee","nameLocation":"517:3:1","nodeType":"VariableDeclaration","scope":503,"src":"504:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"},"typeName":{"id":501,"nodeType":"UserDefinedTypeName","pathNode":{"id":500,"name":"MessagingFee","nameLocations":["504:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"504:12:1"},"referencedDeclaration":508,"src":"504:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"name":"MessagingReceipt","nameLocation":"445:16:1","nodeType":"StructDefinition","scope":678,"src":"438:85:1","visibility":"public"},{"canonicalName":"MessagingFee","id":508,"members":[{"constant":false,"id":505,"mutability":"mutable","name":"nativeFee","nameLocation":"559:9:1","nodeType":"VariableDeclaration","scope":508,"src":"551:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"551:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"lzTokenFee","nameLocation":"582:10:1","nodeType":"VariableDeclaration","scope":508,"src":"574:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"MessagingFee","nameLocation":"532:12:1","nodeType":"StructDefinition","scope":678,"src":"525:70:1","visibility":"public"},{"canonicalName":"Origin","id":515,"members":[{"constant":false,"id":510,"mutability":"mutable","name":"srcEid","nameLocation":"624:6:1","nodeType":"VariableDeclaration","scope":515,"src":"617:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":509,"name":"uint32","nodeType":"ElementaryTypeName","src":"617:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"sender","nameLocation":"644:6:1","nodeType":"VariableDeclaration","scope":515,"src":"636:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":511,"name":"bytes32","nodeType":"ElementaryTypeName","src":"636:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"nonce","nameLocation":"663:5:1","nodeType":"VariableDeclaration","scope":515,"src":"656:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":513,"name":"uint64","nodeType":"ElementaryTypeName","src":"656:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"Origin","nameLocation":"604:6:1","nodeType":"StructDefinition","scope":678,"src":"597:74:1","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":516,"name":"IMessageLibManager","nameLocations":["707:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"707:18:1"},"id":517,"nodeType":"InheritanceSpecifier","src":"707:18:1"},{"baseName":{"id":518,"name":"IMessagingComposer","nameLocations":["727:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":1180,"src":"727:18:1"},"id":519,"nodeType":"InheritanceSpecifier","src":"727:18:1"},{"baseName":{"id":520,"name":"IMessagingChannel","nameLocations":["747:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1094,"src":"747:17:1"},"id":521,"nodeType":"InheritanceSpecifier","src":"747:17:1"},{"baseName":{"id":522,"name":"IMessagingContext","nameLocations":["766:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"766:17:1"},"id":523,"nodeType":"InheritanceSpecifier","src":"766:17:1"}],"canonicalName":"ILayerZeroEndpointV2","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":677,"linearizedBaseContracts":[677,1195,1094,1180,958],"name":"ILayerZeroEndpointV2","nameLocation":"683:20:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"1ab700d4ced0c005b164c0f789fd09fcbb0156d4c2041b8a3bfbcd961cd1567f","id":531,"name":"PacketSent","nameLocation":"796:10:1","nodeType":"EventDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"indexed":false,"mutability":"mutable","name":"encodedPayload","nameLocation":"813:14:1","nodeType":"VariableDeclaration","scope":531,"src":"807:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":524,"name":"bytes","nodeType":"ElementaryTypeName","src":"807:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":527,"indexed":false,"mutability":"mutable","name":"options","nameLocation":"835:7:1","nodeType":"VariableDeclaration","scope":531,"src":"829:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":526,"name":"bytes","nodeType":"ElementaryTypeName","src":"829:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":529,"indexed":false,"mutability":"mutable","name":"sendLibrary","nameLocation":"852:11:1","nodeType":"VariableDeclaration","scope":531,"src":"844:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"806:58:1"},"src":"790:75:1"},{"anonymous":false,"eventSelector":"0d87345f3d1c929caba93e1c3821b54ff3512e12b66aa3cfe54b6bcbc17e59b4","id":540,"name":"PacketVerified","nameLocation":"877:14:1","nodeType":"EventDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"indexed":false,"mutability":"mutable","name":"origin","nameLocation":"899:6:1","nodeType":"VariableDeclaration","scope":540,"src":"892:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_memory_ptr","typeString":"struct Origin"},"typeName":{"id":533,"nodeType":"UserDefinedTypeName","pathNode":{"id":532,"name":"Origin","nameLocations":["892:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"892:6:1"},"referencedDeclaration":515,"src":"892:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":536,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"915:8:1","nodeType":"VariableDeclaration","scope":540,"src":"907:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":535,"name":"address","nodeType":"ElementaryTypeName","src":"907:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":538,"indexed":false,"mutability":"mutable","name":"payloadHash","nameLocation":"933:11:1","nodeType":"VariableDeclaration","scope":540,"src":"925:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"925:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"891:54:1"},"src":"871:75:1"},{"anonymous":false,"eventSelector":"3cd5e48f9730b129dc7550f0fcea9c767b7be37837cd10e55eb35f734f4bca04","id":547,"name":"PacketDelivered","nameLocation":"958:15:1","nodeType":"EventDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"indexed":false,"mutability":"mutable","name":"origin","nameLocation":"981:6:1","nodeType":"VariableDeclaration","scope":547,"src":"974:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_memory_ptr","typeString":"struct Origin"},"typeName":{"id":542,"nodeType":"UserDefinedTypeName","pathNode":{"id":541,"name":"Origin","nameLocations":["974:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"974:6:1"},"referencedDeclaration":515,"src":"974:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":545,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"997:8:1","nodeType":"VariableDeclaration","scope":547,"src":"989:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"973:33:1"},"src":"952:55:1"},{"anonymous":false,"eventSelector":"7edfa10fe10193301ad8a8bea7e968c7bcabcc64981f368e3aeada40ce26ae2c","id":568,"name":"LzReceiveAlert","nameLocation":"1019:14:1","nodeType":"EventDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":549,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"1059:8:1","nodeType":"VariableDeclaration","scope":568,"src":"1043:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":551,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"1093:8:1","nodeType":"VariableDeclaration","scope":568,"src":"1077:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"1077:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":554,"indexed":false,"mutability":"mutable","name":"origin","nameLocation":"1118:6:1","nodeType":"VariableDeclaration","scope":568,"src":"1111:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_memory_ptr","typeString":"struct Origin"},"typeName":{"id":553,"nodeType":"UserDefinedTypeName","pathNode":{"id":552,"name":"Origin","nameLocations":["1111:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"1111:6:1"},"referencedDeclaration":515,"src":"1111:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":556,"indexed":false,"mutability":"mutable","name":"guid","nameLocation":"1142:4:1","nodeType":"VariableDeclaration","scope":568,"src":"1134:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1134:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":558,"indexed":false,"mutability":"mutable","name":"gas","nameLocation":"1164:3:1","nodeType":"VariableDeclaration","scope":568,"src":"1156:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":560,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1185:5:1","nodeType":"VariableDeclaration","scope":568,"src":"1177:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"1177:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":562,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"1206:7:1","nodeType":"VariableDeclaration","scope":568,"src":"1200:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":561,"name":"bytes","nodeType":"ElementaryTypeName","src":"1200:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":564,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"1229:9:1","nodeType":"VariableDeclaration","scope":568,"src":"1223:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":563,"name":"bytes","nodeType":"ElementaryTypeName","src":"1223:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":566,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"1254:6:1","nodeType":"VariableDeclaration","scope":568,"src":"1248:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":565,"name":"bytes","nodeType":"ElementaryTypeName","src":"1248:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1033:233:1"},"src":"1013:254:1"},{"anonymous":false,"eventSelector":"d476ec5ec1ac11cec3714d41e7ea49419471aceb9bd0dff1becfc3e363a62396","id":572,"name":"LzTokenSet","nameLocation":"1279:10:1","nodeType":"EventDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1298:5:1","nodeType":"VariableDeclaration","scope":572,"src":"1290:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1289:15:1"},"src":"1273:32:1"},{"anonymous":false,"eventSelector":"6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981","id":578,"name":"DelegateSet","nameLocation":"1317:11:1","nodeType":"EventDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"1337:6:1","nodeType":"VariableDeclaration","scope":578,"src":"1329:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"1329:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":576,"indexed":false,"mutability":"mutable","name":"delegate","nameLocation":"1353:8:1","nodeType":"VariableDeclaration","scope":578,"src":"1345:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1328:34:1"},"src":"1311:52:1"},{"functionSelector":"ddc28c58","id":589,"implemented":false,"kind":"function","modifiers":[],"name":"quote","nameLocation":"1378:5:1","nodeType":"FunctionDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"_params","nameLocation":"1409:7:1","nodeType":"VariableDeclaration","scope":589,"src":"1384:32:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_calldata_ptr","typeString":"struct MessagingParams"},"typeName":{"id":580,"nodeType":"UserDefinedTypeName","pathNode":{"id":579,"name":"MessagingParams","nameLocations":["1384:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":495,"src":"1384:15:1"},"referencedDeclaration":495,"src":"1384:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_storage_ptr","typeString":"struct MessagingParams"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"_sender","nameLocation":"1426:7:1","nodeType":"VariableDeclaration","scope":589,"src":"1418:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":582,"name":"address","nodeType":"ElementaryTypeName","src":"1418:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1383:51:1"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":589,"src":"1458:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"MessagingFee","nameLocations":["1458:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"1458:12:1"},"referencedDeclaration":508,"src":"1458:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"src":"1457:21:1"},"scope":677,"src":"1369:110:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2637a450","id":600,"implemented":false,"kind":"function","modifiers":[],"name":"send","nameLocation":"1494:4:1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"mutability":"mutable","name":"_params","nameLocation":"1533:7:1","nodeType":"VariableDeclaration","scope":600,"src":"1508:32:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_calldata_ptr","typeString":"struct MessagingParams"},"typeName":{"id":591,"nodeType":"UserDefinedTypeName","pathNode":{"id":590,"name":"MessagingParams","nameLocations":["1508:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":495,"src":"1508:15:1"},"referencedDeclaration":495,"src":"1508:15:1","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_storage_ptr","typeString":"struct MessagingParams"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"_refundAddress","nameLocation":"1558:14:1","nodeType":"VariableDeclaration","scope":600,"src":"1550:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"1550:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1498:80:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"1605:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_memory_ptr","typeString":"struct MessagingReceipt"},"typeName":{"id":597,"nodeType":"UserDefinedTypeName","pathNode":{"id":596,"name":"MessagingReceipt","nameLocations":["1605:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":503,"src":"1605:16:1"},"referencedDeclaration":503,"src":"1605:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_storage_ptr","typeString":"struct MessagingReceipt"}},"visibility":"internal"}],"src":"1604:25:1"},"scope":677,"src":"1485:145:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"a825d747","id":610,"implemented":false,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1645:6:1","nodeType":"FunctionDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"_origin","nameLocation":"1668:7:1","nodeType":"VariableDeclaration","scope":610,"src":"1652:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":602,"nodeType":"UserDefinedTypeName","pathNode":{"id":601,"name":"Origin","nameLocations":["1652:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"1652:6:1"},"referencedDeclaration":515,"src":"1652:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"_receiver","nameLocation":"1685:9:1","nodeType":"VariableDeclaration","scope":610,"src":"1677:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"1677:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"_payloadHash","nameLocation":"1704:12:1","nodeType":"VariableDeclaration","scope":610,"src":"1696:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1696:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1651:66:1"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"1726:0:1"},"scope":677,"src":"1636:91:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c9a54a99","id":620,"implemented":false,"kind":"function","modifiers":[],"name":"verifiable","nameLocation":"1742:10:1","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"_origin","nameLocation":"1769:7:1","nodeType":"VariableDeclaration","scope":620,"src":"1753:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":612,"nodeType":"UserDefinedTypeName","pathNode":{"id":611,"name":"Origin","nameLocations":["1753:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"1753:6:1"},"referencedDeclaration":515,"src":"1753:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"_receiver","nameLocation":"1786:9:1","nodeType":"VariableDeclaration","scope":620,"src":"1778:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"1778:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1752:44:1"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":620,"src":"1820:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":617,"name":"bool","nodeType":"ElementaryTypeName","src":"1820:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1819:6:1"},"scope":677,"src":"1733:93:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"861e1ca5","id":630,"implemented":false,"kind":"function","modifiers":[],"name":"initializable","nameLocation":"1841:13:1","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"_origin","nameLocation":"1871:7:1","nodeType":"VariableDeclaration","scope":630,"src":"1855:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":622,"nodeType":"UserDefinedTypeName","pathNode":{"id":621,"name":"Origin","nameLocations":["1855:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"1855:6:1"},"referencedDeclaration":515,"src":"1855:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"_receiver","nameLocation":"1888:9:1","nodeType":"VariableDeclaration","scope":630,"src":"1880:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"1880:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1854:44:1"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":630,"src":"1922:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"1922:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1921:6:1"},"scope":677,"src":"1832:96:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0c0c389e","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"1943:9:1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"_origin","nameLocation":"1978:7:1","nodeType":"VariableDeclaration","scope":644,"src":"1962:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":632,"nodeType":"UserDefinedTypeName","pathNode":{"id":631,"name":"Origin","nameLocations":["1962:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"1962:6:1"},"referencedDeclaration":515,"src":"1962:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"_receiver","nameLocation":"2003:9:1","nodeType":"VariableDeclaration","scope":644,"src":"1995:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"1995:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"_guid","nameLocation":"2030:5:1","nodeType":"VariableDeclaration","scope":644,"src":"2022:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2022:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"_message","nameLocation":"2060:8:1","nodeType":"VariableDeclaration","scope":644,"src":"2045:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":638,"name":"bytes","nodeType":"ElementaryTypeName","src":"2045:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"_extraData","nameLocation":"2093:10:1","nodeType":"VariableDeclaration","scope":644,"src":"2078:25:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":640,"name":"bytes","nodeType":"ElementaryTypeName","src":"2078:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1952:157:1"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[],"src":"2126:0:1"},"scope":677,"src":"1934:193:1","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2a56c1b0","id":656,"implemented":false,"kind":"function","modifiers":[],"name":"clear","nameLocation":"2269:5:1","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"_oapp","nameLocation":"2283:5:1","nodeType":"VariableDeclaration","scope":656,"src":"2275:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"2275:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"_origin","nameLocation":"2306:7:1","nodeType":"VariableDeclaration","scope":656,"src":"2290:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":648,"nodeType":"UserDefinedTypeName","pathNode":{"id":647,"name":"Origin","nameLocations":["2290:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"2290:6:1"},"referencedDeclaration":515,"src":"2290:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"_guid","nameLocation":"2323:5:1","nodeType":"VariableDeclaration","scope":656,"src":"2315:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2315:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"_message","nameLocation":"2345:8:1","nodeType":"VariableDeclaration","scope":656,"src":"2330:23:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":652,"name":"bytes","nodeType":"ElementaryTypeName","src":"2330:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2274:80:1"},"returnParameters":{"id":655,"nodeType":"ParameterList","parameters":[],"src":"2363:0:1"},"scope":677,"src":"2260:104:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c28e0eed","id":661,"implemented":false,"kind":"function","modifiers":[],"name":"setLzToken","nameLocation":"2379:10:1","nodeType":"FunctionDefinition","parameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"_lzToken","nameLocation":"2398:8:1","nodeType":"VariableDeclaration","scope":661,"src":"2390:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"2390:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2389:18:1"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[],"src":"2416:0:1"},"scope":677,"src":"2370:47:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e4fe1d94","id":666,"implemented":false,"kind":"function","modifiers":[],"name":"lzToken","nameLocation":"2432:7:1","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"2439:2:1"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":666,"src":"2465:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:9:1"},"scope":677,"src":"2423:51:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e1758bd8","id":671,"implemented":false,"kind":"function","modifiers":[],"name":"nativeToken","nameLocation":"2489:11:1","nodeType":"FunctionDefinition","parameters":{"id":667,"nodeType":"ParameterList","parameters":[],"src":"2500:2:1"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":671,"src":"2526:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":668,"name":"address","nodeType":"ElementaryTypeName","src":"2526:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2525:9:1"},"scope":677,"src":"2480:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ca5eb5e1","id":676,"implemented":false,"kind":"function","modifiers":[],"name":"setDelegate","nameLocation":"2550:11:1","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":673,"mutability":"mutable","name":"_delegate","nameLocation":"2570:9:1","nodeType":"VariableDeclaration","scope":676,"src":"2562:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"2562:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2561:19:1"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[],"src":"2589:0:1"},"scope":677,"src":"2541:49:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":678,"src":"673:1919:1","usedErrors":[],"usedEvents":[531,540,547,568,572,578,731,737,743,751,759,767,777,970,982,994,1108,1118,1140]}],"src":"33:2560:1"},"id":1},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol","exportedSymbols":{"ILayerZeroReceiver":[713],"Origin":[515]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":679,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:2"},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","file":"./ILayerZeroEndpointV2.sol","id":681,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":678,"src":"59:52:2","symbolAliases":[{"foreign":{"id":680,"name":"Origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"68:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ILayerZeroReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":713,"linearizedBaseContracts":[713],"name":"ILayerZeroReceiver","nameLocation":"123:18:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ff7bd03d","id":689,"implemented":false,"kind":"function","modifiers":[],"name":"allowInitializePath","nameLocation":"157:19:2","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"_origin","nameLocation":"193:7:2","nodeType":"VariableDeclaration","scope":689,"src":"177:23:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":683,"nodeType":"UserDefinedTypeName","pathNode":{"id":682,"name":"Origin","nameLocations":["177:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"177:6:2"},"referencedDeclaration":515,"src":"177:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"}],"src":"176:25:2"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":689,"src":"225:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":686,"name":"bool","nodeType":"ElementaryTypeName","src":"225:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"224:6:2"},"scope":713,"src":"148:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7d25a05e","id":698,"implemented":false,"kind":"function","modifiers":[],"name":"nextNonce","nameLocation":"246:9:2","nodeType":"FunctionDefinition","parameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"_eid","nameLocation":"263:4:2","nodeType":"VariableDeclaration","scope":698,"src":"256:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":690,"name":"uint32","nodeType":"ElementaryTypeName","src":"256:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":693,"mutability":"mutable","name":"_sender","nameLocation":"277:7:2","nodeType":"VariableDeclaration","scope":698,"src":"269:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":692,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"255:30:2"},"returnParameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"309:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":695,"name":"uint64","nodeType":"ElementaryTypeName","src":"309:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"308:8:2"},"scope":713,"src":"237:80:2","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"13137d65","id":712,"implemented":false,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"332:9:2","nodeType":"FunctionDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"_origin","nameLocation":"367:7:2","nodeType":"VariableDeclaration","scope":712,"src":"351:23:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":700,"nodeType":"UserDefinedTypeName","pathNode":{"id":699,"name":"Origin","nameLocations":["351:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"351:6:2"},"referencedDeclaration":515,"src":"351:6:2","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"_guid","nameLocation":"392:5:2","nodeType":"VariableDeclaration","scope":712,"src":"384:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"384:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":705,"mutability":"mutable","name":"_message","nameLocation":"422:8:2","nodeType":"VariableDeclaration","scope":712,"src":"407:23:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":704,"name":"bytes","nodeType":"ElementaryTypeName","src":"407:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"_executor","nameLocation":"448:9:2","nodeType":"VariableDeclaration","scope":712,"src":"440:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"_extraData","nameLocation":"482:10:2","nodeType":"VariableDeclaration","scope":712,"src":"467:25:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":708,"name":"bytes","nodeType":"ElementaryTypeName","src":"467:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"341:157:2"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"515:0:2"},"scope":713,"src":"323:193:2","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":714,"src":"113:405:2","usedErrors":[],"usedEvents":[]}],"src":"33:486:2"},"id":2},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol","exportedSymbols":{"IMessageLibManager":[958],"SetConfigParam":[722]},"id":959,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:3"},{"canonicalName":"SetConfigParam","id":722,"members":[{"constant":false,"id":717,"mutability":"mutable","name":"eid","nameLocation":"94:3:3","nodeType":"VariableDeclaration","scope":722,"src":"87:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":716,"name":"uint32","nodeType":"ElementaryTypeName","src":"87:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":719,"mutability":"mutable","name":"configType","nameLocation":"110:10:3","nodeType":"VariableDeclaration","scope":722,"src":"103:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":718,"name":"uint32","nodeType":"ElementaryTypeName","src":"103:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"config","nameLocation":"132:6:3","nodeType":"VariableDeclaration","scope":722,"src":"126:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":720,"name":"bytes","nodeType":"ElementaryTypeName","src":"126:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SetConfigParam","nameLocation":"66:14:3","nodeType":"StructDefinition","scope":959,"src":"59:82:3","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"IMessageLibManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":958,"linearizedBaseContracts":[958],"name":"IMessageLibManager","nameLocation":"153:18:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IMessageLibManager.Timeout","id":727,"members":[{"constant":false,"id":724,"mutability":"mutable","name":"lib","nameLocation":"211:3:3","nodeType":"VariableDeclaration","scope":727,"src":"203:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"expiry","nameLocation":"232:6:3","nodeType":"VariableDeclaration","scope":727,"src":"224:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":725,"name":"uint256","nodeType":"ElementaryTypeName","src":"224:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Timeout","nameLocation":"185:7:3","nodeType":"StructDefinition","scope":958,"src":"178:67:3","visibility":"public"},{"anonymous":false,"eventSelector":"6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5","id":731,"name":"LibraryRegistered","nameLocation":"257:17:3","nodeType":"EventDefinition","parameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"indexed":false,"mutability":"mutable","name":"newLib","nameLocation":"283:6:3","nodeType":"VariableDeclaration","scope":731,"src":"275:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"275:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"274:16:3"},"src":"251:40:3"},{"anonymous":false,"eventSelector":"16aa0f528038ab41019e95bae5b418a50ba8532c5800e3b7ea2f517d3fa625f5","id":737,"name":"DefaultSendLibrarySet","nameLocation":"302:21:3","nodeType":"EventDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"331:3:3","nodeType":"VariableDeclaration","scope":737,"src":"324:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":732,"name":"uint32","nodeType":"ElementaryTypeName","src":"324:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":735,"indexed":false,"mutability":"mutable","name":"newLib","nameLocation":"344:6:3","nodeType":"VariableDeclaration","scope":737,"src":"336:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":734,"name":"address","nodeType":"ElementaryTypeName","src":"336:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"323:28:3"},"src":"296:56:3"},{"anonymous":false,"eventSelector":"c16891855cffb4a5ac51ac11864a3f3c96ba816cc45fe686c987ae36277de5ec","id":743,"name":"DefaultReceiveLibrarySet","nameLocation":"363:24:3","nodeType":"EventDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"395:3:3","nodeType":"VariableDeclaration","scope":743,"src":"388:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":738,"name":"uint32","nodeType":"ElementaryTypeName","src":"388:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":741,"indexed":false,"mutability":"mutable","name":"newLib","nameLocation":"408:6:3","nodeType":"VariableDeclaration","scope":743,"src":"400:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"400:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:28:3"},"src":"357:59:3"},{"anonymous":false,"eventSelector":"55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8","id":751,"name":"DefaultReceiveLibraryTimeoutSet","nameLocation":"427:31:3","nodeType":"EventDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"466:3:3","nodeType":"VariableDeclaration","scope":751,"src":"459:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":744,"name":"uint32","nodeType":"ElementaryTypeName","src":"459:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":747,"indexed":false,"mutability":"mutable","name":"oldLib","nameLocation":"479:6:3","nodeType":"VariableDeclaration","scope":751,"src":"471:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"471:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":749,"indexed":false,"mutability":"mutable","name":"expiry","nameLocation":"495:6:3","nodeType":"VariableDeclaration","scope":751,"src":"487:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":748,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"458:44:3"},"src":"421:82:3"},{"anonymous":false,"eventSelector":"4cff966ebee29a156dcb34cf72c1d06231fb1777f6bdf6e8089819232f002b1c","id":759,"name":"SendLibrarySet","nameLocation":"514:14:3","nodeType":"EventDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"537:6:3","nodeType":"VariableDeclaration","scope":759,"src":"529:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":752,"name":"address","nodeType":"ElementaryTypeName","src":"529:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":755,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"552:3:3","nodeType":"VariableDeclaration","scope":759,"src":"545:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":754,"name":"uint32","nodeType":"ElementaryTypeName","src":"545:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":757,"indexed":false,"mutability":"mutable","name":"newLib","nameLocation":"565:6:3","nodeType":"VariableDeclaration","scope":759,"src":"557:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"557:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"528:44:3"},"src":"508:65:3"},{"anonymous":false,"eventSelector":"cd6f92f5ac6185a5acfa02c92090746cec64d777269cbcd0ed031e396657a1c2","id":767,"name":"ReceiveLibrarySet","nameLocation":"584:17:3","nodeType":"EventDefinition","parameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"610:8:3","nodeType":"VariableDeclaration","scope":767,"src":"602:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"602:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":763,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"627:3:3","nodeType":"VariableDeclaration","scope":767,"src":"620:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":762,"name":"uint32","nodeType":"ElementaryTypeName","src":"620:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":765,"indexed":false,"mutability":"mutable","name":"newLib","nameLocation":"640:6:3","nodeType":"VariableDeclaration","scope":767,"src":"632:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"632:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"601:46:3"},"src":"578:70:3"},{"anonymous":false,"eventSelector":"4e0a5bbfa0c11a64effb1ada324b5437a17272e1aed9320398715ef71bb20928","id":777,"name":"ReceiveLibraryTimeoutSet","nameLocation":"659:24:3","nodeType":"EventDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"692:8:3","nodeType":"VariableDeclaration","scope":777,"src":"684:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"684:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":771,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"709:3:3","nodeType":"VariableDeclaration","scope":777,"src":"702:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":770,"name":"uint32","nodeType":"ElementaryTypeName","src":"702:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":773,"indexed":false,"mutability":"mutable","name":"oldLib","nameLocation":"722:6:3","nodeType":"VariableDeclaration","scope":777,"src":"714:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":775,"indexed":false,"mutability":"mutable","name":"timeout","nameLocation":"738:7:3","nodeType":"VariableDeclaration","scope":777,"src":"730:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":774,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"683:63:3"},"src":"653:94:3"},{"functionSelector":"e8964e81","id":782,"implemented":false,"kind":"function","modifiers":[],"name":"registerLibrary","nameLocation":"762:15:3","nodeType":"FunctionDefinition","parameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"_lib","nameLocation":"786:4:3","nodeType":"VariableDeclaration","scope":782,"src":"778:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":778,"name":"address","nodeType":"ElementaryTypeName","src":"778:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"777:14:3"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[],"src":"800:0:3"},"scope":958,"src":"753:48:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"dc706a62","id":789,"implemented":false,"kind":"function","modifiers":[],"name":"isRegisteredLibrary","nameLocation":"816:19:3","nodeType":"FunctionDefinition","parameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"_lib","nameLocation":"844:4:3","nodeType":"VariableDeclaration","scope":789,"src":"836:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":783,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"835:14:3"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":789,"src":"873:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":786,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"872:6:3"},"scope":958,"src":"807:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9132e5c3","id":795,"implemented":false,"kind":"function","modifiers":[],"name":"getRegisteredLibraries","nameLocation":"894:22:3","nodeType":"FunctionDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[],"src":"916:2:3"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":795,"src":"942:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":792,"nodeType":"ArrayTypeName","src":"942:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"941:18:3"},"scope":958,"src":"885:75:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"aafea312","id":802,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultSendLibrary","nameLocation":"975:21:3","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"_eid","nameLocation":"1004:4:3","nodeType":"VariableDeclaration","scope":802,"src":"997:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":796,"name":"uint32","nodeType":"ElementaryTypeName","src":"997:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"_newLib","nameLocation":"1018:7:3","nodeType":"VariableDeclaration","scope":802,"src":"1010:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"996:30:3"},"returnParameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"1035:0:3"},"scope":958,"src":"966:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f64be4c7","id":809,"implemented":false,"kind":"function","modifiers":[],"name":"defaultSendLibrary","nameLocation":"1051:18:3","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"_eid","nameLocation":"1077:4:3","nodeType":"VariableDeclaration","scope":809,"src":"1070:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":803,"name":"uint32","nodeType":"ElementaryTypeName","src":"1070:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1069:13:3"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":809,"src":"1106:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"1106:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1105:9:3"},"scope":958,"src":"1042:73:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a718531b","id":818,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultReceiveLibrary","nameLocation":"1130:24:3","nodeType":"FunctionDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"_eid","nameLocation":"1162:4:3","nodeType":"VariableDeclaration","scope":818,"src":"1155:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":810,"name":"uint32","nodeType":"ElementaryTypeName","src":"1155:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"_newLib","nameLocation":"1176:7:3","nodeType":"VariableDeclaration","scope":818,"src":"1168:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":812,"name":"address","nodeType":"ElementaryTypeName","src":"1168:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"_gracePeriod","nameLocation":"1193:12:3","nodeType":"VariableDeclaration","scope":818,"src":"1185:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1154:52:3"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[],"src":"1215:0:3"},"scope":958,"src":"1121:95:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6f50a803","id":825,"implemented":false,"kind":"function","modifiers":[],"name":"defaultReceiveLibrary","nameLocation":"1231:21:3","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"_eid","nameLocation":"1260:4:3","nodeType":"VariableDeclaration","scope":825,"src":"1253:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":819,"name":"uint32","nodeType":"ElementaryTypeName","src":"1253:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1252:13:3"},"returnParameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":825,"src":"1289:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1288:9:3"},"scope":958,"src":"1222:76:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d4b4ec8f","id":834,"implemented":false,"kind":"function","modifiers":[],"name":"setDefaultReceiveLibraryTimeout","nameLocation":"1313:31:3","nodeType":"FunctionDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":827,"mutability":"mutable","name":"_eid","nameLocation":"1352:4:3","nodeType":"VariableDeclaration","scope":834,"src":"1345:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":826,"name":"uint32","nodeType":"ElementaryTypeName","src":"1345:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":829,"mutability":"mutable","name":"_lib","nameLocation":"1366:4:3","nodeType":"VariableDeclaration","scope":834,"src":"1358:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"1358:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"_expiry","nameLocation":"1380:7:3","nodeType":"VariableDeclaration","scope":834,"src":"1372:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1372:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1344:44:3"},"returnParameters":{"id":833,"nodeType":"ParameterList","parameters":[],"src":"1397:0:3"},"scope":958,"src":"1304:94:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"6e83f5bb","id":843,"implemented":false,"kind":"function","modifiers":[],"name":"defaultReceiveLibraryTimeout","nameLocation":"1413:28:3","nodeType":"FunctionDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":836,"mutability":"mutable","name":"_eid","nameLocation":"1449:4:3","nodeType":"VariableDeclaration","scope":843,"src":"1442:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":835,"name":"uint32","nodeType":"ElementaryTypeName","src":"1442:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1441:13:3"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"lib","nameLocation":"1486:3:3","nodeType":"VariableDeclaration","scope":843,"src":"1478:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"1478:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"expiry","nameLocation":"1499:6:3","nodeType":"VariableDeclaration","scope":843,"src":"1491:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1477:29:3"},"scope":958,"src":"1404:103:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6750cd4c","id":850,"implemented":false,"kind":"function","modifiers":[],"name":"isSupportedEid","nameLocation":"1522:14:3","nodeType":"FunctionDefinition","parameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"_eid","nameLocation":"1544:4:3","nodeType":"VariableDeclaration","scope":850,"src":"1537:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":844,"name":"uint32","nodeType":"ElementaryTypeName","src":"1537:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1536:13:3"},"returnParameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":850,"src":"1573:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":847,"name":"bool","nodeType":"ElementaryTypeName","src":"1573:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1572:6:3"},"scope":958,"src":"1513:66:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9d7f9775","id":861,"implemented":false,"kind":"function","modifiers":[],"name":"isValidReceiveLibrary","nameLocation":"1594:21:3","nodeType":"FunctionDefinition","parameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"_receiver","nameLocation":"1624:9:3","nodeType":"VariableDeclaration","scope":861,"src":"1616:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":851,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"_eid","nameLocation":"1642:4:3","nodeType":"VariableDeclaration","scope":861,"src":"1635:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":853,"name":"uint32","nodeType":"ElementaryTypeName","src":"1635:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"_lib","nameLocation":"1656:4:3","nodeType":"VariableDeclaration","scope":861,"src":"1648:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":855,"name":"address","nodeType":"ElementaryTypeName","src":"1648:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:46:3"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":861,"src":"1685:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":858,"name":"bool","nodeType":"ElementaryTypeName","src":"1685:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1684:6:3"},"scope":958,"src":"1585:106:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"1697:59:3","text":"------------------- OApp interfaces -------------------"},"functionSelector":"9535ff30","id":871,"implemented":false,"kind":"function","modifiers":[],"name":"setSendLibrary","nameLocation":"1770:14:3","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"_oapp","nameLocation":"1793:5:3","nodeType":"VariableDeclaration","scope":871,"src":"1785:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"_eid","nameLocation":"1807:4:3","nodeType":"VariableDeclaration","scope":871,"src":"1800:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":865,"name":"uint32","nodeType":"ElementaryTypeName","src":"1800:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"_newLib","nameLocation":"1821:7:3","nodeType":"VariableDeclaration","scope":871,"src":"1813:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"1813:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1784:45:3"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[],"src":"1838:0:3"},"scope":958,"src":"1761:78:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b96a277f","id":880,"implemented":false,"kind":"function","modifiers":[],"name":"getSendLibrary","nameLocation":"1854:14:3","nodeType":"FunctionDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"_sender","nameLocation":"1877:7:3","nodeType":"VariableDeclaration","scope":880,"src":"1869:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":872,"name":"address","nodeType":"ElementaryTypeName","src":"1869:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"_eid","nameLocation":"1893:4:3","nodeType":"VariableDeclaration","scope":880,"src":"1886:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":874,"name":"uint32","nodeType":"ElementaryTypeName","src":"1886:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1868:30:3"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"lib","nameLocation":"1930:3:3","nodeType":"VariableDeclaration","scope":880,"src":"1922:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":877,"name":"address","nodeType":"ElementaryTypeName","src":"1922:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1921:13:3"},"scope":958,"src":"1845:90:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dc93c8a2","id":889,"implemented":false,"kind":"function","modifiers":[],"name":"isDefaultSendLibrary","nameLocation":"1950:20:3","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":882,"mutability":"mutable","name":"_sender","nameLocation":"1979:7:3","nodeType":"VariableDeclaration","scope":889,"src":"1971:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":881,"name":"address","nodeType":"ElementaryTypeName","src":"1971:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"_eid","nameLocation":"1995:4:3","nodeType":"VariableDeclaration","scope":889,"src":"1988:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":883,"name":"uint32","nodeType":"ElementaryTypeName","src":"1988:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1970:30:3"},"returnParameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"2024:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":886,"name":"bool","nodeType":"ElementaryTypeName","src":"2024:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2023:6:3"},"scope":958,"src":"1941:89:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6a14d715","id":900,"implemented":false,"kind":"function","modifiers":[],"name":"setReceiveLibrary","nameLocation":"2045:17:3","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"_oapp","nameLocation":"2071:5:3","nodeType":"VariableDeclaration","scope":900,"src":"2063:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"2063:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"_eid","nameLocation":"2085:4:3","nodeType":"VariableDeclaration","scope":900,"src":"2078:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":892,"name":"uint32","nodeType":"ElementaryTypeName","src":"2078:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"_newLib","nameLocation":"2099:7:3","nodeType":"VariableDeclaration","scope":900,"src":"2091:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"2091:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"_gracePeriod","nameLocation":"2116:12:3","nodeType":"VariableDeclaration","scope":900,"src":"2108:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2108:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2062:67:3"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[],"src":"2138:0:3"},"scope":958,"src":"2036:103:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"402f8468","id":911,"implemented":false,"kind":"function","modifiers":[],"name":"getReceiveLibrary","nameLocation":"2154:17:3","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"_receiver","nameLocation":"2180:9:3","nodeType":"VariableDeclaration","scope":911,"src":"2172:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"2172:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"_eid","nameLocation":"2198:4:3","nodeType":"VariableDeclaration","scope":911,"src":"2191:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":903,"name":"uint32","nodeType":"ElementaryTypeName","src":"2191:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2171:32:3"},"returnParameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"lib","nameLocation":"2235:3:3","nodeType":"VariableDeclaration","scope":911,"src":"2227:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"isDefault","nameLocation":"2245:9:3","nodeType":"VariableDeclaration","scope":911,"src":"2240:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":908,"name":"bool","nodeType":"ElementaryTypeName","src":"2240:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2226:29:3"},"scope":958,"src":"2145:111:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"183c834f","id":922,"implemented":false,"kind":"function","modifiers":[],"name":"setReceiveLibraryTimeout","nameLocation":"2271:24:3","nodeType":"FunctionDefinition","parameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"_oapp","nameLocation":"2304:5:3","nodeType":"VariableDeclaration","scope":922,"src":"2296:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"2296:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"_eid","nameLocation":"2318:4:3","nodeType":"VariableDeclaration","scope":922,"src":"2311:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":914,"name":"uint32","nodeType":"ElementaryTypeName","src":"2311:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"_lib","nameLocation":"2332:4:3","nodeType":"VariableDeclaration","scope":922,"src":"2324:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":916,"name":"address","nodeType":"ElementaryTypeName","src":"2324:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":919,"mutability":"mutable","name":"_expiry","nameLocation":"2346:7:3","nodeType":"VariableDeclaration","scope":922,"src":"2338:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2338:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2295:59:3"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[],"src":"2363:0:3"},"scope":958,"src":"2262:102:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"ef667aa1","id":933,"implemented":false,"kind":"function","modifiers":[],"name":"receiveLibraryTimeout","nameLocation":"2379:21:3","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"_receiver","nameLocation":"2409:9:3","nodeType":"VariableDeclaration","scope":933,"src":"2401:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"2401:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"_eid","nameLocation":"2427:4:3","nodeType":"VariableDeclaration","scope":933,"src":"2420:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":925,"name":"uint32","nodeType":"ElementaryTypeName","src":"2420:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2400:32:3"},"returnParameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"lib","nameLocation":"2464:3:3","nodeType":"VariableDeclaration","scope":933,"src":"2456:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"2456:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"expiry","nameLocation":"2477:6:3","nodeType":"VariableDeclaration","scope":933,"src":"2469:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2455:29:3"},"scope":958,"src":"2370:115:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6dbd9f90","id":944,"implemented":false,"kind":"function","modifiers":[],"name":"setConfig","nameLocation":"2500:9:3","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":935,"mutability":"mutable","name":"_oapp","nameLocation":"2518:5:3","nodeType":"VariableDeclaration","scope":944,"src":"2510:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"2510:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"_lib","nameLocation":"2533:4:3","nodeType":"VariableDeclaration","scope":944,"src":"2525:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"2525:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"_params","nameLocation":"2565:7:3","nodeType":"VariableDeclaration","scope":944,"src":"2539:33:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SetConfigParam_$722_calldata_ptr_$dyn_calldata_ptr","typeString":"struct SetConfigParam[]"},"typeName":{"baseType":{"id":939,"nodeType":"UserDefinedTypeName","pathNode":{"id":938,"name":"SetConfigParam","nameLocations":["2539:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":722,"src":"2539:14:3"},"referencedDeclaration":722,"src":"2539:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_SetConfigParam_$722_storage_ptr","typeString":"struct SetConfigParam"}},"id":940,"nodeType":"ArrayTypeName","src":"2539:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_SetConfigParam_$722_storage_$dyn_storage_ptr","typeString":"struct SetConfigParam[]"}},"visibility":"internal"}],"src":"2509:64:3"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[],"src":"2582:0:3"},"scope":958,"src":"2491:92:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2b3197b9","id":957,"implemented":false,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"2598:9:3","nodeType":"FunctionDefinition","parameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"_oapp","nameLocation":"2625:5:3","nodeType":"VariableDeclaration","scope":957,"src":"2617:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"2617:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"_lib","nameLocation":"2648:4:3","nodeType":"VariableDeclaration","scope":957,"src":"2640:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"2640:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"_eid","nameLocation":"2669:4:3","nodeType":"VariableDeclaration","scope":957,"src":"2662:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":949,"name":"uint32","nodeType":"ElementaryTypeName","src":"2662:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":952,"mutability":"mutable","name":"_configType","nameLocation":"2690:11:3","nodeType":"VariableDeclaration","scope":957,"src":"2683:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":951,"name":"uint32","nodeType":"ElementaryTypeName","src":"2683:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2607:100:3"},"returnParameters":{"id":956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":955,"mutability":"mutable","name":"config","nameLocation":"2744:6:3","nodeType":"VariableDeclaration","scope":957,"src":"2731:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":954,"name":"bytes","nodeType":"ElementaryTypeName","src":"2731:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2730:21:3"},"scope":958,"src":"2589:163:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":959,"src":"143:2611:3","usedErrors":[],"usedEvents":[731,737,743,751,759,767,777]}],"src":"33:2722:3"},"id":3},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol","exportedSymbols":{"IMessagingChannel":[1094]},"id":1095,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":960,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IMessagingChannel","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1094,"linearizedBaseContracts":[1094],"name":"IMessagingChannel","nameLocation":"69:17:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"28f40053783033ef755556a0c3315379141f51a33aed8334174ffbadd90bde48","id":970,"name":"InboundNonceSkipped","nameLocation":"99:19:4","nodeType":"EventDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"indexed":false,"mutability":"mutable","name":"srcEid","nameLocation":"126:6:4","nodeType":"VariableDeclaration","scope":970,"src":"119:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":961,"name":"uint32","nodeType":"ElementaryTypeName","src":"119:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":964,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"142:6:4","nodeType":"VariableDeclaration","scope":970,"src":"134:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"134:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":966,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"158:8:4","nodeType":"VariableDeclaration","scope":970,"src":"150:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"150:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":968,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"175:5:4","nodeType":"VariableDeclaration","scope":970,"src":"168:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":967,"name":"uint64","nodeType":"ElementaryTypeName","src":"168:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"118:63:4"},"src":"93:89:4"},{"anonymous":false,"eventSelector":"af0450c392c4f702515a457a362328c8aa21916048ca6d0419e248b30cb55292","id":982,"name":"PacketNilified","nameLocation":"193:14:4","nodeType":"EventDefinition","parameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"indexed":false,"mutability":"mutable","name":"srcEid","nameLocation":"215:6:4","nodeType":"VariableDeclaration","scope":982,"src":"208:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":971,"name":"uint32","nodeType":"ElementaryTypeName","src":"208:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":974,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"231:6:4","nodeType":"VariableDeclaration","scope":982,"src":"223:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":973,"name":"bytes32","nodeType":"ElementaryTypeName","src":"223:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":976,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"247:8:4","nodeType":"VariableDeclaration","scope":982,"src":"239:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"239:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":978,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"264:5:4","nodeType":"VariableDeclaration","scope":982,"src":"257:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":977,"name":"uint64","nodeType":"ElementaryTypeName","src":"257:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":980,"indexed":false,"mutability":"mutable","name":"payloadHash","nameLocation":"279:11:4","nodeType":"VariableDeclaration","scope":982,"src":"271:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"271:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"207:84:4"},"src":"187:105:4"},{"anonymous":false,"eventSelector":"7f68a37a6e69a0de35024a234558f9efe4b33b58657753d21eaaa82d51c3510e","id":994,"name":"PacketBurnt","nameLocation":"303:11:4","nodeType":"EventDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"indexed":false,"mutability":"mutable","name":"srcEid","nameLocation":"322:6:4","nodeType":"VariableDeclaration","scope":994,"src":"315:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":983,"name":"uint32","nodeType":"ElementaryTypeName","src":"315:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":986,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"338:6:4","nodeType":"VariableDeclaration","scope":994,"src":"330:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"330:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":988,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"354:8:4","nodeType":"VariableDeclaration","scope":994,"src":"346:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":987,"name":"address","nodeType":"ElementaryTypeName","src":"346:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":990,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"371:5:4","nodeType":"VariableDeclaration","scope":994,"src":"364:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":989,"name":"uint64","nodeType":"ElementaryTypeName","src":"364:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":992,"indexed":false,"mutability":"mutable","name":"payloadHash","nameLocation":"386:11:4","nodeType":"VariableDeclaration","scope":994,"src":"378:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":991,"name":"bytes32","nodeType":"ElementaryTypeName","src":"378:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"314:84:4"},"src":"297:102:4"},{"functionSelector":"416ecebf","id":999,"implemented":false,"kind":"function","modifiers":[],"name":"eid","nameLocation":"414:3:4","nodeType":"FunctionDefinition","parameters":{"id":995,"nodeType":"ParameterList","parameters":[],"src":"417:2:4"},"returnParameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":999,"src":"443:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":996,"name":"uint32","nodeType":"ElementaryTypeName","src":"443:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"442:8:4"},"scope":1094,"src":"405:46:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d70b8902","id":1010,"implemented":false,"kind":"function","modifiers":[],"name":"skip","nameLocation":"614:4:4","nodeType":"FunctionDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"_oapp","nameLocation":"627:5:4","nodeType":"VariableDeclaration","scope":1010,"src":"619:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"_srcEid","nameLocation":"641:7:4","nodeType":"VariableDeclaration","scope":1010,"src":"634:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1002,"name":"uint32","nodeType":"ElementaryTypeName","src":"634:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"_sender","nameLocation":"658:7:4","nodeType":"VariableDeclaration","scope":1010,"src":"650:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"650:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"_nonce","nameLocation":"674:6:4","nodeType":"VariableDeclaration","scope":1010,"src":"667:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1006,"name":"uint64","nodeType":"ElementaryTypeName","src":"667:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"618:63:4"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"690:0:4"},"scope":1094,"src":"605:86:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2e80fbf3","id":1023,"implemented":false,"kind":"function","modifiers":[],"name":"nilify","nameLocation":"706:6:4","nodeType":"FunctionDefinition","parameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"_oapp","nameLocation":"721:5:4","nodeType":"VariableDeclaration","scope":1023,"src":"713:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"_srcEid","nameLocation":"735:7:4","nodeType":"VariableDeclaration","scope":1023,"src":"728:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1013,"name":"uint32","nodeType":"ElementaryTypeName","src":"728:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"_sender","nameLocation":"752:7:4","nodeType":"VariableDeclaration","scope":1023,"src":"744:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"744:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1018,"mutability":"mutable","name":"_nonce","nameLocation":"768:6:4","nodeType":"VariableDeclaration","scope":1023,"src":"761:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1017,"name":"uint64","nodeType":"ElementaryTypeName","src":"761:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1020,"mutability":"mutable","name":"_payloadHash","nameLocation":"784:12:4","nodeType":"VariableDeclaration","scope":1023,"src":"776:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"776:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"712:85:4"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[],"src":"806:0:4"},"scope":1094,"src":"697:110:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"40f80683","id":1036,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"822:4:4","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1025,"mutability":"mutable","name":"_oapp","nameLocation":"835:5:4","nodeType":"VariableDeclaration","scope":1036,"src":"827:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1024,"name":"address","nodeType":"ElementaryTypeName","src":"827:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1027,"mutability":"mutable","name":"_srcEid","nameLocation":"849:7:4","nodeType":"VariableDeclaration","scope":1036,"src":"842:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1026,"name":"uint32","nodeType":"ElementaryTypeName","src":"842:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"_sender","nameLocation":"866:7:4","nodeType":"VariableDeclaration","scope":1036,"src":"858:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"858:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"_nonce","nameLocation":"882:6:4","nodeType":"VariableDeclaration","scope":1036,"src":"875:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1030,"name":"uint64","nodeType":"ElementaryTypeName","src":"875:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"_payloadHash","nameLocation":"898:12:4","nodeType":"VariableDeclaration","scope":1036,"src":"890:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"890:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"826:85:4"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[],"src":"920:0:4"},"scope":1094,"src":"813:108:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"aafe5e07","id":1047,"implemented":false,"kind":"function","modifiers":[],"name":"nextGuid","nameLocation":"936:8:4","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"_sender","nameLocation":"953:7:4","nodeType":"VariableDeclaration","scope":1047,"src":"945:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1037,"name":"address","nodeType":"ElementaryTypeName","src":"945:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"_dstEid","nameLocation":"969:7:4","nodeType":"VariableDeclaration","scope":1047,"src":"962:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1039,"name":"uint32","nodeType":"ElementaryTypeName","src":"962:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"_receiver","nameLocation":"986:9:4","nodeType":"VariableDeclaration","scope":1047,"src":"978:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"978:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"944:52:4"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"1020:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1044,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1020:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1019:9:4"},"scope":1094,"src":"927:102:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a0dd43fc","id":1058,"implemented":false,"kind":"function","modifiers":[],"name":"inboundNonce","nameLocation":"1044:12:4","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"_receiver","nameLocation":"1065:9:4","nodeType":"VariableDeclaration","scope":1058,"src":"1057:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"_srcEid","nameLocation":"1083:7:4","nodeType":"VariableDeclaration","scope":1058,"src":"1076:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1050,"name":"uint32","nodeType":"ElementaryTypeName","src":"1076:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"_sender","nameLocation":"1100:7:4","nodeType":"VariableDeclaration","scope":1058,"src":"1092:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1092:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1056:52:4"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1058,"src":"1132:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1055,"name":"uint64","nodeType":"ElementaryTypeName","src":"1132:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1131:8:4"},"scope":1094,"src":"1035:105:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9c6d7340","id":1069,"implemented":false,"kind":"function","modifiers":[],"name":"outboundNonce","nameLocation":"1155:13:4","nodeType":"FunctionDefinition","parameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"_sender","nameLocation":"1177:7:4","nodeType":"VariableDeclaration","scope":1069,"src":"1169:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1059,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1062,"mutability":"mutable","name":"_dstEid","nameLocation":"1193:7:4","nodeType":"VariableDeclaration","scope":1069,"src":"1186:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1061,"name":"uint32","nodeType":"ElementaryTypeName","src":"1186:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1064,"mutability":"mutable","name":"_receiver","nameLocation":"1210:9:4","nodeType":"VariableDeclaration","scope":1069,"src":"1202:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1202:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1168:52:4"},"returnParameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1069,"src":"1244:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1066,"name":"uint64","nodeType":"ElementaryTypeName","src":"1244:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1243:8:4"},"scope":1094,"src":"1146:106:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c9fc7bcd","id":1082,"implemented":false,"kind":"function","modifiers":[],"name":"inboundPayloadHash","nameLocation":"1267:18:4","nodeType":"FunctionDefinition","parameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"mutability":"mutable","name":"_receiver","nameLocation":"1303:9:4","nodeType":"VariableDeclaration","scope":1082,"src":"1295:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"1295:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"_srcEid","nameLocation":"1329:7:4","nodeType":"VariableDeclaration","scope":1082,"src":"1322:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1072,"name":"uint32","nodeType":"ElementaryTypeName","src":"1322:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1075,"mutability":"mutable","name":"_sender","nameLocation":"1354:7:4","nodeType":"VariableDeclaration","scope":1082,"src":"1346:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1346:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1077,"mutability":"mutable","name":"_nonce","nameLocation":"1378:6:4","nodeType":"VariableDeclaration","scope":1082,"src":"1371:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1076,"name":"uint64","nodeType":"ElementaryTypeName","src":"1371:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1285:105:4"},"returnParameters":{"id":1081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1082,"src":"1414:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1079,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1414:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1413:9:4"},"scope":1094,"src":"1258:165:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5b17bb70","id":1093,"implemented":false,"kind":"function","modifiers":[],"name":"lazyInboundNonce","nameLocation":"1438:16:4","nodeType":"FunctionDefinition","parameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"_receiver","nameLocation":"1463:9:4","nodeType":"VariableDeclaration","scope":1093,"src":"1455:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1086,"mutability":"mutable","name":"_srcEid","nameLocation":"1481:7:4","nodeType":"VariableDeclaration","scope":1093,"src":"1474:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1085,"name":"uint32","nodeType":"ElementaryTypeName","src":"1474:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1088,"mutability":"mutable","name":"_sender","nameLocation":"1498:7:4","nodeType":"VariableDeclaration","scope":1093,"src":"1490:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1490:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1454:52:4"},"returnParameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1093,"src":"1530:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1090,"name":"uint64","nodeType":"ElementaryTypeName","src":"1530:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1529:8:4"},"scope":1094,"src":"1429:109:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1095,"src":"59:1481:4","usedErrors":[],"usedEvents":[970,982,994]}],"src":"33:1508:4"},"id":4},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol","exportedSymbols":{"IMessagingComposer":[1180]},"id":1181,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1096,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IMessagingComposer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1180,"linearizedBaseContracts":[1180],"name":"IMessagingComposer","nameLocation":"69:18:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"3d52ff888d033fd3dd1d8057da59e850c91d91a72c41dfa445b247dfedeb6dc1","id":1108,"name":"ComposeSent","nameLocation":"100:11:5","nodeType":"EventDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"120:4:5","nodeType":"VariableDeclaration","scope":1108,"src":"112:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1097,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1100,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"134:2:5","nodeType":"VariableDeclaration","scope":1108,"src":"126:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1099,"name":"address","nodeType":"ElementaryTypeName","src":"126:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1102,"indexed":false,"mutability":"mutable","name":"guid","nameLocation":"146:4:5","nodeType":"VariableDeclaration","scope":1108,"src":"138:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"138:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1104,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"159:5:5","nodeType":"VariableDeclaration","scope":1108,"src":"152:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1103,"name":"uint16","nodeType":"ElementaryTypeName","src":"152:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1106,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"172:7:5","nodeType":"VariableDeclaration","scope":1108,"src":"166:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"166:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"111:69:5"},"src":"94:87:5"},{"anonymous":false,"eventSelector":"0036c98efcf9e6641dfbc9051f66f405253e8e0c2ab4a24dccda15595b7378c8","id":1118,"name":"ComposeDelivered","nameLocation":"192:16:5","nodeType":"EventDefinition","parameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"217:4:5","nodeType":"VariableDeclaration","scope":1118,"src":"209:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"209:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1112,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"231:2:5","nodeType":"VariableDeclaration","scope":1118,"src":"223:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1111,"name":"address","nodeType":"ElementaryTypeName","src":"223:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1114,"indexed":false,"mutability":"mutable","name":"guid","nameLocation":"243:4:5","nodeType":"VariableDeclaration","scope":1118,"src":"235:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"235:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1116,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"256:5:5","nodeType":"VariableDeclaration","scope":1118,"src":"249:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1115,"name":"uint16","nodeType":"ElementaryTypeName","src":"249:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"208:54:5"},"src":"186:77:5"},{"anonymous":false,"eventSelector":"8a0b1dce321c5c5fb42349bce46d18087c04140de520917661fb923e44a904b9","id":1140,"name":"LzComposeAlert","nameLocation":"274:14:5","nodeType":"EventDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"314:4:5","nodeType":"VariableDeclaration","scope":1140,"src":"298:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"298:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"344:2:5","nodeType":"VariableDeclaration","scope":1140,"src":"328:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"328:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"372:8:5","nodeType":"VariableDeclaration","scope":1140,"src":"356:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"356:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1126,"indexed":false,"mutability":"mutable","name":"guid","nameLocation":"398:4:5","nodeType":"VariableDeclaration","scope":1140,"src":"390:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"390:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1128,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"419:5:5","nodeType":"VariableDeclaration","scope":1140,"src":"412:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1127,"name":"uint16","nodeType":"ElementaryTypeName","src":"412:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1130,"indexed":false,"mutability":"mutable","name":"gas","nameLocation":"442:3:5","nodeType":"VariableDeclaration","scope":1140,"src":"434:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"434:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1132,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"463:5:5","nodeType":"VariableDeclaration","scope":1140,"src":"455:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"455:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1134,"indexed":false,"mutability":"mutable","name":"message","nameLocation":"484:7:5","nodeType":"VariableDeclaration","scope":1140,"src":"478:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1133,"name":"bytes","nodeType":"ElementaryTypeName","src":"478:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1136,"indexed":false,"mutability":"mutable","name":"extraData","nameLocation":"507:9:5","nodeType":"VariableDeclaration","scope":1140,"src":"501:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1135,"name":"bytes","nodeType":"ElementaryTypeName","src":"501:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1138,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"532:6:5","nodeType":"VariableDeclaration","scope":1140,"src":"526:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1137,"name":"bytes","nodeType":"ElementaryTypeName","src":"526:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"288:256:5"},"src":"268:277:5"},{"functionSelector":"35d330b0","id":1153,"implemented":false,"kind":"function","modifiers":[],"name":"composeQueue","nameLocation":"560:12:5","nodeType":"FunctionDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"_from","nameLocation":"590:5:5","nodeType":"VariableDeclaration","scope":1153,"src":"582:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"_to","nameLocation":"613:3:5","nodeType":"VariableDeclaration","scope":1153,"src":"605:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1143,"name":"address","nodeType":"ElementaryTypeName","src":"605:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"_guid","nameLocation":"634:5:5","nodeType":"VariableDeclaration","scope":1153,"src":"626:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"626:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1148,"mutability":"mutable","name":"_index","nameLocation":"656:6:5","nodeType":"VariableDeclaration","scope":1153,"src":"649:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1147,"name":"uint16","nodeType":"ElementaryTypeName","src":"649:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"572:96:5"},"returnParameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"messageHash","nameLocation":"700:11:5","nodeType":"VariableDeclaration","scope":1153,"src":"692:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"692:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"691:21:5"},"scope":1180,"src":"551:162:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7cb59012","id":1164,"implemented":false,"kind":"function","modifiers":[],"name":"sendCompose","nameLocation":"728:11:5","nodeType":"FunctionDefinition","parameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"_to","nameLocation":"748:3:5","nodeType":"VariableDeclaration","scope":1164,"src":"740:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1154,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"_guid","nameLocation":"761:5:5","nodeType":"VariableDeclaration","scope":1164,"src":"753:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"753:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"_index","nameLocation":"775:6:5","nodeType":"VariableDeclaration","scope":1164,"src":"768:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1158,"name":"uint16","nodeType":"ElementaryTypeName","src":"768:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"_message","nameLocation":"798:8:5","nodeType":"VariableDeclaration","scope":1164,"src":"783:23:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1160,"name":"bytes","nodeType":"ElementaryTypeName","src":"783:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"739:68:5"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[],"src":"816:0:5"},"scope":1180,"src":"719:98:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"91d20fa1","id":1179,"implemented":false,"kind":"function","modifiers":[],"name":"lzCompose","nameLocation":"832:9:5","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"_from","nameLocation":"859:5:5","nodeType":"VariableDeclaration","scope":1179,"src":"851:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"851:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"_to","nameLocation":"882:3:5","nodeType":"VariableDeclaration","scope":1179,"src":"874:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"_guid","nameLocation":"903:5:5","nodeType":"VariableDeclaration","scope":1179,"src":"895:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"895:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"_index","nameLocation":"925:6:5","nodeType":"VariableDeclaration","scope":1179,"src":"918:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1171,"name":"uint16","nodeType":"ElementaryTypeName","src":"918:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"_message","nameLocation":"956:8:5","nodeType":"VariableDeclaration","scope":1179,"src":"941:23:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1173,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"_extraData","nameLocation":"989:10:5","nodeType":"VariableDeclaration","scope":1179,"src":"974:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1175,"name":"bytes","nodeType":"ElementaryTypeName","src":"974:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"841:164:5"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[],"src":"1022:0:5"},"scope":1180,"src":"823:200:5","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1181,"src":"59:966:5","usedErrors":[],"usedEvents":[1108,1118,1140]}],"src":"33:993:5"},"id":5},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol","exportedSymbols":{"IMessagingContext":[1195]},"id":1196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1182,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IMessagingContext","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1195,"linearizedBaseContracts":[1195],"name":"IMessagingContext","nameLocation":"69:17:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"79624ca9","id":1187,"implemented":false,"kind":"function","modifiers":[],"name":"isSendingMessage","nameLocation":"102:16:6","nodeType":"FunctionDefinition","parameters":{"id":1183,"nodeType":"ParameterList","parameters":[],"src":"118:2:6"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1187,"src":"144:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"144:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"143:6:6"},"scope":1195,"src":"93:57:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"14f651a9","id":1194,"implemented":false,"kind":"function","modifiers":[],"name":"getSendContext","nameLocation":"165:14:6","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[],"src":"179:2:6"},"returnParameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"dstEid","nameLocation":"212:6:6","nodeType":"VariableDeclaration","scope":1194,"src":"205:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1189,"name":"uint32","nodeType":"ElementaryTypeName","src":"205:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"sender","nameLocation":"228:6:6","nodeType":"VariableDeclaration","scope":1194,"src":"220:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"220:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"204:31:6"},"scope":1195,"src":"156:80:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1196,"src":"59:179:6","usedErrors":[],"usedEvents":[]}],"src":"33:206:6"},"id":6},"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol","exportedSymbols":{"CalldataBytesLib":[1408]},"id":1409,"license":"LZBL-1.2","nodeType":"SourceUnit","nodes":[{"id":1197,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"CalldataBytesLib","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1408,"linearizedBaseContracts":[1408],"name":"CalldataBytesLib","nameLocation":"72:16:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1213,"nodeType":"Block","src":"178:45:7","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1208,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"201:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1210,"indexExpression":{"id":1209,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"208:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"201:14:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"195:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1206,"name":"uint8","nodeType":"ElementaryTypeName","src":"195:5:7","typeDescriptions":{}}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"195:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1205,"id":1212,"nodeType":"Return","src":"188:28:7"}]},"id":1214,"implemented":true,"kind":"function","modifiers":[],"name":"toU8","nameLocation":"104:4:7","nodeType":"FunctionDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"_bytes","nameLocation":"124:6:7","nodeType":"VariableDeclaration","scope":1214,"src":"109:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1198,"name":"bytes","nodeType":"ElementaryTypeName","src":"109:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"_start","nameLocation":"140:6:7","nodeType":"VariableDeclaration","scope":1214,"src":"132:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"132:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"108:39:7"},"returnParameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1214,"src":"171:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1203,"name":"uint8","nodeType":"ElementaryTypeName","src":"171:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"170:7:7"},"scope":1408,"src":"95:128:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1241,"nodeType":"Block","src":"314:130:7","statements":[{"id":1240,"nodeType":"UncheckedBlock","src":"324:114:7","statements":[{"assignments":[1224],"declarations":[{"constant":false,"id":1224,"mutability":"mutable","name":"end","nameLocation":"356:3:7","nodeType":"VariableDeclaration","scope":1240,"src":"348:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"348:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1228,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1225,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"362:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"371:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"362:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"348:24:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1233,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"407:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1235,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"421:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"407:18:7","startExpression":{"id":1234,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"414:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"400:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes2_$","typeString":"type(bytes2)"},"typeName":{"id":1231,"name":"bytes2","nodeType":"ElementaryTypeName","src":"400:6:7","typeDescriptions":{}}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"400:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes2","typeString":"bytes2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes2","typeString":"bytes2"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"393:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":1229,"name":"uint16","nodeType":"ElementaryTypeName","src":"393:6:7","typeDescriptions":{}}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"393:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":1222,"id":1239,"nodeType":"Return","src":"386:41:7"}]}]},"id":1242,"implemented":true,"kind":"function","modifiers":[],"name":"toU16","nameLocation":"238:5:7","nodeType":"FunctionDefinition","parameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"_bytes","nameLocation":"259:6:7","nodeType":"VariableDeclaration","scope":1242,"src":"244:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1215,"name":"bytes","nodeType":"ElementaryTypeName","src":"244:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"_start","nameLocation":"275:6:7","nodeType":"VariableDeclaration","scope":1242,"src":"267:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1217,"name":"uint256","nodeType":"ElementaryTypeName","src":"267:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"243:39:7"},"returnParameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1242,"src":"306:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1220,"name":"uint16","nodeType":"ElementaryTypeName","src":"306:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"305:8:7"},"scope":1408,"src":"229:215:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"535:130:7","statements":[{"id":1268,"nodeType":"UncheckedBlock","src":"545:114:7","statements":[{"assignments":[1252],"declarations":[{"constant":false,"id":1252,"mutability":"mutable","name":"end","nameLocation":"577:3:7","nodeType":"VariableDeclaration","scope":1268,"src":"569:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"569:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1256,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"583:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"592:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"583:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"569:24:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1261,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"628:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1263,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"642:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"628:18:7","startExpression":{"id":1262,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"635:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"621:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1259,"name":"bytes4","nodeType":"ElementaryTypeName","src":"621:6:7","typeDescriptions":{}}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"621:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"614:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1257,"name":"uint32","nodeType":"ElementaryTypeName","src":"614:6:7","typeDescriptions":{}}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"614:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1250,"id":1267,"nodeType":"Return","src":"607:41:7"}]}]},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"toU32","nameLocation":"459:5:7","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"_bytes","nameLocation":"480:6:7","nodeType":"VariableDeclaration","scope":1270,"src":"465:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1243,"name":"bytes","nodeType":"ElementaryTypeName","src":"465:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"_start","nameLocation":"496:6:7","nodeType":"VariableDeclaration","scope":1270,"src":"488:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"488:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:39:7"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1270,"src":"527:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1248,"name":"uint32","nodeType":"ElementaryTypeName","src":"527:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"526:8:7"},"scope":1408,"src":"450:215:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1297,"nodeType":"Block","src":"756:130:7","statements":[{"id":1296,"nodeType":"UncheckedBlock","src":"766:114:7","statements":[{"assignments":[1280],"declarations":[{"constant":false,"id":1280,"mutability":"mutable","name":"end","nameLocation":"798:3:7","nodeType":"VariableDeclaration","scope":1296,"src":"790:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1284,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1281,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"804:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"38","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"813:1:7","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"804:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"790:24:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1289,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"849:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1291,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"863:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"849:18:7","startExpression":{"id":1290,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"856:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"842:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes8_$","typeString":"type(bytes8)"},"typeName":{"id":1287,"name":"bytes8","nodeType":"ElementaryTypeName","src":"842:6:7","typeDescriptions":{}}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"842:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes8","typeString":"bytes8"}],"id":1286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"835:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1285,"name":"uint64","nodeType":"ElementaryTypeName","src":"835:6:7","typeDescriptions":{}}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"835:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1278,"id":1295,"nodeType":"Return","src":"828:41:7"}]}]},"id":1298,"implemented":true,"kind":"function","modifiers":[],"name":"toU64","nameLocation":"680:5:7","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"_bytes","nameLocation":"701:6:7","nodeType":"VariableDeclaration","scope":1298,"src":"686:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1271,"name":"bytes","nodeType":"ElementaryTypeName","src":"686:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"_start","nameLocation":"717:6:7","nodeType":"VariableDeclaration","scope":1298,"src":"709:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"709:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"685:39:7"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1298,"src":"748:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1276,"name":"uint64","nodeType":"ElementaryTypeName","src":"748:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"747:8:7"},"scope":1408,"src":"671:215:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1325,"nodeType":"Block","src":"979:133:7","statements":[{"id":1324,"nodeType":"UncheckedBlock","src":"989:117:7","statements":[{"assignments":[1308],"declarations":[{"constant":false,"id":1308,"mutability":"mutable","name":"end","nameLocation":"1021:3:7","nodeType":"VariableDeclaration","scope":1324,"src":"1013:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1312,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1027:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3136","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1036:2:7","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1027:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1013:25:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1317,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1075:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1319,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1089:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1075:18:7","startExpression":{"id":1318,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1082:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1067:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes16_$","typeString":"type(bytes16)"},"typeName":{"id":1315,"name":"bytes16","nodeType":"ElementaryTypeName","src":"1067:7:7","typeDescriptions":{}}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1067:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes16","typeString":"bytes16"}],"id":1314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1059:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1313,"name":"uint128","nodeType":"ElementaryTypeName","src":"1059:7:7","typeDescriptions":{}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1059:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":1306,"id":1323,"nodeType":"Return","src":"1052:43:7"}]}]},"id":1326,"implemented":true,"kind":"function","modifiers":[],"name":"toU128","nameLocation":"901:6:7","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"_bytes","nameLocation":"923:6:7","nodeType":"VariableDeclaration","scope":1326,"src":"908:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"908:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"_start","nameLocation":"939:6:7","nodeType":"VariableDeclaration","scope":1326,"src":"931:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"907:39:7"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1326,"src":"970:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1304,"name":"uint128","nodeType":"ElementaryTypeName","src":"970:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"969:9:7"},"scope":1408,"src":"892:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1353,"nodeType":"Block","src":"1205:133:7","statements":[{"id":1352,"nodeType":"UncheckedBlock","src":"1215:117:7","statements":[{"assignments":[1336],"declarations":[{"constant":false,"id":1336,"mutability":"mutable","name":"end","nameLocation":"1247:3:7","nodeType":"VariableDeclaration","scope":1352,"src":"1239:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1239:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1340,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1337,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"1253:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1262:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1253:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1239:25:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1345,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"1301:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1347,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"1315:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1301:18:7","startExpression":{"id":1346,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"1308:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1293:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1293:7:7","typeDescriptions":{}}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1293:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1285:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:7","typeDescriptions":{}}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1285:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1334,"id":1351,"nodeType":"Return","src":"1278:43:7"}]}]},"id":1354,"implemented":true,"kind":"function","modifiers":[],"name":"toU256","nameLocation":"1127:6:7","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"_bytes","nameLocation":"1149:6:7","nodeType":"VariableDeclaration","scope":1354,"src":"1134:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1327,"name":"bytes","nodeType":"ElementaryTypeName","src":"1134:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"_start","nameLocation":"1165:6:7","nodeType":"VariableDeclaration","scope":1354,"src":"1157:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1329,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1133:39:7"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1354,"src":"1196:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1195:9:7"},"scope":1408,"src":"1118:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1381,"nodeType":"Block","src":"1431:133:7","statements":[{"id":1380,"nodeType":"UncheckedBlock","src":"1441:117:7","statements":[{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"end","nameLocation":"1473:3:7","nodeType":"VariableDeclaration","scope":1380,"src":"1465:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"1465:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1368,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1365,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"1479:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1488:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"1479:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1465:25:7"},{"expression":{"arguments":[{"arguments":[{"baseExpression":{"id":1373,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"1527:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1375,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1541:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1527:18:7","startExpression":{"id":1374,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"1534:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1519:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":1371,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1519:7:7","typeDescriptions":{}}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1519:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1511:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1369,"name":"address","nodeType":"ElementaryTypeName","src":"1511:7:7","typeDescriptions":{}}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1362,"id":1379,"nodeType":"Return","src":"1504:43:7"}]}]},"id":1382,"implemented":true,"kind":"function","modifiers":[],"name":"toAddr","nameLocation":"1353:6:7","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"_bytes","nameLocation":"1375:6:7","nodeType":"VariableDeclaration","scope":1382,"src":"1360:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"1360:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"_start","nameLocation":"1391:6:7","nodeType":"VariableDeclaration","scope":1382,"src":"1383:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1383:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1359:39:7"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1382,"src":"1422:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1421:9:7"},"scope":1408,"src":"1344:220:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"1656:124:7","statements":[{"id":1405,"nodeType":"UncheckedBlock","src":"1666:108:7","statements":[{"assignments":[1392],"declarations":[{"constant":false,"id":1392,"mutability":"mutable","name":"end","nameLocation":"1698:3:7","nodeType":"VariableDeclaration","scope":1405,"src":"1690:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1391,"name":"uint256","nodeType":"ElementaryTypeName","src":"1690:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1396,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1393,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"1704:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:2:7","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1704:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1690:25:7"},{"expression":{"arguments":[{"baseExpression":{"id":1399,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"1744:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1401,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"1758:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1744:18:7","startExpression":{"id":1400,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"1751:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}],"id":1398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1736:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1736:7:7","typeDescriptions":{}}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1736:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1390,"id":1404,"nodeType":"Return","src":"1729:34:7"}]}]},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"toB32","nameLocation":"1579:5:7","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1384,"mutability":"mutable","name":"_bytes","nameLocation":"1600:6:7","nodeType":"VariableDeclaration","scope":1407,"src":"1585:21:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1383,"name":"bytes","nodeType":"ElementaryTypeName","src":"1585:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1386,"mutability":"mutable","name":"_start","nameLocation":"1616:6:7","nodeType":"VariableDeclaration","scope":1407,"src":"1608:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"1608:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1584:39:7"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"1647:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1647:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1646:9:7"},"scope":1408,"src":"1570:210:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1409,"src":"64:1718:7","usedErrors":[],"usedEvents":[]}],"src":"38:1745:7"},"id":7},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol","exportedSymbols":{"BitMap256":[1412],"BitMaps":[1473]},"id":1474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1410,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"153:24:8"},{"canonicalName":"BitMap256","id":1412,"name":"BitMap256","nameLocation":"184:9:8","nodeType":"UserDefinedValueTypeDefinition","src":"179:26:8","underlyingType":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"197:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":true,"id":1416,"libraryName":{"id":1413,"name":"BitMaps","nameLocations":["213:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1473,"src":"213:7:8"},"nodeType":"UsingForDirective","src":"207:35:8","typeName":{"id":1415,"nodeType":"UserDefinedTypeName","pathNode":{"id":1414,"name":"BitMap256","nameLocations":["225:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1412,"src":"225:9:8"},"referencedDeclaration":1412,"src":"225:9:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}}},{"abstract":false,"baseContracts":[],"canonicalName":"BitMaps","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1473,"linearizedBaseContracts":[1473],"name":"BitMaps","nameLocation":"252:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1442,"nodeType":"Block","src":"410:95:8","statements":[{"assignments":[1428],"declarations":[{"constant":false,"id":1428,"mutability":"mutable","name":"mask","nameLocation":"428:4:8","nodeType":"VariableDeclaration","scope":1442,"src":"420:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"420:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1432,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"435:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1430,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"440:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"435:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"420:25:8"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1435,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"479:6:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}],"expression":{"id":1433,"name":"BitMap256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"462:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"type(BitMap256)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"472:6:8","memberName":"unwrap","nodeType":"MemberAccess","src":"462:16:8","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_BitMap256_$1412_$returns$_t_uint256_$","typeString":"function (BitMap256) pure returns (uint256)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"462:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1437,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"489:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"462:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"497:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"462:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1426,"id":1441,"nodeType":"Return","src":"455:43:8"}]},"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"266:66:8","text":" @dev Returns whether the bit at `index` is set."},"id":1443,"implemented":true,"kind":"function","modifiers":[],"name":"get","nameLocation":"346:3:8","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"bitmap","nameLocation":"360:6:8","nodeType":"VariableDeclaration","scope":1443,"src":"350:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"},"typeName":{"id":1419,"nodeType":"UserDefinedTypeName","pathNode":{"id":1418,"name":"BitMap256","nameLocations":["350:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1412,"src":"350:9:8"},"referencedDeclaration":1412,"src":"350:9:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"index","nameLocation":"374:5:8","nodeType":"VariableDeclaration","scope":1443,"src":"368:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1421,"name":"uint8","nodeType":"ElementaryTypeName","src":"368:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"349:31:8"},"returnParameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1443,"src":"404:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1424,"name":"bool","nodeType":"ElementaryTypeName","src":"404:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"403:6:8"},"scope":1473,"src":"337:168:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1471,"nodeType":"Block","src":"642:106:8","statements":[{"assignments":[1456],"declarations":[{"constant":false,"id":1456,"mutability":"mutable","name":"mask","nameLocation":"660:4:8","nodeType":"VariableDeclaration","scope":1471,"src":"652:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1460,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"667:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1458,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"672:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"667:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"652:25:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1465,"name":"bitmap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"726:6:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}],"expression":{"id":1463,"name":"BitMap256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"709:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"type(BitMap256)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"719:6:8","memberName":"unwrap","nodeType":"MemberAccess","src":"709:16:8","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_BitMap256_$1412_$returns$_t_uint256_$","typeString":"function (BitMap256) pure returns (uint256)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"709:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1467,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"736:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"709:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1461,"name":"BitMap256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"694:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"type(BitMap256)"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"704:4:8","memberName":"wrap","nodeType":"MemberAccess","src":"694:14:8","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_uint256_$returns$_t_userDefinedValueType$_BitMap256_$1412_$","typeString":"function (uint256) pure returns (BitMap256)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"694:47:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"functionReturnParameters":1454,"id":1470,"nodeType":"Return","src":"687:54:8"}]},"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"511:48:8","text":" @dev Sets the bit at `index`."},"id":1472,"implemented":true,"kind":"function","modifiers":[],"name":"set","nameLocation":"573:3:8","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"bitmap","nameLocation":"587:6:8","nodeType":"VariableDeclaration","scope":1472,"src":"577:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"},"typeName":{"id":1446,"nodeType":"UserDefinedTypeName","pathNode":{"id":1445,"name":"BitMap256","nameLocations":["577:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1412,"src":"577:9:8"},"referencedDeclaration":1412,"src":"577:9:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"index","nameLocation":"601:5:8","nodeType":"VariableDeclaration","scope":1472,"src":"595:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1448,"name":"uint8","nodeType":"ElementaryTypeName","src":"595:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"576:31:8"},"returnParameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1472,"src":"631:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"},"typeName":{"id":1452,"nodeType":"UserDefinedTypeName","pathNode":{"id":1451,"name":"BitMap256","nameLocations":["631:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":1412,"src":"631:9:8"},"referencedDeclaration":1412,"src":"631:9:8","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_BitMap256_$1412","typeString":"BitMap256"}},"visibility":"internal"}],"src":"630:11:8"},"scope":1473,"src":"564:184:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1474,"src":"244:506:8","usedErrors":[],"usedEvents":[]}],"src":"153:598:8"},"id":8},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol":{"ast":{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol","exportedSymbols":{"CalldataBytesLib":[1408],"ExecutorOptions":[1760]},"id":1761,"license":"LZBL-1.2","nodeType":"SourceUnit","nodes":[{"id":1475,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"38:24:9"},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol","file":"../../libs/CalldataBytesLib.sol","id":1477,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1761,"sourceUnit":1409,"src":"64:67:9","symbolAliases":[{"foreign":{"id":1476,"name":"CalldataBytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"73:16:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ExecutorOptions","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1760,"linearizedBaseContracts":[1760],"name":"ExecutorOptions","nameLocation":"141:15:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1480,"libraryName":{"id":1478,"name":"CalldataBytesLib","nameLocations":["169:16:9"],"nodeType":"IdentifierPath","referencedDeclaration":1408,"src":"169:16:9"},"nodeType":"UsingForDirective","src":"163:33:9","typeName":{"id":1479,"name":"bytes","nodeType":"ElementaryTypeName","src":"190:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"id":1483,"mutability":"constant","name":"WORKER_ID","nameLocation":"226:9:9","nodeType":"VariableDeclaration","scope":1760,"src":"202:37:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1481,"name":"uint8","nodeType":"ElementaryTypeName","src":"202:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"238:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":1486,"mutability":"constant","name":"OPTION_TYPE_LZRECEIVE","nameLocation":"270:21:9","nodeType":"VariableDeclaration","scope":1760,"src":"246:49:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1484,"name":"uint8","nodeType":"ElementaryTypeName","src":"246:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"294:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":1489,"mutability":"constant","name":"OPTION_TYPE_NATIVE_DROP","nameLocation":"325:23:9","nodeType":"VariableDeclaration","scope":1760,"src":"301:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1487,"name":"uint8","nodeType":"ElementaryTypeName","src":"301:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"351:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":1492,"mutability":"constant","name":"OPTION_TYPE_LZCOMPOSE","nameLocation":"382:21:9","nodeType":"VariableDeclaration","scope":1760,"src":"358:49:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1490,"name":"uint8","nodeType":"ElementaryTypeName","src":"358:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"406:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"constant":true,"id":1495,"mutability":"constant","name":"OPTION_TYPE_ORDERED_EXECUTION","nameLocation":"437:29:9","nodeType":"VariableDeclaration","scope":1760,"src":"413:57:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1493,"name":"uint8","nodeType":"ElementaryTypeName","src":"413:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":1494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"469:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"errorSelector":"4796aee1","id":1497,"name":"Executor_InvalidLzReceiveOption","nameLocation":"483:31:9","nodeType":"ErrorDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[],"src":"514:2:9"},"src":"477:40:9"},{"errorSelector":"c3a1858e","id":1499,"name":"Executor_InvalidNativeDropOption","nameLocation":"528:32:9","nodeType":"ErrorDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[],"src":"560:2:9"},"src":"522:41:9"},{"errorSelector":"8b4aa70b","id":1501,"name":"Executor_InvalidLzComposeOption","nameLocation":"574:31:9","nodeType":"ErrorDefinition","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[],"src":"605:2:9"},"src":"568:40:9"},{"body":{"id":1563,"nodeType":"Block","src":"1423:570:9","statements":[{"id":1562,"nodeType":"UncheckedBlock","src":"1433:554:9","statements":[{"expression":{"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1515,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1487:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1516,"name":"_cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"1496:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1506:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1496:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1487:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1520,"nodeType":"ExpressionStatement","src":"1487:20:9"},{"assignments":[1522],"declarations":[{"constant":false,"id":1522,"mutability":"mutable","name":"size","nameLocation":"1561:4:9","nodeType":"VariableDeclaration","scope":1562,"src":"1554:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1521,"name":"uint16","nodeType":"ElementaryTypeName","src":"1554:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":1527,"initialValue":{"arguments":[{"id":1525,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1583:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1523,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1568:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1577:5:9","memberName":"toU16","nodeType":"MemberAccess","referencedDeclaration":1242,"src":"1568:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint16)"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1568:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"1554:36:9"},{"expression":{"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1528,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1604:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1614:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1604:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1531,"nodeType":"ExpressionStatement","src":"1604:11:9"},{"expression":{"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1532,"name":"optionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"1662:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1535,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1689:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1533,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1675:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1684:4:9","memberName":"toU8","nodeType":"MemberAccess","referencedDeclaration":1214,"src":"1675:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint8_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint8)"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1662:34:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1538,"nodeType":"ExpressionStatement","src":"1662:34:9"},{"assignments":[1540],"declarations":[{"constant":false,"id":1540,"mutability":"mutable","name":"startCursor","nameLocation":"1803:11:9","nodeType":"VariableDeclaration","scope":1562,"src":"1795:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1795:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1544,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1541,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1817:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1826:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1817:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1795:32:9"},{"assignments":[1546],"declarations":[{"constant":false,"id":1546,"mutability":"mutable","name":"endCursor","nameLocation":"1869:9:9","nodeType":"VariableDeclaration","scope":1562,"src":"1861:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1550,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1547,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1881:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1548,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1890:4:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"1881:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1861:33:9"},{"expression":{"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1551,"name":"option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"1908:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1552,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"1917:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":1554,"name":"endCursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"1938:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"1917:31:9","startExpression":{"id":1553,"name":"startCursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1926:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"src":"1908:40:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1557,"nodeType":"ExpressionStatement","src":"1908:40:9"},{"expression":{"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1558,"name":"cursor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1962:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1559,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1972:4:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"1962:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1561,"nodeType":"ExpressionStatement","src":"1962:14:9"}]}]},"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"614:632:9","text":"@dev decode the next executor option from the options starting from the specified cursor\n @param _options [executor_id][executor_option][executor_id][executor_option]...\n        executor_option = [option_size][option_type][option]\n        option_size = len(option_type) + len(option)\n        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n @param _cursor the cursor to start decoding from\n @return optionType the type of the option\n @return option the option of the executor\n @return cursor the cursor to start decoding the next executor option"},"id":1564,"implemented":true,"kind":"function","modifiers":[],"name":"nextExecutorOption","nameLocation":"1260:18:9","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"_options","nameLocation":"1303:8:9","nodeType":"VariableDeclaration","scope":1564,"src":"1288:23:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"1288:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1506,"mutability":"mutable","name":"_cursor","nameLocation":"1329:7:9","nodeType":"VariableDeclaration","scope":1564,"src":"1321:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"1321:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1278:64:9"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1509,"mutability":"mutable","name":"optionType","nameLocation":"1372:10:9","nodeType":"VariableDeclaration","scope":1564,"src":"1366:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1508,"name":"uint8","nodeType":"ElementaryTypeName","src":"1366:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"option","nameLocation":"1399:6:9","nodeType":"VariableDeclaration","scope":1564,"src":"1384:21:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1510,"name":"bytes","nodeType":"ElementaryTypeName","src":"1384:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"cursor","nameLocation":"1415:6:9","nodeType":"VariableDeclaration","scope":1564,"src":"1407:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1407:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1365:57:9"},"scope":1760,"src":"1251:742:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1606,"nodeType":"Block","src":"2105:203:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1573,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2119:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2127:6:9","memberName":"length","nodeType":"MemberAccess","src":"2119:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3136","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2137:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"2119:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1577,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2143:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2151:6:9","memberName":"length","nodeType":"MemberAccess","src":"2143:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3332","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2161:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2143:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2119:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1585,"nodeType":"IfStatement","src":"2115:90:9","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1582,"name":"Executor_InvalidLzReceiveOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"2172:31:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2172:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"RevertStatement","src":"2165:40:9"}},{"expression":{"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1586,"name":"gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"2215:3:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2236:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1587,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2221:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2229:6:9","memberName":"toU128","nodeType":"MemberAccess","referencedDeclaration":1326,"src":"2221:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint128_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint128)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2215:23:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1592,"nodeType":"ExpressionStatement","src":"2215:23:9"},{"expression":{"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"2248:5:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1594,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2256:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2264:6:9","memberName":"length","nodeType":"MemberAccess","src":"2256:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2274:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2256:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2300:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2256:45:9","trueExpression":{"arguments":[{"hexValue":"3136","id":1600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2294:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}],"expression":{"id":1598,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2279:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2287:6:9","memberName":"toU128","nodeType":"MemberAccess","referencedDeclaration":1326,"src":"2279:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint128_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint128)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2279:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2248:53:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1605,"nodeType":"ExpressionStatement","src":"2248:53:9"}]},"id":1607,"implemented":true,"kind":"function","modifiers":[],"name":"decodeLzReceiveOption","nameLocation":"2008:21:9","nodeType":"FunctionDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"mutability":"mutable","name":"_option","nameLocation":"2045:7:9","nodeType":"VariableDeclaration","scope":1607,"src":"2030:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1565,"name":"bytes","nodeType":"ElementaryTypeName","src":"2030:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2029:24:9"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1569,"mutability":"mutable","name":"gas","nameLocation":"2085:3:9","nodeType":"VariableDeclaration","scope":1607,"src":"2077:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1568,"name":"uint128","nodeType":"ElementaryTypeName","src":"2077:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1571,"mutability":"mutable","name":"value","nameLocation":"2098:5:9","nodeType":"VariableDeclaration","scope":1607,"src":"2090:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1570,"name":"uint128","nodeType":"ElementaryTypeName","src":"2090:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2076:28:9"},"scope":1760,"src":"1999:309:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1638,"nodeType":"Block","src":"2427:158:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1616,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2441:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2449:6:9","memberName":"length","nodeType":"MemberAccess","src":"2441:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3438","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2459:2:9","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2441:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1623,"nodeType":"IfStatement","src":"2437:67:9","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1620,"name":"Executor_InvalidNativeDropOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"2470:32:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2470:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1622,"nodeType":"RevertStatement","src":"2463:41:9"}},{"expression":{"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1624,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"2514:6:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2538:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1625,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2523:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2531:6:9","memberName":"toU128","nodeType":"MemberAccess","referencedDeclaration":1326,"src":"2523:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint128_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint128)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2514:26:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1630,"nodeType":"ExpressionStatement","src":"2514:26:9"},{"expression":{"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1631,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2550:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"3136","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2575:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}],"expression":{"id":1632,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2561:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2569:5:9","memberName":"toB32","nodeType":"MemberAccess","referencedDeclaration":1407,"src":"2561:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_bytes32_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (bytes32)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2561:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2550:28:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1637,"nodeType":"ExpressionStatement","src":"2550:28:9"}]},"id":1639,"implemented":true,"kind":"function","modifiers":[],"name":"decodeNativeDropOption","nameLocation":"2323:22:9","nodeType":"FunctionDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"_option","nameLocation":"2361:7:9","nodeType":"VariableDeclaration","scope":1639,"src":"2346:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1608,"name":"bytes","nodeType":"ElementaryTypeName","src":"2346:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2345:24:9"},"returnParameters":{"id":1615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"amount","nameLocation":"2401:6:9","nodeType":"VariableDeclaration","scope":1639,"src":"2393:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1611,"name":"uint128","nodeType":"ElementaryTypeName","src":"2393:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"receiver","nameLocation":"2417:8:9","nodeType":"VariableDeclaration","scope":1639,"src":"2409:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2409:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2392:34:9"},"scope":1760,"src":"2314:271:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1690,"nodeType":"Block","src":"2725:237:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1650,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2739:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2747:6:9","memberName":"length","nodeType":"MemberAccess","src":"2739:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3138","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2757:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"2739:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1654,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2763:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2771:6:9","memberName":"length","nodeType":"MemberAccess","src":"2763:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3334","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2781:2:9","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"34"},"src":"2763:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2739:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1662,"nodeType":"IfStatement","src":"2735:90:9","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1659,"name":"Executor_InvalidLzComposeOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"2792:31:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2792:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1661,"nodeType":"RevertStatement","src":"2785:40:9"}},{"expression":{"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1663,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"2835:5:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2857:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1664,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2843:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2851:5:9","memberName":"toU16","nodeType":"MemberAccess","referencedDeclaration":1242,"src":"2843:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint16)"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2843:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2835:24:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":1669,"nodeType":"ExpressionStatement","src":"2835:24:9"},{"expression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1670,"name":"gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"2869:3:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"32","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2890:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":1671,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2875:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2883:6:9","memberName":"toU128","nodeType":"MemberAccess","referencedDeclaration":1326,"src":"2875:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint128_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint128)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2875:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2869:23:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1676,"nodeType":"ExpressionStatement","src":"2869:23:9"},{"expression":{"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"2902:5:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1678,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2910:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2918:6:9","memberName":"length","nodeType":"MemberAccess","src":"2910:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3334","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2928:2:9","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"34"},"src":"2910:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2954:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2910:45:9","trueExpression":{"arguments":[{"hexValue":"3138","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2948:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"}],"expression":{"id":1682,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"2933:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2941:6:9","memberName":"toU128","nodeType":"MemberAccess","referencedDeclaration":1326,"src":"2933:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_uint128_$attached_to$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata,uint256) pure returns (uint128)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2933:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2902:53:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1689,"nodeType":"ExpressionStatement","src":"2902:53:9"}]},"id":1691,"implemented":true,"kind":"function","modifiers":[],"name":"decodeLzComposeOption","nameLocation":"2600:21:9","nodeType":"FunctionDefinition","parameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"_option","nameLocation":"2646:7:9","nodeType":"VariableDeclaration","scope":1691,"src":"2631:22:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1640,"name":"bytes","nodeType":"ElementaryTypeName","src":"2631:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2621:38:9"},"returnParameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"index","nameLocation":"2690:5:9","nodeType":"VariableDeclaration","scope":1691,"src":"2683:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1643,"name":"uint16","nodeType":"ElementaryTypeName","src":"2683:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"gas","nameLocation":"2705:3:9","nodeType":"VariableDeclaration","scope":1691,"src":"2697:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1645,"name":"uint128","nodeType":"ElementaryTypeName","src":"2697:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"value","nameLocation":"2718:5:9","nodeType":"VariableDeclaration","scope":1691,"src":"2710:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1647,"name":"uint128","nodeType":"ElementaryTypeName","src":"2710:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2682:42:9"},"scope":1760,"src":"2591:371:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1714,"nodeType":"Block","src":"3066:93:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"3083:6:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3093:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3083:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1709,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"3139:4:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1710,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"3145:6:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1707,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3122:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3126:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"3122:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3122:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3083:69:9","trueExpression":{"arguments":[{"id":1705,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"3114:4:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1703,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3097:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3101:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"3097:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3097:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1699,"id":1713,"nodeType":"Return","src":"3076:76:9"}]},"id":1715,"implemented":true,"kind":"function","modifiers":[],"name":"encodeLzReceiveOption","nameLocation":"2977:21:9","nodeType":"FunctionDefinition","parameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"_gas","nameLocation":"3007:4:9","nodeType":"VariableDeclaration","scope":1715,"src":"2999:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1692,"name":"uint128","nodeType":"ElementaryTypeName","src":"2999:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"_value","nameLocation":"3021:6:9","nodeType":"VariableDeclaration","scope":1715,"src":"3013:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1694,"name":"uint128","nodeType":"ElementaryTypeName","src":"3013:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2998:30:9"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1715,"src":"3052:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1697,"name":"bytes","nodeType":"ElementaryTypeName","src":"3052:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3051:14:9"},"scope":1760,"src":"2968:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1730,"nodeType":"Block","src":"3270:60:9","statements":[{"expression":{"arguments":[{"id":1726,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"3304:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1727,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"3313:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1724,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3287:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3291:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"3287:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1723,"id":1729,"nodeType":"Return","src":"3280:43:9"}]},"id":1731,"implemented":true,"kind":"function","modifiers":[],"name":"encodeNativeDropOption","nameLocation":"3174:22:9","nodeType":"FunctionDefinition","parameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"_amount","nameLocation":"3205:7:9","nodeType":"VariableDeclaration","scope":1731,"src":"3197:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1716,"name":"uint128","nodeType":"ElementaryTypeName","src":"3197:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"_receiver","nameLocation":"3222:9:9","nodeType":"VariableDeclaration","scope":1731,"src":"3214:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3214:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3196:36:9"},"returnParameters":{"id":1723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"3256:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1721,"name":"bytes","nodeType":"ElementaryTypeName","src":"3256:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3255:14:9"},"scope":1760,"src":"3165:165:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1758,"nodeType":"Block","src":"3449:109:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1742,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"3466:6:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3476:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3466:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1752,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3530:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":1753,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"3538:4:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1754,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"3544:6:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1750,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3513:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3517:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"3513:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3513:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3466:85:9","trueExpression":{"arguments":[{"id":1747,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3497:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":1748,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"3505:4:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":1745,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3480:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3484:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"3480:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3480:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1741,"id":1757,"nodeType":"Return","src":"3459:92:9"}]},"id":1759,"implemented":true,"kind":"function","modifiers":[],"name":"encodeLzComposeOption","nameLocation":"3345:21:9","nodeType":"FunctionDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"_index","nameLocation":"3374:6:9","nodeType":"VariableDeclaration","scope":1759,"src":"3367:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1732,"name":"uint16","nodeType":"ElementaryTypeName","src":"3367:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"_gas","nameLocation":"3390:4:9","nodeType":"VariableDeclaration","scope":1759,"src":"3382:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1734,"name":"uint128","nodeType":"ElementaryTypeName","src":"3382:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"_value","nameLocation":"3404:6:9","nodeType":"VariableDeclaration","scope":1759,"src":"3396:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1736,"name":"uint128","nodeType":"ElementaryTypeName","src":"3396:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3366:45:9"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1759,"src":"3435:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1739,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3434:14:9"},"scope":1760,"src":"3336:222:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1761,"src":"133:3427:9","usedErrors":[1497,1499,1501],"usedEvents":[]}],"src":"38:3523:9"},"id":9},"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol","exportedSymbols":{"MessagingFee":[508],"MessagingReceipt":[503],"OApp":[1806],"OAppCore":[1936],"OAppReceiver":[2088],"OAppSender":[2274],"Origin":[515]},"id":1807,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1762,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:10"},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol","file":"./OAppSender.sol","id":1766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1807,"sourceUnit":2275,"src":"199:78:10","symbolAliases":[{"foreign":{"id":1763,"name":"OAppSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2274,"src":"208:10:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1764,"name":"MessagingFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"220:12:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1765,"name":"MessagingReceipt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"234:16:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol","file":"./OAppReceiver.sol","id":1769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1807,"sourceUnit":2089,"src":"389:58:10","symbolAliases":[{"foreign":{"id":1767,"name":"OAppReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"398:12:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1768,"name":"Origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"412:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol","file":"./OAppCore.sol","id":1771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1807,"sourceUnit":1937,"src":"448:42:10","symbolAliases":[{"foreign":{"id":1770,"name":"OAppCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"457:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1773,"name":"OAppSender","nameLocations":["665:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":2274,"src":"665:10:10"},"id":1774,"nodeType":"InheritanceSpecifier","src":"665:10:10"},{"baseName":{"id":1775,"name":"OAppReceiver","nameLocations":["677:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2088,"src":"677:12:10"},"id":1776,"nodeType":"InheritanceSpecifier","src":"677:12:10"}],"canonicalName":"OApp","contractDependencies":[],"contractKind":"contract","documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"492:146:10","text":" @title OApp\n @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality."},"fullyImplemented":false,"id":1806,"linearizedBaseContracts":[1806,2088,2274,1936,2846,3696,2337,2358,713],"name":"OApp","nameLocation":"657:4:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1788,"nodeType":"Block","src":"1046:2:10","statements":[]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"696:264:10","text":" @dev Constructor to initialize the OApp with the provided endpoint and owner.\n @param _endpoint The address of the LOCAL LayerZero endpoint.\n @param _delegate The delegate capable of making OApp configurations inside of the endpoint."},"id":1789,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1784,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"1024:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1785,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"1035:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1786,"kind":"baseConstructorSpecifier","modifierName":{"id":1783,"name":"OAppCore","nameLocations":["1015:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1936,"src":"1015:8:10"},"nodeType":"ModifierInvocation","src":"1015:30:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"_endpoint","nameLocation":"985:9:10","nodeType":"VariableDeclaration","scope":1789,"src":"977:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"_delegate","nameLocation":"1004:9:10","nodeType":"VariableDeclaration","scope":1789,"src":"996:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"996:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"976:38:10"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[],"src":"1046:0:10"},"scope":1806,"src":"965:83:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1968,2128],"body":{"id":1804,"nodeType":"Block","src":"1464:58:10","statements":[{"expression":{"components":[{"id":1800,"name":"SENDER_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1482:14:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1801,"name":"RECEIVER_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1498:16:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":1802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1481:34:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint64_$","typeString":"tuple(uint64,uint64)"}},"functionReturnParameters":1799,"id":1803,"nodeType":"Return","src":"1474:41:10"}]},"documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"1054:228:10","text":" @notice Retrieves the OApp version information.\n @return senderVersion The version of the OAppSender.sol implementation.\n @return receiverVersion The version of the OAppReceiver.sol implementation."},"functionSelector":"17442b70","id":1805,"implemented":true,"kind":"function","modifiers":[],"name":"oAppVersion","nameLocation":"1296:11:10","nodeType":"FunctionDefinition","overrides":{"id":1794,"nodeType":"OverrideSpecifier","overrides":[{"id":1792,"name":"OAppSender","nameLocations":["1371:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":2274,"src":"1371:10:10"},{"id":1793,"name":"OAppReceiver","nameLocations":["1383:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2088,"src":"1383:12:10"}],"src":"1362:34:10"},"parameters":{"id":1791,"nodeType":"ParameterList","parameters":[],"src":"1307:2:10"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"senderVersion","nameLocation":"1421:13:10","nodeType":"VariableDeclaration","scope":1805,"src":"1414:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1795,"name":"uint64","nodeType":"ElementaryTypeName","src":"1414:6:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"receiverVersion","nameLocation":"1443:15:10","nodeType":"VariableDeclaration","scope":1805,"src":"1436:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1797,"name":"uint64","nodeType":"ElementaryTypeName","src":"1436:6:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1413:46:10"},"scope":1806,"src":"1287:235:10","stateMutability":"pure","virtual":true,"visibility":"public"}],"scope":1807,"src":"639:885:10","usedErrors":[1952,2110,2112,2285,2289,2291,2293],"usedEvents":[2299,2747]}],"src":"33:1492:10"},"id":10},"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol","exportedSymbols":{"ILayerZeroEndpointV2":[677],"IOAppCore":[2337],"OAppCore":[1936],"Ownable":[2846]},"id":1937,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1808,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:11"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1810,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1937,"sourceUnit":2847,"src":"59:69:11","symbolAliases":[{"foreign":{"id":1809,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"68:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol","file":"./interfaces/IOAppCore.sol","id":1813,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1937,"sourceUnit":2338,"src":"129:77:11","symbolAliases":[{"foreign":{"id":1811,"name":"IOAppCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"138:9:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1812,"name":"ILayerZeroEndpointV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"149:20:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1815,"name":"IOAppCore","nameLocations":["360:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":2337,"src":"360:9:11"},"id":1816,"nodeType":"InheritanceSpecifier","src":"360:9:11"},{"baseName":{"id":1817,"name":"Ownable","nameLocations":["371:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2846,"src":"371:7:11"},"id":1818,"nodeType":"InheritanceSpecifier","src":"371:7:11"}],"canonicalName":"OAppCore","contractDependencies":[],"contractKind":"contract","documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"208:121:11","text":" @title OAppCore\n @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations."},"fullyImplemented":false,"id":1936,"linearizedBaseContracts":[1936,2846,3696,2337],"name":"OAppCore","nameLocation":"348:8:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2314],"constant":false,"functionSelector":"5e280f11","id":1821,"mutability":"immutable","name":"endpoint","nameLocation":"484:8:11","nodeType":"VariableDeclaration","scope":1936,"src":"446:46:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"},"typeName":{"id":1820,"nodeType":"UserDefinedTypeName","pathNode":{"id":1819,"name":"ILayerZeroEndpointV2","nameLocations":["446:20:11"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"446:20:11"},"referencedDeclaration":677,"src":"446:20:11","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"visibility":"public"},{"baseFunctions":[2322],"constant":false,"functionSelector":"bb0b6a53","id":1825,"mutability":"mutable","name":"peers","nameLocation":"612:5:11","nodeType":"VariableDeclaration","scope":1936,"src":"569:48:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"},"typeName":{"id":1824,"keyName":"eid","keyNameLocation":"584:3:11","keyType":{"id":1822,"name":"uint32","nodeType":"ElementaryTypeName","src":"577:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Mapping","src":"569:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"},"valueName":"peer","valueNameLocation":"599:4:11","valueType":{"id":1823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"591:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"body":{"id":1855,"nodeType":"Block","src":"1037:164:11","statements":[{"expression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1833,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"1047:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1835,"name":"_endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"1079:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1834,"name":"ILayerZeroEndpointV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"1058:20:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILayerZeroEndpointV2_$677_$","typeString":"type(contract ILayerZeroEndpointV2)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1058:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"src":"1047:42:11","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":1838,"nodeType":"ExpressionStatement","src":"1047:42:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1839,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"1104:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1125:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1117:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1840,"name":"address","nodeType":"ElementaryTypeName","src":"1117:7:11","typeDescriptions":{}}},"id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1104:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1848,"nodeType":"IfStatement","src":"1100:53:11","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1845,"name":"InvalidDelegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"1136:15:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1136:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1847,"nodeType":"RevertStatement","src":"1129:24:11"}},{"expression":{"arguments":[{"id":1852,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"1184:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1849,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"1163:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1172:11:11","memberName":"setDelegate","nodeType":"MemberAccess","referencedDeclaration":676,"src":"1163:20:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1854,"nodeType":"ExpressionStatement","src":"1163:31:11"}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"624:358:11","text":" @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n @param _endpoint The address of the LOCAL Layer Zero endpoint.\n @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n @dev The delegate typically should be set as the owner of the contract."},"id":1856,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"_endpoint","nameLocation":"1007:9:11","nodeType":"VariableDeclaration","scope":1856,"src":"999:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"_delegate","nameLocation":"1026:9:11","nodeType":"VariableDeclaration","scope":1856,"src":"1018:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1829,"name":"address","nodeType":"ElementaryTypeName","src":"1018:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"998:38:11"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[],"src":"1037:0:11"},"scope":1936,"src":"987:214:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2330],"body":{"id":1871,"nodeType":"Block","src":"1794:38:11","statements":[{"expression":{"arguments":[{"id":1867,"name":"_eid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"1813:4:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1868,"name":"_peer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"1819:5:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1866,"name":"_setPeer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"1804:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint32_$_t_bytes32_$returns$__$","typeString":"function (uint32,bytes32)"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1804:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1870,"nodeType":"ExpressionStatement","src":"1804:21:11"}]},"documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"1207:512:11","text":" @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n @param _eid The endpoint ID.\n @param _peer The address of the peer to be associated with the corresponding endpoint.\n @dev Only the owner/admin of the OApp can call this function.\n @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n @dev Set this to bytes32(0) to remove the peer address.\n @dev Peer is a bytes32 to accommodate non-evm chains."},"functionSelector":"3400288b","id":1872,"implemented":true,"kind":"function","modifiers":[{"id":1864,"kind":"modifierInvocation","modifierName":{"id":1863,"name":"onlyOwner","nameLocations":["1784:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"1784:9:11"},"nodeType":"ModifierInvocation","src":"1784:9:11"}],"name":"setPeer","nameLocation":"1733:7:11","nodeType":"FunctionDefinition","parameters":{"id":1862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"_eid","nameLocation":"1748:4:11","nodeType":"VariableDeclaration","scope":1872,"src":"1741:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1858,"name":"uint32","nodeType":"ElementaryTypeName","src":"1741:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1861,"mutability":"mutable","name":"_peer","nameLocation":"1762:5:11","nodeType":"VariableDeclaration","scope":1872,"src":"1754:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1754:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1740:28:11"},"returnParameters":{"id":1865,"nodeType":"ParameterList","parameters":[],"src":"1794:0:11"},"scope":1936,"src":"1724:108:11","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1891,"nodeType":"Block","src":"2349:71:11","statements":[{"expression":{"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1880,"name":"peers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"2359:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"}},"id":1882,"indexExpression":{"id":1881,"name":"_eid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"2365:4:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2359:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1883,"name":"_peer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"2373:5:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2359:19:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1885,"nodeType":"ExpressionStatement","src":"2359:19:11"},{"eventCall":{"arguments":[{"id":1887,"name":"_eid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"2401:4:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1888,"name":"_peer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"2407:5:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1886,"name":"PeerSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"2393:7:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint32_$_t_bytes32_$returns$__$","typeString":"function (uint32,bytes32)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2393:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1890,"nodeType":"EmitStatement","src":"2388:25:11"}]},"documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"1838:443:11","text":" @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n @param _eid The endpoint ID.\n @param _peer The address of the peer to be associated with the corresponding endpoint.\n @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n @dev Set this to bytes32(0) to remove the peer address.\n @dev Peer is a bytes32 to accommodate non-evm chains."},"id":1892,"implemented":true,"kind":"function","modifiers":[],"name":"_setPeer","nameLocation":"2295:8:11","nodeType":"FunctionDefinition","parameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"_eid","nameLocation":"2311:4:11","nodeType":"VariableDeclaration","scope":1892,"src":"2304:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1874,"name":"uint32","nodeType":"ElementaryTypeName","src":"2304:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1877,"mutability":"mutable","name":"_peer","nameLocation":"2325:5:11","nodeType":"VariableDeclaration","scope":1892,"src":"2317:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1876,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2303:28:11"},"returnParameters":{"id":1879,"nodeType":"ParameterList","parameters":[],"src":"2349:0:11"},"scope":1936,"src":"2286:134:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1919,"nodeType":"Block","src":"2797:117:11","statements":[{"assignments":[1901],"declarations":[{"constant":false,"id":1901,"mutability":"mutable","name":"peer","nameLocation":"2815:4:11","nodeType":"VariableDeclaration","scope":1919,"src":"2807:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1900,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2807:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1905,"initialValue":{"baseExpression":{"id":1902,"name":"peers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"2822:5:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"}},"id":1904,"indexExpression":{"id":1903,"name":"_eid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"2828:4:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2822:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2807:26:11"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1906,"name":"peer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"2847:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2863:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2855:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2855:7:11","typeDescriptions":{}}},"id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2847:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1916,"nodeType":"IfStatement","src":"2843:43:11","trueBody":{"errorCall":{"arguments":[{"id":1913,"name":"_eid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"2881:4:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1912,"name":"NoPeer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"2874:6:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint32_$returns$__$","typeString":"function (uint32) pure"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1915,"nodeType":"RevertStatement","src":"2867:19:11"}},{"expression":{"id":1917,"name":"peer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"2903:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1899,"id":1918,"nodeType":"Return","src":"2896:11:11"}]},"documentation":{"id":1893,"nodeType":"StructuredDocumentation","src":"2426:287:11","text":" @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n ie. the peer is set to bytes32(0).\n @param _eid The endpoint ID.\n @return peer The address of the peer associated with the specified endpoint."},"id":1920,"implemented":true,"kind":"function","modifiers":[],"name":"_getPeerOrRevert","nameLocation":"2727:16:11","nodeType":"FunctionDefinition","parameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"_eid","nameLocation":"2751:4:11","nodeType":"VariableDeclaration","scope":1920,"src":"2744:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1894,"name":"uint32","nodeType":"ElementaryTypeName","src":"2744:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2743:13:11"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"2788:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2788:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2787:9:11"},"scope":1936,"src":"2718:196:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2336],"body":{"id":1934,"nodeType":"Block","src":"3309:48:11","statements":[{"expression":{"arguments":[{"id":1931,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"3340:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1928,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"3319:8:11","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3328:11:11","memberName":"setDelegate","nodeType":"MemberAccess","referencedDeclaration":676,"src":"3319:20:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$__$","typeString":"function (address) external"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3319:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1933,"nodeType":"ExpressionStatement","src":"3319:31:11"}]},"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"2920:327:11","text":" @notice Sets the delegate address for the OApp.\n @param _delegate The address of the delegate to be set.\n @dev Only the owner/admin of the OApp can call this function.\n @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract."},"functionSelector":"ca5eb5e1","id":1935,"implemented":true,"kind":"function","modifiers":[{"id":1926,"kind":"modifierInvocation","modifierName":{"id":1925,"name":"onlyOwner","nameLocations":["3299:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"3299:9:11"},"nodeType":"ModifierInvocation","src":"3299:9:11"}],"name":"setDelegate","nameLocation":"3261:11:11","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"_delegate","nameLocation":"3281:9:11","nodeType":"VariableDeclaration","scope":1935,"src":"3273:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1922,"name":"address","nodeType":"ElementaryTypeName","src":"3273:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3272:19:11"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[],"src":"3309:0:11"},"scope":1936,"src":"3252:105:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1937,"src":"330:3029:11","usedErrors":[2285,2289,2291,2293],"usedEvents":[2299,2747]}],"src":"33:3327:11"},"id":11},"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol","exportedSymbols":{"IOAppReceiver":[2358],"OAppCore":[1936],"OAppReceiver":[2088],"Origin":[515]},"id":2089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1938,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:12"},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol","file":"./interfaces/IOAppReceiver.sol","id":1941,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2089,"sourceUnit":2359,"src":"59:71:12","symbolAliases":[{"foreign":{"id":1939,"name":"IOAppReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"68:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1940,"name":"Origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"83:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol","file":"./OAppCore.sol","id":1943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2089,"sourceUnit":1937,"src":"131:42:12","symbolAliases":[{"foreign":{"id":1942,"name":"OAppCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"140:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1945,"name":"IOAppReceiver","nameLocations":["355:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":2358,"src":"355:13:12"},"id":1946,"nodeType":"InheritanceSpecifier","src":"355:13:12"},{"baseName":{"id":1947,"name":"OAppCore","nameLocations":["370:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":1936,"src":"370:8:12"},"id":1948,"nodeType":"InheritanceSpecifier","src":"370:8:12"}],"canonicalName":"OAppReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"175:145:12","text":" @title OAppReceiver\n @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers."},"fullyImplemented":false,"id":2088,"linearizedBaseContracts":[2088,1936,2846,3696,2337,2358,713],"name":"OAppReceiver","nameLocation":"339:12:12","nodeType":"ContractDefinition","nodes":[{"errorSelector":"91ac5e4f","id":1952,"name":"OnlyEndpoint","nameLocation":"471:12:12","nodeType":"ErrorDefinition","parameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"addr","nameLocation":"492:4:12","nodeType":"VariableDeclaration","scope":1952,"src":"484:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1949,"name":"address","nodeType":"ElementaryTypeName","src":"484:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"483:14:12"},"src":"465:33:12"},{"constant":true,"id":1955,"mutability":"constant","name":"RECEIVER_VERSION","nameLocation":"659:16:12","nodeType":"VariableDeclaration","scope":2088,"src":"634:45:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1953,"name":"uint64","nodeType":"ElementaryTypeName","src":"634:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"32","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"678:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"baseFunctions":[2307],"body":{"id":1967,"nodeType":"Block","src":"1291:45:12","statements":[{"expression":{"components":[{"hexValue":"30","id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1309:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1964,"name":"RECEIVER_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"1312:16:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":1965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1308:21:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_uint64_$","typeString":"tuple(int_const 0,uint64)"}},"functionReturnParameters":1962,"id":1966,"nodeType":"Return","src":"1301:28:12"}]},"documentation":{"id":1956,"nodeType":"StructuredDocumentation","src":"686:502:12","text":" @notice Retrieves the OApp version information.\n @return senderVersion The version of the OAppSender.sol contract.\n @return receiverVersion The version of the OAppReceiver.sol contract.\n @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n ie. this is a RECEIVE only OApp.\n @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions."},"functionSelector":"17442b70","id":1968,"implemented":true,"kind":"function","modifiers":[],"name":"oAppVersion","nameLocation":"1202:11:12","nodeType":"FunctionDefinition","parameters":{"id":1957,"nodeType":"ParameterList","parameters":[],"src":"1213:2:12"},"returnParameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1959,"mutability":"mutable","name":"senderVersion","nameLocation":"1252:13:12","nodeType":"VariableDeclaration","scope":1968,"src":"1245:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1958,"name":"uint64","nodeType":"ElementaryTypeName","src":"1245:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1961,"mutability":"mutable","name":"receiverVersion","nameLocation":"1274:15:12","nodeType":"VariableDeclaration","scope":1968,"src":"1267:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1960,"name":"uint64","nodeType":"ElementaryTypeName","src":"1267:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1244:46:12"},"scope":2088,"src":"1193:143:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2357],"body":{"id":1988,"nodeType":"Block","src":"2181:48:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"2198:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1984,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2217:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_OAppReceiver_$2088","typeString":"contract OAppReceiver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OAppReceiver_$2088","typeString":"contract OAppReceiver"}],"id":1983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2209:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1982,"name":"address","nodeType":"ElementaryTypeName","src":"2209:7:12","typeDescriptions":{}}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2198:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1980,"id":1987,"nodeType":"Return","src":"2191:31:12"}]},"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"1342:666:12","text":" @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n @dev _origin The origin information containing the source endpoint and sender address.\n  - srcEid: The source chain endpoint ID.\n  - sender: The sender address on the src chain.\n  - nonce: The nonce of the message.\n @dev _message The lzReceive payload.\n @param _sender The sender address.\n @return isSender Is a valid sender.\n @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n @dev The default sender IS the OAppReceiver implementer."},"functionSelector":"82413eac","id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"isComposeMsgSender","nameLocation":"2022:18:12","nodeType":"FunctionDefinition","parameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"2050:15:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":1971,"nodeType":"UserDefinedTypeName","pathNode":{"id":1970,"name":"Origin","nameLocations":["2050:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"2050:6:12"},"referencedDeclaration":515,"src":"2050:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":1974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"2087:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1973,"name":"bytes","nodeType":"ElementaryTypeName","src":"2087:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1976,"mutability":"mutable","name":"_sender","nameLocation":"2132:7:12","nodeType":"VariableDeclaration","scope":1989,"src":"2124:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"2124:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2040:105:12"},"returnParameters":{"id":1980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1979,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"2175:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1978,"name":"bool","nodeType":"ElementaryTypeName","src":"2175:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2174:6:12"},"scope":2088,"src":"2013:216:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[689],"body":{"id":2006,"nodeType":"Block","src":"2859:61:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1998,"name":"peers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"2876:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_bytes32_$","typeString":"mapping(uint32 => bytes32)"}},"id":2001,"indexExpression":{"expression":{"id":1999,"name":"origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"2882:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2889:6:12","memberName":"srcEid","nodeType":"MemberAccess","referencedDeclaration":510,"src":"2882:13:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2876:20:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2002,"name":"origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"2900:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2907:6:12","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":512,"src":"2900:13:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2876:37:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1997,"id":2005,"nodeType":"Return","src":"2869:44:12"}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"2235:531:12","text":" @notice Checks if the path initialization is allowed based on the provided origin.\n @param origin The origin information containing the source endpoint and sender address.\n @return Whether the path has been initialized.\n @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n @dev This defaults to assuming if a peer has been set, its initialized.\n Can be overridden by the OApp if there is other logic to determine this."},"functionSelector":"ff7bd03d","id":2007,"implemented":true,"kind":"function","modifiers":[],"name":"allowInitializePath","nameLocation":"2780:19:12","nodeType":"FunctionDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"origin","nameLocation":"2816:6:12","nodeType":"VariableDeclaration","scope":2007,"src":"2800:22:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":1992,"nodeType":"UserDefinedTypeName","pathNode":{"id":1991,"name":"Origin","nameLocations":["2800:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"2800:6:12"},"referencedDeclaration":515,"src":"2800:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"}],"src":"2799:24:12"},"returnParameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2007,"src":"2853:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1995,"name":"bool","nodeType":"ElementaryTypeName","src":"2853:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2852:6:12"},"scope":2088,"src":"2771:149:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[698],"body":{"id":2019,"nodeType":"Block","src":"3610:25:12","statements":[{"expression":{"hexValue":"30","id":2017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3627:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2016,"id":2018,"nodeType":"Return","src":"3620:8:12"}]},"documentation":{"id":2008,"nodeType":"StructuredDocumentation","src":"2926:576:12","text":" @notice Retrieves the next nonce for a given source endpoint and sender address.\n @dev _srcEid The source endpoint ID.\n @dev _sender The sender address.\n @return nonce The next nonce.\n @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n @dev This is also enforced by the OApp.\n @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0."},"functionSelector":"7d25a05e","id":2020,"implemented":true,"kind":"function","modifiers":[],"name":"nextNonce","nameLocation":"3516:9:12","nodeType":"FunctionDefinition","parameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2020,"src":"3526:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2009,"name":"uint32","nodeType":"ElementaryTypeName","src":"3526:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2020,"src":"3546:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2011,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3546:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3525:41:12"},"returnParameters":{"id":2016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"mutability":"mutable","name":"nonce","nameLocation":"3603:5:12","nodeType":"VariableDeclaration","scope":2020,"src":"3596:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2014,"name":"uint64","nodeType":"ElementaryTypeName","src":"3596:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3595:14:12"},"scope":2088,"src":"3507:128:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[712],"body":{"id":2071,"nodeType":"Block","src":"4567:509:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2037,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"4681:8:12","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}],"id":2036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4673:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2035,"name":"address","nodeType":"ElementaryTypeName","src":"4673:7:12","typeDescriptions":{}}},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4673:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4694:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4698:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4694:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4673:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2047,"nodeType":"IfStatement","src":"4669:68:12","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2043,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4726:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4730:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4726:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2042,"name":"OnlyEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"4713:12:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4713:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2046,"nodeType":"RevertStatement","src":"4706:31:12"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":2049,"name":"_origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"4854:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4862:6:12","memberName":"srcEid","nodeType":"MemberAccess","referencedDeclaration":510,"src":"4854:14:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2048,"name":"_getPeerOrRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4837:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_bytes32_$","typeString":"function (uint32) view returns (bytes32)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4837:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2052,"name":"_origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"4873:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4881:6:12","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":512,"src":"4873:14:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4837:50:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2062,"nodeType":"IfStatement","src":"4833:103:12","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2056,"name":"_origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"4905:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4913:6:12","memberName":"srcEid","nodeType":"MemberAccess","referencedDeclaration":510,"src":"4905:14:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":2058,"name":"_origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"4921:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4929:6:12","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":512,"src":"4921:14:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2055,"name":"OnlyPeer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"4896:8:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint32_$_t_bytes32_$returns$__$","typeString":"function (uint32,bytes32) pure"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4896:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2061,"nodeType":"RevertStatement","src":"4889:47:12"}},{"expression":{"arguments":[{"id":2064,"name":"_origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"5021:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"}},{"id":2065,"name":"_guid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"5030:5:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2066,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"5037:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2067,"name":"_executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"5047:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2068,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5058:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2063,"name":"_lzReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"5010:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Origin_$515_calldata_ptr_$_t_bytes32_$_t_bytes_calldata_ptr_$_t_address_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (struct Origin calldata,bytes32,bytes calldata,address,bytes calldata)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5010:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2070,"nodeType":"ExpressionStatement","src":"5010:59:12"}]},"documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"3641:722:12","text":" @dev Entry point for receiving messages or packets from the endpoint.\n @param _origin The origin information containing the source endpoint and sender address.\n  - srcEid: The source chain endpoint ID.\n  - sender: The sender address on the src chain.\n  - nonce: The nonce of the message.\n @param _guid The unique identifier for the received LayerZero message.\n @param _message The payload of the received message.\n @param _executor The address of the executor for the received message.\n @param _extraData Additional arbitrary data provided by the corresponding executor.\n @dev Entry point for receiving msg/packet from the LayerZero endpoint."},"functionSelector":"13137d65","id":2072,"implemented":true,"kind":"function","modifiers":[],"name":"lzReceive","nameLocation":"4377:9:12","nodeType":"FunctionDefinition","parameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"_origin","nameLocation":"4412:7:12","nodeType":"VariableDeclaration","scope":2072,"src":"4396:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":2023,"nodeType":"UserDefinedTypeName","pathNode":{"id":2022,"name":"Origin","nameLocations":["4396:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"4396:6:12"},"referencedDeclaration":515,"src":"4396:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"_guid","nameLocation":"4437:5:12","nodeType":"VariableDeclaration","scope":2072,"src":"4429:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4429:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"_message","nameLocation":"4467:8:12","nodeType":"VariableDeclaration","scope":2072,"src":"4452:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2027,"name":"bytes","nodeType":"ElementaryTypeName","src":"4452:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"_executor","nameLocation":"4493:9:12","nodeType":"VariableDeclaration","scope":2072,"src":"4485:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2029,"name":"address","nodeType":"ElementaryTypeName","src":"4485:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"_extraData","nameLocation":"4527:10:12","nodeType":"VariableDeclaration","scope":2072,"src":"4512:25:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2031,"name":"bytes","nodeType":"ElementaryTypeName","src":"4512:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4386:157:12"},"returnParameters":{"id":2034,"nodeType":"ParameterList","parameters":[],"src":"4567:0:12"},"scope":2088,"src":"4368:708:12","stateMutability":"payable","virtual":true,"visibility":"public"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"5082:126:12","text":" @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation."},"id":2087,"implemented":false,"kind":"function","modifiers":[],"name":"_lzReceive","nameLocation":"5222:10:12","nodeType":"FunctionDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"_origin","nameLocation":"5258:7:12","nodeType":"VariableDeclaration","scope":2087,"src":"5242:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":2075,"nodeType":"UserDefinedTypeName","pathNode":{"id":2074,"name":"Origin","nameLocations":["5242:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"5242:6:12"},"referencedDeclaration":515,"src":"5242:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"_guid","nameLocation":"5283:5:12","nodeType":"VariableDeclaration","scope":2087,"src":"5275:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5275:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"_message","nameLocation":"5313:8:12","nodeType":"VariableDeclaration","scope":2087,"src":"5298:23:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2079,"name":"bytes","nodeType":"ElementaryTypeName","src":"5298:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"_executor","nameLocation":"5339:9:12","nodeType":"VariableDeclaration","scope":2087,"src":"5331:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2081,"name":"address","nodeType":"ElementaryTypeName","src":"5331:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2084,"mutability":"mutable","name":"_extraData","nameLocation":"5373:10:12","nodeType":"VariableDeclaration","scope":2087,"src":"5358:25:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2083,"name":"bytes","nodeType":"ElementaryTypeName","src":"5358:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5232:157:12"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[],"src":"5406:0:12"},"scope":2088,"src":"5213:194:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2089,"src":"321:5088:12","usedErrors":[1952,2285,2289,2291,2293],"usedEvents":[2299,2747]}],"src":"33:5377:12"},"id":12},"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol","exportedSymbols":{"IERC20":[2924],"MessagingFee":[508],"MessagingParams":[495],"MessagingReceipt":[503],"OAppCore":[1936],"OAppSender":[2274],"SafeERC20":[3336]},"id":2275,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2090,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":2093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2275,"sourceUnit":3337,"src":"59:92:13","symbolAliases":[{"foreign":{"id":2091,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"68:9:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2092,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"79:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","id":2097,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2275,"sourceUnit":678,"src":"152:146:13","symbolAliases":[{"foreign":{"id":2094,"name":"MessagingParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"161:15:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2095,"name":"MessagingFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"178:12:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2096,"name":"MessagingReceipt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"192:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol","file":"./OAppCore.sol","id":2099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2275,"sourceUnit":1937,"src":"299:42:13","symbolAliases":[{"foreign":{"id":2098,"name":"OAppCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"308:8:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2101,"name":"OAppCore","nameLocations":["518:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1936,"src":"518:8:13"},"id":2102,"nodeType":"InheritanceSpecifier","src":"518:8:13"}],"canonicalName":"OAppSender","contractDependencies":[],"contractKind":"contract","documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"343:142:13","text":" @title OAppSender\n @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint."},"fullyImplemented":true,"id":2274,"linearizedBaseContracts":[2274,1936,2846,3696,2337],"name":"OAppSender","nameLocation":"504:10:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2106,"libraryName":{"id":2103,"name":"SafeERC20","nameLocations":["539:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"539:9:13"},"nodeType":"UsingForDirective","src":"533:27:13","typeName":{"id":2105,"nodeType":"UserDefinedTypeName","pathNode":{"id":2104,"name":"IERC20","nameLocations":["553:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"553:6:13"},"referencedDeclaration":2924,"src":"553:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}}},{"errorSelector":"9f704120","id":2110,"name":"NotEnoughNative","nameLocation":"601:15:13","nodeType":"ErrorDefinition","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"msgValue","nameLocation":"625:8:13","nodeType":"VariableDeclaration","scope":2110,"src":"617:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"617:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"616:18:13"},"src":"595:40:13"},{"errorSelector":"5373352a","id":2112,"name":"LzTokenUnavailable","nameLocation":"646:18:13","nodeType":"ErrorDefinition","parameters":{"id":2111,"nodeType":"ParameterList","parameters":[],"src":"664:2:13"},"src":"640:27:13"},{"constant":true,"id":2115,"mutability":"constant","name":"SENDER_VERSION","nameLocation":"826:14:13","nodeType":"VariableDeclaration","scope":2274,"src":"801:43:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2113,"name":"uint64","nodeType":"ElementaryTypeName","src":"801:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"31","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"843:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"baseFunctions":[2307],"body":{"id":2127,"nodeType":"Block","src":"1456:43:13","statements":[{"expression":{"components":[{"id":2123,"name":"SENDER_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1474:14:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"30","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1490:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1473:19:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_rational_0_by_1_$","typeString":"tuple(uint64,int_const 0)"}},"functionReturnParameters":2122,"id":2126,"nodeType":"Return","src":"1466:26:13"}]},"documentation":{"id":2116,"nodeType":"StructuredDocumentation","src":"851:502:13","text":" @notice Retrieves the OApp version information.\n @return senderVersion The version of the OAppSender.sol contract.\n @return receiverVersion The version of the OAppReceiver.sol contract.\n @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n ie. this is a SEND only OApp.\n @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions"},"functionSelector":"17442b70","id":2128,"implemented":true,"kind":"function","modifiers":[],"name":"oAppVersion","nameLocation":"1367:11:13","nodeType":"FunctionDefinition","parameters":{"id":2117,"nodeType":"ParameterList","parameters":[],"src":"1378:2:13"},"returnParameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2119,"mutability":"mutable","name":"senderVersion","nameLocation":"1417:13:13","nodeType":"VariableDeclaration","scope":2128,"src":"1410:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2118,"name":"uint64","nodeType":"ElementaryTypeName","src":"1410:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"receiverVersion","nameLocation":"1439:15:13","nodeType":"VariableDeclaration","scope":2128,"src":"1432:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2120,"name":"uint64","nodeType":"ElementaryTypeName","src":"1432:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1409:46:13"},"scope":2274,"src":"1358:141:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2160,"nodeType":"Block","src":"2230:199:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":2146,"name":"_dstEid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"2307:7:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"id":2148,"name":"_dstEid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"2333:7:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2147,"name":"_getPeerOrRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2316:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_bytes32_$","typeString":"function (uint32) view returns (bytes32)"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2150,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2343:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2151,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"2353:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2152,"name":"_payInLzToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"2363:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2145,"name":"MessagingParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"2291:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MessagingParams_$495_storage_ptr_$","typeString":"type(struct MessagingParams storage pointer)"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2291:86:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_memory_ptr","typeString":"struct MessagingParams memory"}},{"arguments":[{"id":2156,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2403:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OAppSender_$2274","typeString":"contract OAppSender"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OAppSender_$2274","typeString":"contract OAppSender"}],"id":2155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2395:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2154,"name":"address","nodeType":"ElementaryTypeName","src":"2395:7:13","typeDescriptions":{}}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2395:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MessagingParams_$495_memory_ptr","typeString":"struct MessagingParams memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2143,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"2259:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2268:5:13","memberName":"quote","nodeType":"MemberAccess","referencedDeclaration":589,"src":"2259:14:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_MessagingParams_$495_memory_ptr_$_t_address_$returns$_t_struct$_MessagingFee_$508_memory_ptr_$","typeString":"function (struct MessagingParams memory,address) view external returns (struct MessagingFee memory)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:163:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"functionReturnParameters":2142,"id":2159,"nodeType":"Return","src":"2240:182:13"}]},"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"1505:528:13","text":" @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n @param _dstEid The destination endpoint ID.\n @param _message The message payload.\n @param _options Additional options for the message.\n @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n @return fee The calculated MessagingFee for the message.\n      - nativeFee: The native fee for the message.\n      - lzTokenFee: The LZ token fee for the message."},"id":2161,"implemented":true,"kind":"function","modifiers":[],"name":"_quote","nameLocation":"2047:6:13","nodeType":"FunctionDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"_dstEid","nameLocation":"2070:7:13","nodeType":"VariableDeclaration","scope":2161,"src":"2063:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2130,"name":"uint32","nodeType":"ElementaryTypeName","src":"2063:6:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2133,"mutability":"mutable","name":"_message","nameLocation":"2100:8:13","nodeType":"VariableDeclaration","scope":2161,"src":"2087:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2132,"name":"bytes","nodeType":"ElementaryTypeName","src":"2087:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2135,"mutability":"mutable","name":"_options","nameLocation":"2131:8:13","nodeType":"VariableDeclaration","scope":2161,"src":"2118:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2134,"name":"bytes","nodeType":"ElementaryTypeName","src":"2118:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2137,"mutability":"mutable","name":"_payInLzToken","nameLocation":"2154:13:13","nodeType":"VariableDeclaration","scope":2161,"src":"2149:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2136,"name":"bool","nodeType":"ElementaryTypeName","src":"2149:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2053:120:13"},"returnParameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"fee","nameLocation":"2225:3:13","nodeType":"VariableDeclaration","scope":2161,"src":"2205:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":2140,"nodeType":"UserDefinedTypeName","pathNode":{"id":2139,"name":"MessagingFee","nameLocations":["2205:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"2205:12:13"},"referencedDeclaration":508,"src":"2205:12:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"src":"2204:25:13"},"scope":2274,"src":"2038:391:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2215,"nodeType":"Block","src":"3422:532:13","statements":[{"assignments":[2180],"declarations":[{"constant":false,"id":2180,"mutability":"mutable","name":"messageValue","nameLocation":"3562:12:13","nodeType":"VariableDeclaration","scope":2215,"src":"3554:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2179,"name":"uint256","nodeType":"ElementaryTypeName","src":"3554:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2185,"initialValue":{"arguments":[{"expression":{"id":2182,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"3588:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":2183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3593:9:13","memberName":"nativeFee","nodeType":"MemberAccess","referencedDeclaration":505,"src":"3588:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2181,"name":"_payNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"3577:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3554:49:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2186,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"3617:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":2187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3622:10:13","memberName":"lzTokenFee","nodeType":"MemberAccess","referencedDeclaration":507,"src":"3617:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3635:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3617:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2195,"nodeType":"IfStatement","src":"3613:53:13","trueBody":{"expression":{"arguments":[{"expression":{"id":2191,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"3650:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":2192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3655:10:13","memberName":"lzTokenFee","nodeType":"MemberAccess","referencedDeclaration":507,"src":"3650:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2190,"name":"_payLzToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"3638:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3638:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2194,"nodeType":"ExpressionStatement","src":"3638:28:13"}},{"expression":{"arguments":[{"arguments":[{"id":2201,"name":"_dstEid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"3825:7:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"id":2203,"name":"_dstEid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"3851:7:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2202,"name":"_getPeerOrRevert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3834:16:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_bytes32_$","typeString":"function (uint32) view returns (bytes32)"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3834:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2205,"name":"_message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"3861:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2206,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"3871:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2207,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"3881:4:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":2208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3886:10:13","memberName":"lzTokenFee","nodeType":"MemberAccess","referencedDeclaration":507,"src":"3881:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3899:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3881:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2200,"name":"MessagingParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"3809:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MessagingParams_$495_storage_ptr_$","typeString":"type(struct MessagingParams storage pointer)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3809:92:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingParams_$495_memory_ptr","typeString":"struct MessagingParams memory"}},{"id":2212,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"3919:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MessagingParams_$495_memory_ptr","typeString":"struct MessagingParams memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_MessagingParams_$495_memory_ptr","typeString":"struct MessagingParams memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2196,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"3755:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3764:4:13","memberName":"send","nodeType":"MemberAccess","referencedDeclaration":600,"src":"3755:13:13","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_MessagingParams_$495_memory_ptr_$_t_address_$returns$_t_struct$_MessagingReceipt_$503_memory_ptr_$","typeString":"function (struct MessagingParams memory,address) payable external returns (struct MessagingReceipt memory)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2198,"name":"messageValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2180,"src":"3777:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3755:36:13","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_MessagingParams_$495_memory_ptr_$_t_address_$returns$_t_struct$_MessagingReceipt_$503_memory_ptr_$value","typeString":"function (struct MessagingParams memory,address) payable external returns (struct MessagingReceipt memory)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3755:192:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_memory_ptr","typeString":"struct MessagingReceipt memory"}},"functionReturnParameters":2178,"id":2214,"nodeType":"Return","src":"3677:270:13"}]},"documentation":{"id":2162,"nodeType":"StructuredDocumentation","src":"2435:748:13","text":" @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n @param _dstEid The destination endpoint ID.\n @param _message The message payload.\n @param _options Additional options for the message.\n @param _fee The calculated LayerZero fee for the message.\n      - nativeFee: The native fee.\n      - lzTokenFee: The lzToken fee.\n @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n @return receipt The receipt for the sent message.\n      - guid: The unique identifier for the sent message.\n      - nonce: The nonce of the sent message.\n      - fee: The LayerZero fee incurred for the message."},"id":2216,"implemented":true,"kind":"function","modifiers":[],"name":"_lzSend","nameLocation":"3197:7:13","nodeType":"FunctionDefinition","parameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"mutability":"mutable","name":"_dstEid","nameLocation":"3221:7:13","nodeType":"VariableDeclaration","scope":2216,"src":"3214:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2163,"name":"uint32","nodeType":"ElementaryTypeName","src":"3214:6:13","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2166,"mutability":"mutable","name":"_message","nameLocation":"3251:8:13","nodeType":"VariableDeclaration","scope":2216,"src":"3238:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2165,"name":"bytes","nodeType":"ElementaryTypeName","src":"3238:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2168,"mutability":"mutable","name":"_options","nameLocation":"3282:8:13","nodeType":"VariableDeclaration","scope":2216,"src":"3269:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2167,"name":"bytes","nodeType":"ElementaryTypeName","src":"3269:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2171,"mutability":"mutable","name":"_fee","nameLocation":"3320:4:13","nodeType":"VariableDeclaration","scope":2216,"src":"3300:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":2170,"nodeType":"UserDefinedTypeName","pathNode":{"id":2169,"name":"MessagingFee","nameLocations":["3300:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"3300:12:13"},"referencedDeclaration":508,"src":"3300:12:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"},{"constant":false,"id":2173,"mutability":"mutable","name":"_refundAddress","nameLocation":"3342:14:13","nodeType":"VariableDeclaration","scope":2216,"src":"3334:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2172,"name":"address","nodeType":"ElementaryTypeName","src":"3334:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3204:158:13"},"returnParameters":{"id":2178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2177,"mutability":"mutable","name":"receipt","nameLocation":"3413:7:13","nodeType":"VariableDeclaration","scope":2216,"src":"3389:31:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_memory_ptr","typeString":"struct MessagingReceipt"},"typeName":{"id":2176,"nodeType":"UserDefinedTypeName","pathNode":{"id":2175,"name":"MessagingReceipt","nameLocations":["3389:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":503,"src":"3389:16:13"},"referencedDeclaration":503,"src":"3389:16:13","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_storage_ptr","typeString":"struct MessagingReceipt"}},"visibility":"internal"}],"src":"3388:33:13"},"scope":2274,"src":"3188:766:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2236,"nodeType":"Block","src":"4735:106:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2224,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4749:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4753:5:13","memberName":"value","nodeType":"MemberAccess","src":"4749:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2226,"name":"_nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4762:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4749:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2233,"nodeType":"IfStatement","src":"4745:62:13","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2229,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4797:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4801:5:13","memberName":"value","nodeType":"MemberAccess","src":"4797:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2228,"name":"NotEnoughNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"4781:15:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2232,"nodeType":"RevertStatement","src":"4774:33:13"}},{"expression":{"id":2234,"name":"_nativeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4824:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2223,"id":2235,"nodeType":"Return","src":"4817:17:13"}]},"documentation":{"id":2217,"nodeType":"StructuredDocumentation","src":"3960:685:13","text":" @dev Internal function to pay the native fee associated with the message.\n @param _nativeFee The native fee to be paid.\n @return nativeFee The amount of native currency paid.\n @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n this will need to be overridden because msg.value would contain multiple lzFees.\n @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time."},"id":2237,"implemented":true,"kind":"function","modifiers":[],"name":"_payNative","nameLocation":"4659:10:13","nodeType":"FunctionDefinition","parameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"_nativeFee","nameLocation":"4678:10:13","nodeType":"VariableDeclaration","scope":2237,"src":"4670:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2218,"name":"uint256","nodeType":"ElementaryTypeName","src":"4670:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4669:20:13"},"returnParameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"mutability":"mutable","name":"nativeFee","nameLocation":"4724:9:13","nodeType":"VariableDeclaration","scope":2237,"src":"4716:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"4716:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4715:19:13"},"scope":2274,"src":"4650:191:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2272,"nodeType":"Block","src":"5277:351:13","statements":[{"assignments":[2244],"declarations":[{"constant":false,"id":2244,"mutability":"mutable","name":"lzToken","nameLocation":"5379:7:13","nodeType":"VariableDeclaration","scope":2272,"src":"5371:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2243,"name":"address","nodeType":"ElementaryTypeName","src":"5371:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2248,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2245,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"5389:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5398:7:13","memberName":"lzToken","nodeType":"MemberAccess","referencedDeclaration":666,"src":"5389:16:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5371:36:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"lzToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"5421:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5440:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5432:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2250,"name":"address","nodeType":"ElementaryTypeName","src":"5432:7:13","typeDescriptions":{}}},"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5432:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2258,"nodeType":"IfStatement","src":"5417:54:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2255,"name":"LzTokenUnavailable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"5451:18:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5451:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2257,"nodeType":"RevertStatement","src":"5444:27:13"}},{"expression":{"arguments":[{"expression":{"id":2263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5578:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5582:6:13","memberName":"sender","nodeType":"MemberAccess","src":"5578:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2267,"name":"endpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"5598:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}],"id":2266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5590:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2265,"name":"address","nodeType":"ElementaryTypeName","src":"5590:7:13","typeDescriptions":{}}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5590:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2269,"name":"_lzTokenFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"5609:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2260,"name":"lzToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"5552:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2259,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"5545:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2924_$","typeString":"type(contract IERC20)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5545:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5561:16:13","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3020,"src":"5545:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2924_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5545:76:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2271,"nodeType":"ExpressionStatement","src":"5545:76:13"}]},"documentation":{"id":2238,"nodeType":"StructuredDocumentation","src":"4847:366:13","text":" @dev Internal function to pay the LZ token fee associated with the message.\n @param _lzTokenFee The LZ token fee to be paid.\n @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend()."},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"_payLzToken","nameLocation":"5227:11:13","nodeType":"FunctionDefinition","parameters":{"id":2241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2240,"mutability":"mutable","name":"_lzTokenFee","nameLocation":"5247:11:13","nodeType":"VariableDeclaration","scope":2273,"src":"5239:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2239,"name":"uint256","nodeType":"ElementaryTypeName","src":"5239:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5238:21:13"},"returnParameters":{"id":2242,"nodeType":"ParameterList","parameters":[],"src":"5277:0:13"},"scope":2274,"src":"5218:410:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2275,"src":"486:5144:13","usedErrors":[2110,2112,2285,2289,2291,2293],"usedEvents":[2299,2747]}],"src":"33:5598:13"},"id":13},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol","exportedSymbols":{"ILayerZeroEndpointV2":[677],"IOAppCore":[2337]},"id":2338,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2276,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:14"},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol","id":2278,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2338,"sourceUnit":678,"src":"59:119:14","symbolAliases":[{"foreign":{"id":2277,"name":"ILayerZeroEndpointV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"68:20:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IOAppCore","contractDependencies":[],"contractKind":"interface","documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"180:27:14","text":" @title IOAppCore"},"fullyImplemented":false,"id":2337,"linearizedBaseContracts":[2337],"name":"IOAppCore","nameLocation":"218:9:14","nodeType":"ContractDefinition","nodes":[{"errorSelector":"c26bebcc","id":2285,"name":"OnlyPeer","nameLocation":"269:8:14","nodeType":"ErrorDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"eid","nameLocation":"285:3:14","nodeType":"VariableDeclaration","scope":2285,"src":"278:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2280,"name":"uint32","nodeType":"ElementaryTypeName","src":"278:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"sender","nameLocation":"298:6:14","nodeType":"VariableDeclaration","scope":2285,"src":"290:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"290:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"277:28:14"},"src":"263:43:14"},{"errorSelector":"f6ff4fb7","id":2289,"name":"NoPeer","nameLocation":"317:6:14","nodeType":"ErrorDefinition","parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"eid","nameLocation":"331:3:14","nodeType":"VariableDeclaration","scope":2289,"src":"324:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2286,"name":"uint32","nodeType":"ElementaryTypeName","src":"324:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"323:12:14"},"src":"311:25:14"},{"errorSelector":"0fbdec0a","id":2291,"name":"InvalidEndpointCall","nameLocation":"347:19:14","nodeType":"ErrorDefinition","parameters":{"id":2290,"nodeType":"ParameterList","parameters":[],"src":"366:2:14"},"src":"341:28:14"},{"errorSelector":"b5863604","id":2293,"name":"InvalidDelegate","nameLocation":"380:15:14","nodeType":"ErrorDefinition","parameters":{"id":2292,"nodeType":"ParameterList","parameters":[],"src":"395:2:14"},"src":"374:24:14"},{"anonymous":false,"eventSelector":"238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b","id":2299,"name":"PeerSet","nameLocation":"486:7:14","nodeType":"EventDefinition","parameters":{"id":2298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2295,"indexed":false,"mutability":"mutable","name":"eid","nameLocation":"501:3:14","nodeType":"VariableDeclaration","scope":2299,"src":"494:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2294,"name":"uint32","nodeType":"ElementaryTypeName","src":"494:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2297,"indexed":false,"mutability":"mutable","name":"peer","nameLocation":"514:4:14","nodeType":"VariableDeclaration","scope":2299,"src":"506:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"506:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"493:26:14"},"src":"480:40:14"},{"documentation":{"id":2300,"nodeType":"StructuredDocumentation","src":"526:216:14","text":" @notice Retrieves the OApp version information.\n @return senderVersion The version of the OAppSender.sol contract.\n @return receiverVersion The version of the OAppReceiver.sol contract."},"functionSelector":"17442b70","id":2307,"implemented":false,"kind":"function","modifiers":[],"name":"oAppVersion","nameLocation":"756:11:14","nodeType":"FunctionDefinition","parameters":{"id":2301,"nodeType":"ParameterList","parameters":[],"src":"767:2:14"},"returnParameters":{"id":2306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2303,"mutability":"mutable","name":"senderVersion","nameLocation":"800:13:14","nodeType":"VariableDeclaration","scope":2307,"src":"793:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2302,"name":"uint64","nodeType":"ElementaryTypeName","src":"793:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"receiverVersion","nameLocation":"822:15:14","nodeType":"VariableDeclaration","scope":2307,"src":"815:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2304,"name":"uint64","nodeType":"ElementaryTypeName","src":"815:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"792:46:14"},"scope":2337,"src":"747:92:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2308,"nodeType":"StructuredDocumentation","src":"845:150:14","text":" @notice Retrieves the LayerZero endpoint associated with the OApp.\n @return iEndpoint The LayerZero endpoint as an interface."},"functionSelector":"5e280f11","id":2314,"implemented":false,"kind":"function","modifiers":[],"name":"endpoint","nameLocation":"1009:8:14","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"1017:2:14"},"returnParameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"iEndpoint","nameLocation":"1064:9:14","nodeType":"VariableDeclaration","scope":2314,"src":"1043:30:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"},"typeName":{"id":2311,"nodeType":"UserDefinedTypeName","pathNode":{"id":2310,"name":"ILayerZeroEndpointV2","nameLocations":["1043:20:14"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"1043:20:14"},"referencedDeclaration":677,"src":"1043:20:14","typeDescriptions":{"typeIdentifier":"t_contract$_ILayerZeroEndpointV2_$677","typeString":"contract ILayerZeroEndpointV2"}},"visibility":"internal"}],"src":"1042:32:14"},"scope":2337,"src":"1000:75:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2315,"nodeType":"StructuredDocumentation","src":"1081:227:14","text":" @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n @param _eid The endpoint ID.\n @return peer The peer address (OApp instance) associated with the corresponding endpoint."},"functionSelector":"bb0b6a53","id":2322,"implemented":false,"kind":"function","modifiers":[],"name":"peers","nameLocation":"1322:5:14","nodeType":"FunctionDefinition","parameters":{"id":2318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"_eid","nameLocation":"1335:4:14","nodeType":"VariableDeclaration","scope":2322,"src":"1328:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2316,"name":"uint32","nodeType":"ElementaryTypeName","src":"1328:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1327:13:14"},"returnParameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"peer","nameLocation":"1372:4:14","nodeType":"VariableDeclaration","scope":2322,"src":"1364:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1364:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1363:14:14"},"scope":2337,"src":"1313:65:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2323,"nodeType":"StructuredDocumentation","src":"1384:224:14","text":" @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n @param _eid The endpoint ID.\n @param _peer The address of the peer to be associated with the corresponding endpoint."},"functionSelector":"3400288b","id":2330,"implemented":false,"kind":"function","modifiers":[],"name":"setPeer","nameLocation":"1622:7:14","nodeType":"FunctionDefinition","parameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2325,"mutability":"mutable","name":"_eid","nameLocation":"1637:4:14","nodeType":"VariableDeclaration","scope":2330,"src":"1630:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2324,"name":"uint32","nodeType":"ElementaryTypeName","src":"1630:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"_peer","nameLocation":"1651:5:14","nodeType":"VariableDeclaration","scope":2330,"src":"1643:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1643:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1629:28:14"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[],"src":"1666:0:14"},"scope":2337,"src":"1613:54:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2331,"nodeType":"StructuredDocumentation","src":"1673:134:14","text":" @notice Sets the delegate address for the OApp Core.\n @param _delegate The address of the delegate to be set."},"functionSelector":"ca5eb5e1","id":2336,"implemented":false,"kind":"function","modifiers":[],"name":"setDelegate","nameLocation":"1821:11:14","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2333,"mutability":"mutable","name":"_delegate","nameLocation":"1841:9:14","nodeType":"VariableDeclaration","scope":2336,"src":"1833:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2332,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1832:19:14"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[],"src":"1860:0:14"},"scope":2337,"src":"1812:49:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2338,"src":"208:1655:14","usedErrors":[2285,2289,2291,2293],"usedEvents":[2299]}],"src":"33:1831:14"},"id":14},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol","exportedSymbols":{"ILayerZeroReceiver":[713],"IOAppReceiver":[2358],"Origin":[515]},"id":2359,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2339,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:15"},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol","id":2342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2359,"sourceUnit":714,"src":"58:123:15","symbolAliases":[{"foreign":{"id":2340,"name":"ILayerZeroReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"67:18:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2341,"name":"Origin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"87:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2343,"name":"ILayerZeroReceiver","nameLocations":["210:18:15"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"210:18:15"},"id":2344,"nodeType":"InheritanceSpecifier","src":"210:18:15"}],"canonicalName":"IOAppReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2358,"linearizedBaseContracts":[2358,713],"name":"IOAppReceiver","nameLocation":"193:13:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2345,"nodeType":"StructuredDocumentation","src":"235:670:15","text":" @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n @param _origin The origin information containing the source endpoint and sender address.\n  - srcEid: The source chain endpoint ID.\n  - sender: The sender address on the src chain.\n  - nonce: The nonce of the message.\n @param _message The lzReceive payload.\n @param _sender The sender address.\n @return isSender Is a valid sender.\n @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n @dev The default sender IS the OAppReceiver implementer."},"functionSelector":"82413eac","id":2357,"implemented":false,"kind":"function","modifiers":[],"name":"isComposeMsgSender","nameLocation":"919:18:15","nodeType":"FunctionDefinition","parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2348,"mutability":"mutable","name":"_origin","nameLocation":"963:7:15","nodeType":"VariableDeclaration","scope":2357,"src":"947:23:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":2347,"nodeType":"UserDefinedTypeName","pathNode":{"id":2346,"name":"Origin","nameLocations":["947:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"947:6:15"},"referencedDeclaration":515,"src":"947:6:15","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":2350,"mutability":"mutable","name":"_message","nameLocation":"995:8:15","nodeType":"VariableDeclaration","scope":2357,"src":"980:23:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2349,"name":"bytes","nodeType":"ElementaryTypeName","src":"980:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"_sender","nameLocation":"1021:7:15","nodeType":"VariableDeclaration","scope":2357,"src":"1013:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2351,"name":"address","nodeType":"ElementaryTypeName","src":"1013:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"937:97:15"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"isSender","nameLocation":"1063:8:15","nodeType":"VariableDeclaration","scope":2357,"src":"1058:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2354,"name":"bool","nodeType":"ElementaryTypeName","src":"1058:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1057:15:15"},"scope":2358,"src":"910:163:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2359,"src":"183:892:15","usedErrors":[],"usedEvents":[]}],"src":"32:1044:15"},"id":15},"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol":{"ast":{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol","exportedSymbols":{"BytesLib":[6158],"DVNOptions":[474],"ExecutorOptions":[1760],"OptionsBuilder":[2733],"SafeCast":[5237]},"id":2734,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2360,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:16"},{"absolutePath":"solidity-bytes-utils/contracts/BytesLib.sol","file":"solidity-bytes-utils/contracts/BytesLib.sol","id":2362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2734,"sourceUnit":6159,"src":"59:71:16","symbolAliases":[{"foreign":{"id":2361,"name":"BytesLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"68:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":2364,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2734,"sourceUnit":5238,"src":"131:75:16","symbolAliases":[{"foreign":{"id":2363,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5237,"src":"140:8:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol","file":"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol","id":2366,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2734,"sourceUnit":1761,"src":"208:114:16","symbolAliases":[{"foreign":{"id":2365,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"217:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol","file":"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol","id":2368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2734,"sourceUnit":475,"src":"323:99:16","symbolAliases":[{"foreign":{"id":2367,"name":"DVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"332:10:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"OptionsBuilder","contractDependencies":[],"contractKind":"library","documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"424:99:16","text":" @title OptionsBuilder\n @dev Library for building and encoding various message options."},"fullyImplemented":true,"id":2733,"linearizedBaseContracts":[2733],"name":"OptionsBuilder","nameLocation":"532:14:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2372,"libraryName":{"id":2370,"name":"SafeCast","nameLocations":["559:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":5237,"src":"559:8:16"},"nodeType":"UsingForDirective","src":"553:27:16","typeName":{"id":2371,"name":"uint256","nodeType":"ElementaryTypeName","src":"572:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":2375,"libraryName":{"id":2373,"name":"BytesLib","nameLocations":["591:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":6158,"src":"591:8:16"},"nodeType":"UsingForDirective","src":"585:25:16","typeName":{"id":2374,"name":"bytes","nodeType":"ElementaryTypeName","src":"604:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"id":2378,"mutability":"constant","name":"TYPE_1","nameLocation":"676:6:16","nodeType":"VariableDeclaration","scope":2733,"src":"651:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2376,"name":"uint16","nodeType":"ElementaryTypeName","src":"651:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"685:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":true,"id":2381,"mutability":"constant","name":"TYPE_2","nameLocation":"742:6:16","nodeType":"VariableDeclaration","scope":2733,"src":"717:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2379,"name":"uint16","nodeType":"ElementaryTypeName","src":"717:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"32","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"751:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"constant":true,"id":2384,"mutability":"constant","name":"TYPE_3","nameLocation":"808:6:16","nodeType":"VariableDeclaration","scope":2733,"src":"783:35:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2382,"name":"uint16","nodeType":"ElementaryTypeName","src":"783:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"817:1:16","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"errorSelector":"3256c04c","id":2390,"name":"InvalidSize","nameLocation":"859:11:16","nodeType":"ErrorDefinition","parameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"max","nameLocation":"879:3:16","nodeType":"VariableDeclaration","scope":2390,"src":"871:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2385,"name":"uint256","nodeType":"ElementaryTypeName","src":"871:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2388,"mutability":"mutable","name":"actual","nameLocation":"892:6:16","nodeType":"VariableDeclaration","scope":2390,"src":"884:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"870:29:16"},"src":"853:47:16"},{"errorSelector":"3a51740d","id":2394,"name":"InvalidOptionType","nameLocation":"911:17:16","nodeType":"ErrorDefinition","parameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"optionType","nameLocation":"936:10:16","nodeType":"VariableDeclaration","scope":2394,"src":"929:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2391,"name":"uint16","nodeType":"ElementaryTypeName","src":"929:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"928:19:16"},"src":"905:43:16"},{"body":{"id":2413,"nodeType":"Block","src":"1054:110:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"hexValue":"30","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1086:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2398,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"1068:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:8:16","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"1068:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1068:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2402,"name":"TYPE_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"1092:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"1068:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2411,"nodeType":"IfStatement","src":"1064:82:16","trueBody":{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1143:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":2405,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"1125:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1134:8:16","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":5967,"src":"1125:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint16_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256) pure returns (uint16)"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1125:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2404,"name":"InvalidOptionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"1107:17:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint16_$returns$__$","typeString":"function (uint16) pure"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1107:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2410,"nodeType":"RevertStatement","src":"1100:46:16"}},{"id":2412,"nodeType":"PlaceholderStatement","src":"1156:1:16"}]},"id":2414,"name":"onlyType3","nameLocation":"1021:9:16","nodeType":"ModifierDefinition","parameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"_options","nameLocation":"1044:8:16","nodeType":"VariableDeclaration","scope":2414,"src":"1031:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2395,"name":"bytes","nodeType":"ElementaryTypeName","src":"1031:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1030:23:16"},"src":"1012:152:16","virtual":false,"visibility":"internal"},{"body":{"id":2425,"nodeType":"Block","src":"1362:48:16","statements":[{"expression":{"arguments":[{"id":2422,"name":"TYPE_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"1396:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":2420,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1379:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1383:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"1379:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1379:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2419,"id":2424,"nodeType":"Return","src":"1372:31:16"}]},"documentation":{"id":2415,"nodeType":"StructuredDocumentation","src":"1170:128:16","text":" @dev Creates a new options container with type 3.\n @return options The newly created options container."},"id":2426,"implemented":true,"kind":"function","modifiers":[],"name":"newOptions","nameLocation":"1312:10:16","nodeType":"FunctionDefinition","parameters":{"id":2416,"nodeType":"ParameterList","parameters":[],"src":"1322:2:16"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"1348:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2417,"name":"bytes","nodeType":"ElementaryTypeName","src":"1348:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1347:14:16"},"scope":2733,"src":"1303:107:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2456,"nodeType":"Block","src":"2277:181:16","statements":[{"assignments":[2442],"declarations":[{"constant":false,"id":2442,"mutability":"mutable","name":"option","nameLocation":"2300:6:16","nodeType":"VariableDeclaration","scope":2456,"src":"2287:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2441,"name":"bytes","nodeType":"ElementaryTypeName","src":"2287:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2448,"initialValue":{"arguments":[{"id":2445,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"2347:4:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2446,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"2353:6:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":2443,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2309:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2325:21:16","memberName":"encodeLzReceiveOption","nodeType":"MemberAccess","referencedDeclaration":1715,"src":"2309:37:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_uint128_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint128,uint128) pure returns (bytes memory)"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2287:73:16"},{"expression":{"arguments":[{"id":2450,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"2395:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2451,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"2405:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2421:21:16","memberName":"OPTION_TYPE_LZRECEIVE","nodeType":"MemberAccess","referencedDeclaration":1486,"src":"2405:37:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2453,"name":"option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"2444:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2449,"name":"addExecutorOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"2377:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint8,bytes memory) pure returns (bytes memory)"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2377:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2440,"id":2455,"nodeType":"Return","src":"2370:81:16"}]},"documentation":{"id":2427,"nodeType":"StructuredDocumentation","src":"1416:680:16","text":" @dev Adds an executor LZ receive option to the existing options.\n @param _options The existing options container.\n @param _gas The gasLimit used on the lzReceive() function in the OApp.\n @param _value The msg.value passed to the lzReceive() function in the OApp.\n @return options The updated options container.\n @dev When multiples of this option are added, they are summed by the executor\n eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\n that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function."},"id":2457,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2436,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"2244:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2437,"kind":"modifierInvocation","modifierName":{"id":2435,"name":"onlyType3","nameLocations":["2234:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"2234:9:16"},"nodeType":"ModifierInvocation","src":"2234:19:16"}],"name":"addExecutorLzReceiveOption","nameLocation":"2110:26:16","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"_options","nameLocation":"2159:8:16","nodeType":"VariableDeclaration","scope":2457,"src":"2146:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2428,"name":"bytes","nodeType":"ElementaryTypeName","src":"2146:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2431,"mutability":"mutable","name":"_gas","nameLocation":"2185:4:16","nodeType":"VariableDeclaration","scope":2457,"src":"2177:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2430,"name":"uint128","nodeType":"ElementaryTypeName","src":"2177:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2433,"mutability":"mutable","name":"_value","nameLocation":"2207:6:16","nodeType":"VariableDeclaration","scope":2457,"src":"2199:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2432,"name":"uint128","nodeType":"ElementaryTypeName","src":"2199:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2136:83:16"},"returnParameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"2263:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2438,"name":"bytes","nodeType":"ElementaryTypeName","src":"2263:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2262:14:16"},"scope":2733,"src":"2101:357:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2487,"nodeType":"Block","src":"3123:190:16","statements":[{"assignments":[2473],"declarations":[{"constant":false,"id":2473,"mutability":"mutable","name":"option","nameLocation":"3146:6:16","nodeType":"VariableDeclaration","scope":2487,"src":"3133:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2472,"name":"bytes","nodeType":"ElementaryTypeName","src":"3133:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2479,"initialValue":{"arguments":[{"id":2476,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"3194:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2477,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"3203:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2474,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"3155:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3171:22:16","memberName":"encodeNativeDropOption","nodeType":"MemberAccess","referencedDeclaration":1731,"src":"3155:38:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint128_$_t_bytes32_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint128,bytes32) pure returns (bytes memory)"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3155:58:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3133:80:16"},{"expression":{"arguments":[{"id":2481,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"3248:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2482,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"3258:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3274:23:16","memberName":"OPTION_TYPE_NATIVE_DROP","nodeType":"MemberAccess","referencedDeclaration":1489,"src":"3258:39:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2484,"name":"option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"3299:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2480,"name":"addExecutorOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"3230:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint8,bytes memory) pure returns (bytes memory)"}},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3230:76:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2471,"id":2486,"nodeType":"Return","src":"3223:83:16"}]},"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"2464:471:16","text":" @dev Adds an executor native drop option to the existing options.\n @param _options The existing options container.\n @param _amount The amount for the native value that is airdropped to the 'receiver'.\n @param _receiver The receiver address for the native drop option.\n @return options The updated options container.\n @dev When multiples of this option are added, they are summed by the executor on the remote chain."},"id":2488,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2467,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"3090:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2468,"kind":"modifierInvocation","modifierName":{"id":2466,"name":"onlyType3","nameLocations":["3080:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"3080:9:16"},"nodeType":"ModifierInvocation","src":"3080:19:16"}],"name":"addExecutorNativeDropOption","nameLocation":"2949:27:16","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"_options","nameLocation":"2999:8:16","nodeType":"VariableDeclaration","scope":2488,"src":"2986:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2459,"name":"bytes","nodeType":"ElementaryTypeName","src":"2986:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"_amount","nameLocation":"3025:7:16","nodeType":"VariableDeclaration","scope":2488,"src":"3017:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2461,"name":"uint128","nodeType":"ElementaryTypeName","src":"3017:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"_receiver","nameLocation":"3050:9:16","nodeType":"VariableDeclaration","scope":2488,"src":"3042:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3042:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2976:89:16"},"returnParameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2488,"src":"3109:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2469,"name":"bytes","nodeType":"ElementaryTypeName","src":"3109:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3108:14:16"},"scope":2733,"src":"2940:373:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2521,"nodeType":"Block","src":"4261:189:16","statements":[{"assignments":[2506],"declarations":[{"constant":false,"id":2506,"mutability":"mutable","name":"option","nameLocation":"4284:6:16","nodeType":"VariableDeclaration","scope":2521,"src":"4271:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2505,"name":"bytes","nodeType":"ElementaryTypeName","src":"4271:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2513,"initialValue":{"arguments":[{"id":2509,"name":"_index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"4331:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2510,"name":"_gas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"4339:4:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2511,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"4345:6:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"expression":{"id":2507,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4293:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4309:21:16","memberName":"encodeLzComposeOption","nodeType":"MemberAccess","referencedDeclaration":1759,"src":"4293:37:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint16_$_t_uint128_$_t_uint128_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint16,uint128,uint128) pure returns (bytes memory)"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4293:59:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4271:81:16"},{"expression":{"arguments":[{"id":2515,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"4387:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2516,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4397:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4413:21:16","memberName":"OPTION_TYPE_LZCOMPOSE","nodeType":"MemberAccess","referencedDeclaration":1492,"src":"4397:37:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2518,"name":"option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"4436:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2514,"name":"addExecutorOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"4369:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint8,bytes memory) pure returns (bytes memory)"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4369:74:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2504,"id":2520,"nodeType":"Return","src":"4362:81:16"}]},"documentation":{"id":2489,"nodeType":"StructuredDocumentation","src":"3319:738:16","text":" @dev Adds an executor LZ compose option to the existing options.\n @param _options The existing options container.\n @param _index The index for the lzCompose() function call.\n @param _gas The gasLimit for the lzCompose() function call.\n @param _value The msg.value for the lzCompose() function call.\n @return options The updated options container.\n @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\n @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\n ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2"},"id":2522,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2500,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"4228:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2501,"kind":"modifierInvocation","modifierName":{"id":2499,"name":"onlyType3","nameLocations":["4218:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"4218:9:16"},"nodeType":"ModifierInvocation","src":"4218:19:16"}],"name":"addExecutorLzComposeOption","nameLocation":"4071:26:16","nodeType":"FunctionDefinition","parameters":{"id":2498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"_options","nameLocation":"4120:8:16","nodeType":"VariableDeclaration","scope":2522,"src":"4107:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2490,"name":"bytes","nodeType":"ElementaryTypeName","src":"4107:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"_index","nameLocation":"4145:6:16","nodeType":"VariableDeclaration","scope":2522,"src":"4138:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2492,"name":"uint16","nodeType":"ElementaryTypeName","src":"4138:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2495,"mutability":"mutable","name":"_gas","nameLocation":"4169:4:16","nodeType":"VariableDeclaration","scope":2522,"src":"4161:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2494,"name":"uint128","nodeType":"ElementaryTypeName","src":"4161:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":2497,"mutability":"mutable","name":"_value","nameLocation":"4191:6:16","nodeType":"VariableDeclaration","scope":2522,"src":"4183:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2496,"name":"uint128","nodeType":"ElementaryTypeName","src":"4183:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"4097:106:16"},"returnParameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2522,"src":"4247:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2502,"name":"bytes","nodeType":"ElementaryTypeName","src":"4247:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4246:14:16"},"scope":2733,"src":"4062:388:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2543,"nodeType":"Block","src":"4797:109:16","statements":[{"expression":{"arguments":[{"id":2534,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"4832:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2535,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4842:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4858:29:16","memberName":"OPTION_TYPE_ORDERED_EXECUTION","nodeType":"MemberAccess","referencedDeclaration":1495,"src":"4842:45:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"hexValue":"","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4895:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4889:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2537,"name":"bytes","nodeType":"ElementaryTypeName","src":"4889:5:16","typeDescriptions":{}}},"id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4889:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2533,"name":"addExecutorOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"4814:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint8,bytes memory) pure returns (bytes memory)"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4814:85:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2532,"id":2542,"nodeType":"Return","src":"4807:92:16"}]},"documentation":{"id":2523,"nodeType":"StructuredDocumentation","src":"4456:199:16","text":" @dev Adds an executor ordered execution option to the existing options.\n @param _options The existing options container.\n @return options The updated options container."},"id":2544,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2528,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"4764:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2529,"kind":"modifierInvocation","modifierName":{"id":2527,"name":"onlyType3","nameLocations":["4754:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"4754:9:16"},"nodeType":"ModifierInvocation","src":"4754:19:16"}],"name":"addExecutorOrderedExecutionOption","nameLocation":"4669:33:16","nodeType":"FunctionDefinition","parameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"_options","nameLocation":"4725:8:16","nodeType":"VariableDeclaration","scope":2544,"src":"4712:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2524,"name":"bytes","nodeType":"ElementaryTypeName","src":"4712:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4702:37:16"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"4783:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2530,"name":"bytes","nodeType":"ElementaryTypeName","src":"4783:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4782:14:16"},"scope":2733,"src":"4660:246:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2568,"nodeType":"Block","src":"5311:99:16","statements":[{"expression":{"arguments":[{"id":2558,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"5341:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2559,"name":"_dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"5351:7:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":2560,"name":"DVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"5360:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DVNOptions_$474_$","typeString":"type(library DVNOptions)"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5371:20:16","memberName":"OPTION_TYPE_PRECRIME","nodeType":"MemberAccess","referencedDeclaration":19,"src":"5360:31:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"hexValue":"","id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5399:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5393:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2562,"name":"bytes","nodeType":"ElementaryTypeName","src":"5393:5:16","typeDescriptions":{}}},"id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5393:9:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2557,"name":"addDVNOption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"5328:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint8_$_t_uint8_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint8,uint8,bytes memory) pure returns (bytes memory)"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2556,"id":2567,"nodeType":"Return","src":"5321:82:16"}]},"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"4912:247:16","text":" @dev Adds a DVN pre-crime option to the existing options.\n @param _options The existing options container.\n @param _dvnIdx The DVN index for the pre-crime option.\n @return options The updated options container."},"id":2569,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2552,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"5278:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2553,"kind":"modifierInvocation","modifierName":{"id":2551,"name":"onlyType3","nameLocations":["5268:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"5268:9:16"},"nodeType":"ModifierInvocation","src":"5268:19:16"}],"name":"addDVNPreCrimeOption","nameLocation":"5173:20:16","nodeType":"FunctionDefinition","parameters":{"id":2550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"_options","nameLocation":"5216:8:16","nodeType":"VariableDeclaration","scope":2569,"src":"5203:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2546,"name":"bytes","nodeType":"ElementaryTypeName","src":"5203:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"_dvnIdx","nameLocation":"5240:7:16","nodeType":"VariableDeclaration","scope":2569,"src":"5234:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2548,"name":"uint8","nodeType":"ElementaryTypeName","src":"5234:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5193:60:16"},"returnParameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2569,"src":"5297:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2554,"name":"bytes","nodeType":"ElementaryTypeName","src":"5297:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5296:14:16"},"scope":2733,"src":"5164:246:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2599,"nodeType":"Block","src":"5903:257:16","statements":[{"expression":{"arguments":[{"id":2586,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"5966:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2587,"name":"ExecutorOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"5992:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ExecutorOptions_$1760_$","typeString":"type(library ExecutorOptions)"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6008:9:16","memberName":"WORKER_ID","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"5992:25:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2589,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"6035:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6043:6:16","memberName":"length","nodeType":"MemberAccess","src":"6035:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6050:8:16","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":4449,"src":"6035:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint16_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint16)"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6035:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6063:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6035:29:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2595,"name":"_optionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"6103:11:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2596,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"6132:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2584,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5932:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5936:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"5932:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5932:221:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2583,"id":2598,"nodeType":"Return","src":"5913:240:16"}]},"documentation":{"id":2570,"nodeType":"StructuredDocumentation","src":"5416:304:16","text":" @dev Adds an executor option to the existing options.\n @param _options The existing options container.\n @param _optionType The type of the executor option.\n @param _option The encoded data for the executor option.\n @return options The updated options container."},"id":2600,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2579,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"5870:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2580,"kind":"modifierInvocation","modifierName":{"id":2578,"name":"onlyType3","nameLocations":["5860:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"5860:9:16"},"nodeType":"ModifierInvocation","src":"5860:19:16"}],"name":"addExecutorOption","nameLocation":"5734:17:16","nodeType":"FunctionDefinition","parameters":{"id":2577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2572,"mutability":"mutable","name":"_options","nameLocation":"5774:8:16","nodeType":"VariableDeclaration","scope":2600,"src":"5761:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2571,"name":"bytes","nodeType":"ElementaryTypeName","src":"5761:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2574,"mutability":"mutable","name":"_optionType","nameLocation":"5798:11:16","nodeType":"VariableDeclaration","scope":2600,"src":"5792:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2573,"name":"uint8","nodeType":"ElementaryTypeName","src":"5792:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"_option","nameLocation":"5832:7:16","nodeType":"VariableDeclaration","scope":2600,"src":"5819:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2575,"name":"bytes","nodeType":"ElementaryTypeName","src":"5819:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5751:94:16"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2600,"src":"5889:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2581,"name":"bytes","nodeType":"ElementaryTypeName","src":"5889:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5888:14:16"},"scope":2733,"src":"5725:435:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"6711:288:16","statements":[{"expression":{"arguments":[{"id":2619,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"6774:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":2620,"name":"DVNOptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"6800:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_DVNOptions_$474_$","typeString":"type(library DVNOptions)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6811:9:16","memberName":"WORKER_ID","nodeType":"MemberAccess","referencedDeclaration":16,"src":"6800:20:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2622,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"6838:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6846:6:16","memberName":"length","nodeType":"MemberAccess","src":"6838:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6853:8:16","memberName":"toUint16","nodeType":"MemberAccess","referencedDeclaration":4449,"src":"6838:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint16_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint16)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6838:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6866:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6838:29:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2628,"name":"_dvnIdx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"6917:7:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2629,"name":"_optionType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"6942:11:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2630,"name":"_option","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"6971:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2617,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6740:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6744:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"6740:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6740:252:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2616,"id":2632,"nodeType":"Return","src":"6721:271:16"}]},"documentation":{"id":2601,"nodeType":"StructuredDocumentation","src":"6166:344:16","text":" @dev Adds a DVN option to the existing options.\n @param _options The existing options container.\n @param _dvnIdx The DVN index for the DVN option.\n @param _optionType The type of the DVN option.\n @param _option The encoded data for the DVN option.\n @return options The updated options container."},"id":2634,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2612,"name":"_options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"6678:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":2613,"kind":"modifierInvocation","modifierName":{"id":2611,"name":"onlyType3","nameLocations":["6668:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":2414,"src":"6668:9:16"},"nodeType":"ModifierInvocation","src":"6668:19:16"}],"name":"addDVNOption","nameLocation":"6524:12:16","nodeType":"FunctionDefinition","parameters":{"id":2610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2603,"mutability":"mutable","name":"_options","nameLocation":"6559:8:16","nodeType":"VariableDeclaration","scope":2634,"src":"6546:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2602,"name":"bytes","nodeType":"ElementaryTypeName","src":"6546:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2605,"mutability":"mutable","name":"_dvnIdx","nameLocation":"6583:7:16","nodeType":"VariableDeclaration","scope":2634,"src":"6577:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2604,"name":"uint8","nodeType":"ElementaryTypeName","src":"6577:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"_optionType","nameLocation":"6606:11:16","nodeType":"VariableDeclaration","scope":2634,"src":"6600:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2606,"name":"uint8","nodeType":"ElementaryTypeName","src":"6600:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"_option","nameLocation":"6640:7:16","nodeType":"VariableDeclaration","scope":2634,"src":"6627:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2608,"name":"bytes","nodeType":"ElementaryTypeName","src":"6627:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6536:117:16"},"returnParameters":{"id":2616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"6697:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2614,"name":"bytes","nodeType":"ElementaryTypeName","src":"6697:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6696:14:16"},"scope":2733,"src":"6515:484:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2665,"nodeType":"Block","src":"7288:164:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2642,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7302:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7323:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2644,"name":"uint128","nodeType":"ElementaryTypeName","src":"7323:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2643,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7318:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7332:3:16","memberName":"max","nodeType":"MemberAccess","src":"7318:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"7302:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2658,"nodeType":"IfStatement","src":"7298:91:16","trueBody":{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7361:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2651,"name":"uint128","nodeType":"ElementaryTypeName","src":"7361:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2650,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7356:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7356:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7370:3:16","memberName":"max","nodeType":"MemberAccess","src":"7356:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2655,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7375:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2649,"name":"InvalidSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"7344:11:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2657,"nodeType":"RevertStatement","src":"7337:52:16"}},{"expression":{"arguments":[{"id":2661,"name":"TYPE_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"7423:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2662,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7431:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2659,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7406:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7410:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"7406:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7406:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2641,"id":2664,"nodeType":"Return","src":"7399:46:16"}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"7005:184:16","text":" @dev Encodes legacy options of type 1.\n @param _executionGas The gasLimit value passed to lzReceive().\n @return legacyOptions The encoded legacy options."},"id":2666,"implemented":true,"kind":"function","modifiers":[],"name":"encodeLegacyOptionsType1","nameLocation":"7203:24:16","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"_executionGas","nameLocation":"7236:13:16","nodeType":"VariableDeclaration","scope":2666,"src":"7228:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"7228:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7227:23:16"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2666,"src":"7274:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2639,"name":"bytes","nodeType":"ElementaryTypeName","src":"7274:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7273:14:16"},"scope":2733,"src":"7194:258:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2731,"nodeType":"Block","src":"8035:368:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8049:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8070:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2680,"name":"uint128","nodeType":"ElementaryTypeName","src":"8070:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2679,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8065:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8065:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8079:3:16","memberName":"max","nodeType":"MemberAccess","src":"8065:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8049:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2694,"nodeType":"IfStatement","src":"8045:91:16","trueBody":{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8108:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2687,"name":"uint128","nodeType":"ElementaryTypeName","src":"8108:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2686,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8103:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8103:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8117:3:16","memberName":"max","nodeType":"MemberAccess","src":"8103:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2691,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8122:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2685,"name":"InvalidSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8091:11:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8091:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2693,"nodeType":"RevertStatement","src":"8084:52:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"_nativeForDst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"8150:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8171:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2697,"name":"uint128","nodeType":"ElementaryTypeName","src":"8171:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2696,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8166:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8166:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8180:3:16","memberName":"max","nodeType":"MemberAccess","src":"8166:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8150:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2711,"nodeType":"IfStatement","src":"8146:91:16","trueBody":{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8209:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2704,"name":"uint128","nodeType":"ElementaryTypeName","src":"8209:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":2703,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8204:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8204:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8218:3:16","memberName":"max","nodeType":"MemberAccess","src":"8204:17:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":2708,"name":"_nativeForDst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"8223:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2702,"name":"InvalidSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8192:11:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8192:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2710,"nodeType":"RevertStatement","src":"8185:52:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2712,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"8251:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8261:6:16","memberName":"length","nodeType":"MemberAccess","src":"8251:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3332","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8270:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8251:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2722,"nodeType":"IfStatement","src":"8247:67:16","trueBody":{"errorCall":{"arguments":[{"hexValue":"3332","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8293:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"expression":{"id":2718,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"8297:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8307:6:16","memberName":"length","nodeType":"MemberAccess","src":"8297:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2716,"name":"InvalidSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"8281:11:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8281:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"RevertStatement","src":"8274:40:16"}},{"expression":{"arguments":[{"id":2725,"name":"TYPE_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2381,"src":"8348:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2726,"name":"_executionGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"8356:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2727,"name":"_nativeForDst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"8371:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2728,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"8386:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2723,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8331:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8335:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"8331:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8331:65:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2677,"id":2730,"nodeType":"Return","src":"8324:72:16"}]},"documentation":{"id":2667,"nodeType":"StructuredDocumentation","src":"7458:332:16","text":" @dev Encodes legacy options of type 2.\n @param _executionGas The gasLimit value passed to lzReceive().\n @param _nativeForDst The amount of native air dropped to the receiver.\n @param _receiver The _nativeForDst receiver address.\n @return legacyOptions The encoded legacy options of type 2."},"id":2732,"implemented":true,"kind":"function","modifiers":[],"name":"encodeLegacyOptionsType2","nameLocation":"7804:24:16","nodeType":"FunctionDefinition","parameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"_executionGas","nameLocation":"7846:13:16","nodeType":"VariableDeclaration","scope":2732,"src":"7838:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2668,"name":"uint256","nodeType":"ElementaryTypeName","src":"7838:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2671,"mutability":"mutable","name":"_nativeForDst","nameLocation":"7877:13:16","nodeType":"VariableDeclaration","scope":2732,"src":"7869:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"7869:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"_receiver","nameLocation":"7913:9:16","nodeType":"VariableDeclaration","scope":2732,"src":"7900:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2672,"name":"bytes","nodeType":"ElementaryTypeName","src":"7900:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7828:169:16"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2732,"src":"8021:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2675,"name":"bytes","nodeType":"ElementaryTypeName","src":"8021:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8020:14:16"},"scope":2733,"src":"7795:608:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2734,"src":"524:7881:16","usedErrors":[2390,2394],"usedEvents":[]}],"src":"33:8373:16"},"id":16},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3696],"Ownable":[2846]},"id":2847,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2735,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2847,"sourceUnit":3697,"src":"127:30:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2738,"name":"Context","nameLocations":["683:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":3696,"src":"683:7:17"},"id":2739,"nodeType":"InheritanceSpecifier","src":"683:7:17"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2737,"nodeType":"StructuredDocumentation","src":"159:494:17","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2846,"linearizedBaseContracts":[2846,3696],"name":"Ownable","nameLocation":"672:7:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2741,"mutability":"mutable","name":"_owner","nameLocation":"713:6:17","nodeType":"VariableDeclaration","scope":2846,"src":"697:22:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2740,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":2747,"name":"OwnershipTransferred","nameLocation":"732:20:17","nodeType":"EventDefinition","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:17","nodeType":"VariableDeclaration","scope":2747,"src":"753:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2745,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:17","nodeType":"VariableDeclaration","scope":2747,"src":"784:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:17"},"src":"726:84:17"},{"body":{"id":2756,"nodeType":"Block","src":"926:49:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2752,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"955:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2751,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"936:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2755,"nodeType":"ExpressionStatement","src":"936:32:17"}]},"documentation":{"id":2748,"nodeType":"StructuredDocumentation","src":"816:91:17","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":2757,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[],"src":"923:2:17"},"returnParameters":{"id":2750,"nodeType":"ParameterList","parameters":[],"src":"926:0:17"},"scope":2846,"src":"912:63:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2764,"nodeType":"Block","src":"1084:41:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2760,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1094:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2762,"nodeType":"ExpressionStatement","src":"1094:13:17"},{"id":2763,"nodeType":"PlaceholderStatement","src":"1117:1:17"}]},"documentation":{"id":2758,"nodeType":"StructuredDocumentation","src":"981:77:17","text":" @dev Throws if called by any account other than the owner."},"id":2765,"name":"onlyOwner","nameLocation":"1072:9:17","nodeType":"ModifierDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[],"src":"1081:2:17"},"src":"1063:62:17","virtual":false,"visibility":"internal"},{"body":{"id":2773,"nodeType":"Block","src":"1256:30:17","statements":[{"expression":{"id":2771,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"1273:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2770,"id":2772,"nodeType":"Return","src":"1266:13:17"}]},"documentation":{"id":2766,"nodeType":"StructuredDocumentation","src":"1131:65:17","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2774,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:17","nodeType":"FunctionDefinition","parameters":{"id":2767,"nodeType":"ParameterList","parameters":[],"src":"1215:2:17"},"returnParameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2774,"src":"1247:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:17"},"scope":2846,"src":"1201:85:17","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2787,"nodeType":"Block","src":"1404:85:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2779,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"1422:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2781,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"1433:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2778,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2786,"nodeType":"ExpressionStatement","src":"1414:68:17"}]},"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"1292:62:17","text":" @dev Throws if the sender is not the owner."},"id":2788,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:17","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[],"src":"1379:2:17"},"returnParameters":{"id":2777,"nodeType":"ParameterList","parameters":[],"src":"1404:0:17"},"scope":2846,"src":"1359:130:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2801,"nodeType":"Block","src":"1878:47:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:17","typeDescriptions":{}}},"id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2794,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"1888:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2800,"nodeType":"ExpressionStatement","src":"1888:30:17"}]},"documentation":{"id":2789,"nodeType":"StructuredDocumentation","src":"1495:324:17","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2802,"implemented":true,"kind":"function","modifiers":[{"id":2792,"kind":"modifierInvocation","modifierName":{"id":2791,"name":"onlyOwner","nameLocations":["1868:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"1868:9:17"},"nodeType":"ModifierInvocation","src":"1868:9:17"}],"name":"renounceOwnership","nameLocation":"1833:17:17","nodeType":"FunctionDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[],"src":"1850:2:17"},"returnParameters":{"id":2793,"nodeType":"ParameterList","parameters":[],"src":"1878:0:17"},"scope":2846,"src":"1824:101:17","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2824,"nodeType":"Block","src":"2144:128:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2811,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"2162:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:17","typeDescriptions":{}}},"id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2810,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2819,"nodeType":"ExpressionStatement","src":"2154:73:17"},{"expression":{"arguments":[{"id":2821,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"2256:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2820,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"2237:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2823,"nodeType":"ExpressionStatement","src":"2237:28:17"}]},"documentation":{"id":2803,"nodeType":"StructuredDocumentation","src":"1931:138:17","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2825,"implemented":true,"kind":"function","modifiers":[{"id":2808,"kind":"modifierInvocation","modifierName":{"id":2807,"name":"onlyOwner","nameLocations":["2134:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"2134:9:17"},"nodeType":"ModifierInvocation","src":"2134:9:17"}],"name":"transferOwnership","nameLocation":"2083:17:17","nodeType":"FunctionDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2805,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:17","nodeType":"VariableDeclaration","scope":2825,"src":"2101:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2804,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:17"},"returnParameters":{"id":2809,"nodeType":"ParameterList","parameters":[],"src":"2144:0:17"},"scope":2846,"src":"2074:198:17","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2844,"nodeType":"Block","src":"2489:124:17","statements":[{"assignments":[2832],"declarations":[{"constant":false,"id":2832,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:17","nodeType":"VariableDeclaration","scope":2844,"src":"2499:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2831,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2834,"initialValue":{"id":2833,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"2518:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:17"},{"expression":{"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2835,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"2534:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2836,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"2543:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2838,"nodeType":"ExpressionStatement","src":"2534:17:17"},{"eventCall":{"arguments":[{"id":2840,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"2587:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2841,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"2597:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2839,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"2566:20:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2843,"nodeType":"EmitStatement","src":"2561:45:17"}]},"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"2278:143:17","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2845,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:17","nodeType":"FunctionDefinition","parameters":{"id":2829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:17","nodeType":"VariableDeclaration","scope":2845,"src":"2454:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2827,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:17"},"returnParameters":{"id":2830,"nodeType":"ParameterList","parameters":[],"src":"2489:0:17"},"scope":2846,"src":"2426:187:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2847,"src":"654:1961:17","usedErrors":[],"usedEvents":[2747]}],"src":"102:2514:17"},"id":17},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2924]},"id":2925,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2848,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2849,"nodeType":"StructuredDocumentation","src":"131:70:18","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2924,"linearizedBaseContracts":[2924],"name":"IERC20","nameLocation":"212:6:18","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2850,"nodeType":"StructuredDocumentation","src":"225:158:18","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2858,"name":"Transfer","nameLocation":"394:8:18","nodeType":"EventDefinition","parameters":{"id":2857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:18","nodeType":"VariableDeclaration","scope":2858,"src":"403:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2851,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2854,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:18","nodeType":"VariableDeclaration","scope":2858,"src":"425:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2853,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2856,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:18","nodeType":"VariableDeclaration","scope":2858,"src":"445:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:18"},"src":"388:72:18"},{"anonymous":false,"documentation":{"id":2859,"nodeType":"StructuredDocumentation","src":"466:148:18","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2867,"name":"Approval","nameLocation":"625:8:18","nodeType":"EventDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:18","nodeType":"VariableDeclaration","scope":2867,"src":"634:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2860,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2863,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:18","nodeType":"VariableDeclaration","scope":2867,"src":"657:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2862,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2865,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:18","nodeType":"VariableDeclaration","scope":2867,"src":"682:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:18"},"src":"619:78:18"},{"documentation":{"id":2868,"nodeType":"StructuredDocumentation","src":"703:66:18","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2873,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:18","nodeType":"FunctionDefinition","parameters":{"id":2869,"nodeType":"ParameterList","parameters":[],"src":"794:2:18"},"returnParameters":{"id":2872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2873,"src":"820:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:18"},"scope":2924,"src":"774:55:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2874,"nodeType":"StructuredDocumentation","src":"835:72:18","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2881,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:18","nodeType":"FunctionDefinition","parameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"account","nameLocation":"939:7:18","nodeType":"VariableDeclaration","scope":2881,"src":"931:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2875,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:18"},"returnParameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2881,"src":"971:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2878,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:18"},"scope":2924,"src":"912:68:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"986:202:18","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2891,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:18","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"to","nameLocation":"1219:2:18","nodeType":"VariableDeclaration","scope":2891,"src":"1211:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2883,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"amount","nameLocation":"1231:6:18","nodeType":"VariableDeclaration","scope":2891,"src":"1223:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:18"},"returnParameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2891,"src":"1257:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2888,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:18"},"scope":2924,"src":"1193:70:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2892,"nodeType":"StructuredDocumentation","src":"1269:264:18","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2901,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:18","nodeType":"FunctionDefinition","parameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"owner","nameLocation":"1565:5:18","nodeType":"VariableDeclaration","scope":2901,"src":"1557:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2893,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"spender","nameLocation":"1580:7:18","nodeType":"VariableDeclaration","scope":2901,"src":"1572:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2895,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:18"},"returnParameters":{"id":2900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"1612:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:18"},"scope":2924,"src":"1538:83:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2902,"nodeType":"StructuredDocumentation","src":"1627:642:18","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2911,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:18","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2904,"mutability":"mutable","name":"spender","nameLocation":"2299:7:18","nodeType":"VariableDeclaration","scope":2911,"src":"2291:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2903,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"amount","nameLocation":"2316:6:18","nodeType":"VariableDeclaration","scope":2911,"src":"2308:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:18"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2911,"src":"2342:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2908,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:18"},"scope":2924,"src":"2274:74:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2912,"nodeType":"StructuredDocumentation","src":"2354:287:18","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2923,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:18","nodeType":"FunctionDefinition","parameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2914,"mutability":"mutable","name":"from","nameLocation":"2676:4:18","nodeType":"VariableDeclaration","scope":2923,"src":"2668:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2913,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"to","nameLocation":"2690:2:18","nodeType":"VariableDeclaration","scope":2923,"src":"2682:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"amount","nameLocation":"2702:6:18","nodeType":"VariableDeclaration","scope":2923,"src":"2694:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2917,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:18"},"returnParameters":{"id":2922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2923,"src":"2728:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2920,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:18"},"scope":2924,"src":"2646:88:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2925,"src":"202:2534:18","usedErrors":[],"usedEvents":[2858,2867]}],"src":"106:2631:18"},"id":18},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[2960]},"id":2961,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2926,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":2927,"nodeType":"StructuredDocumentation","src":"148:1963:19","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":2960,"linearizedBaseContracts":[2960],"name":"IERC20Permit","nameLocation":"2122:12:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2928,"nodeType":"StructuredDocumentation","src":"2141:850:19","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":2945,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3005:6:19","nodeType":"FunctionDefinition","parameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2930,"mutability":"mutable","name":"owner","nameLocation":"3029:5:19","nodeType":"VariableDeclaration","scope":2945,"src":"3021:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2929,"name":"address","nodeType":"ElementaryTypeName","src":"3021:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"spender","nameLocation":"3052:7:19","nodeType":"VariableDeclaration","scope":2945,"src":"3044:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2931,"name":"address","nodeType":"ElementaryTypeName","src":"3044:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2934,"mutability":"mutable","name":"value","nameLocation":"3077:5:19","nodeType":"VariableDeclaration","scope":2945,"src":"3069:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2936,"mutability":"mutable","name":"deadline","nameLocation":"3100:8:19","nodeType":"VariableDeclaration","scope":2945,"src":"3092:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2935,"name":"uint256","nodeType":"ElementaryTypeName","src":"3092:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"v","nameLocation":"3124:1:19","nodeType":"VariableDeclaration","scope":2945,"src":"3118:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2937,"name":"uint8","nodeType":"ElementaryTypeName","src":"3118:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"r","nameLocation":"3143:1:19","nodeType":"VariableDeclaration","scope":2945,"src":"3135:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3135:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"s","nameLocation":"3162:1:19","nodeType":"VariableDeclaration","scope":2945,"src":"3154:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3154:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3011:158:19"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[],"src":"3178:0:19"},"scope":2960,"src":"2996:183:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2946,"nodeType":"StructuredDocumentation","src":"3185:294:19","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":2953,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3493:6:19","nodeType":"FunctionDefinition","parameters":{"id":2949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"owner","nameLocation":"3508:5:19","nodeType":"VariableDeclaration","scope":2953,"src":"3500:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2947,"name":"address","nodeType":"ElementaryTypeName","src":"3500:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3499:15:19"},"returnParameters":{"id":2952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2953,"src":"3538:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2950,"name":"uint256","nodeType":"ElementaryTypeName","src":"3538:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3537:9:19"},"scope":2960,"src":"3484:63:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2954,"nodeType":"StructuredDocumentation","src":"3553:128:19","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":2959,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3748:16:19","nodeType":"FunctionDefinition","parameters":{"id":2955,"nodeType":"ParameterList","parameters":[],"src":"3764:2:19"},"returnParameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2959,"src":"3790:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3790:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3789:9:19"},"scope":2960,"src":"3739:60:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2961,"src":"2112:1689:19","usedErrors":[],"usedEvents":[]}],"src":"123:3679:19"},"id":19},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[3666],"IERC20":[2924],"IERC20Permit":[2960],"SafeERC20":[3336]},"id":3337,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2962,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:20"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2963,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3337,"sourceUnit":2925,"src":"140:23:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":2964,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3337,"sourceUnit":2961,"src":"164:40:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":2965,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3337,"sourceUnit":3667,"src":"205:36:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2966,"nodeType":"StructuredDocumentation","src":"243:457:20","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":3336,"linearizedBaseContracts":[3336],"name":"SafeERC20","nameLocation":"709:9:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2969,"libraryName":{"id":2967,"name":"Address","nameLocations":["731:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":3666,"src":"731:7:20"},"nodeType":"UsingForDirective","src":"725:26:20","typeName":{"id":2968,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2992,"nodeType":"Block","src":"1013:103:20","statements":[{"expression":{"arguments":[{"id":2981,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"1043:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2984,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"1073:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":2985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:20","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2891,"src":"1073:14:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:20","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"1098:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"1102:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2982,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2980,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1023:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2991,"nodeType":"ExpressionStatement","src":"1023:86:20"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"757:179:20","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2993,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:20","nodeType":"FunctionDefinition","parameters":{"id":2978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"token","nameLocation":"970:5:20","nodeType":"VariableDeclaration","scope":2993,"src":"963:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":2972,"nodeType":"UserDefinedTypeName","pathNode":{"id":2971,"name":"IERC20","nameLocations":["963:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"963:6:20"},"referencedDeclaration":2924,"src":"963:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"to","nameLocation":"985:2:20","nodeType":"VariableDeclaration","scope":2993,"src":"977:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2974,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2977,"mutability":"mutable","name":"value","nameLocation":"997:5:20","nodeType":"VariableDeclaration","scope":2993,"src":"989:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:20"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[],"src":"1013:0:20"},"scope":3336,"src":"941:175:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3019,"nodeType":"Block","src":"1445:113:20","statements":[{"expression":{"arguments":[{"id":3007,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"1475:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3010,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"1505:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:20","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2923,"src":"1505:18:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:20","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3013,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"1534:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3014,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"1540:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3015,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1544:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3008,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3006,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"1455:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3018,"nodeType":"ExpressionStatement","src":"1455:96:20"}]},"documentation":{"id":2994,"nodeType":"StructuredDocumentation","src":"1122:228:20","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":3020,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:20","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"token","nameLocation":"1388:5:20","nodeType":"VariableDeclaration","scope":3020,"src":"1381:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":2996,"nodeType":"UserDefinedTypeName","pathNode":{"id":2995,"name":"IERC20","nameLocations":["1381:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"1381:6:20"},"referencedDeclaration":2924,"src":"1381:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2999,"mutability":"mutable","name":"from","nameLocation":"1403:4:20","nodeType":"VariableDeclaration","scope":3020,"src":"1395:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2998,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3001,"mutability":"mutable","name":"to","nameLocation":"1417:2:20","nodeType":"VariableDeclaration","scope":3020,"src":"1409:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3000,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"value","nameLocation":"1429:5:20","nodeType":"VariableDeclaration","scope":3020,"src":"1421:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3002,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:20"},"returnParameters":{"id":3005,"nodeType":"ParameterList","parameters":[],"src":"1445:0:20"},"scope":3336,"src":"1355:203:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3063,"nodeType":"Block","src":"1894:497:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"2143:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3040,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}],"id":3039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3038,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:20","typeDescriptions":{}}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3042,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"2190:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3036,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"2159:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:20","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2901,"src":"2159:15:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":3031,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3050,"nodeType":"ExpressionStatement","src":"2121:163:20"},{"expression":{"arguments":[{"id":3052,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"2314:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3055,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"2344:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:20","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"2344:13:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:20","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3058,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3026,"src":"2368:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3028,"src":"2377:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3053,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3051,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"2294:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3062,"nodeType":"ExpressionStatement","src":"2294:90:20"}]},"documentation":{"id":3021,"nodeType":"StructuredDocumentation","src":"1564:249:20","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":3064,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:20","nodeType":"FunctionDefinition","parameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3024,"mutability":"mutable","name":"token","nameLocation":"1846:5:20","nodeType":"VariableDeclaration","scope":3064,"src":"1839:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3023,"nodeType":"UserDefinedTypeName","pathNode":{"id":3022,"name":"IERC20","nameLocations":["1839:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"1839:6:20"},"referencedDeclaration":2924,"src":"1839:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3026,"mutability":"mutable","name":"spender","nameLocation":"1861:7:20","nodeType":"VariableDeclaration","scope":3064,"src":"1853:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3025,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3028,"mutability":"mutable","name":"value","nameLocation":"1878:5:20","nodeType":"VariableDeclaration","scope":3064,"src":"1870:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:20"},"returnParameters":{"id":3030,"nodeType":"ParameterList","parameters":[],"src":"1894:0:20"},"scope":3336,"src":"1818:573:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3100,"nodeType":"Block","src":"2668:194:20","statements":[{"assignments":[3076],"declarations":[{"constant":false,"id":3076,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:20","nodeType":"VariableDeclaration","scope":3100,"src":"2678:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3075,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3085,"initialValue":{"arguments":[{"arguments":[{"id":3081,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}],"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3079,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:20","typeDescriptions":{}}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3083,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"2732:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3077,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2701:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:20","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2901,"src":"2701:15:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:20"},{"expression":{"arguments":[{"id":3087,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2770:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3090,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"2800:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:20","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"2800:13:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:20","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3093,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"2824:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3094,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2833:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"2848:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3088,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3086,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"2750:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3099,"nodeType":"ExpressionStatement","src":"2750:105:20"}]},"documentation":{"id":3065,"nodeType":"StructuredDocumentation","src":"2397:180:20","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3101,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:20","nodeType":"FunctionDefinition","parameters":{"id":3073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3068,"mutability":"mutable","name":"token","nameLocation":"2620:5:20","nodeType":"VariableDeclaration","scope":3101,"src":"2613:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3067,"nodeType":"UserDefinedTypeName","pathNode":{"id":3066,"name":"IERC20","nameLocations":["2613:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"2613:6:20"},"referencedDeclaration":2924,"src":"2613:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"spender","nameLocation":"2635:7:20","nodeType":"VariableDeclaration","scope":3101,"src":"2627:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"value","nameLocation":"2652:5:20","nodeType":"VariableDeclaration","scope":3101,"src":"2644:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:20"},"returnParameters":{"id":3074,"nodeType":"ParameterList","parameters":[],"src":"2668:0:20"},"scope":3336,"src":"2582:280:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3145,"nodeType":"Block","src":"3139:321:20","statements":[{"id":3144,"nodeType":"UncheckedBlock","src":"3149:305:20","statements":[{"assignments":[3113],"declarations":[{"constant":false,"id":3113,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:20","nodeType":"VariableDeclaration","scope":3144,"src":"3173:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3112,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3122,"initialValue":{"arguments":[{"arguments":[{"id":3118,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$3336","typeString":"library SafeERC20"}],"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3116,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:20","typeDescriptions":{}}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3120,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"3227:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3114,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"3196:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:20","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2901,"src":"3196:15:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3124,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"3257:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3273:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":3123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3129,"nodeType":"ExpressionStatement","src":"3249:75:20"},{"expression":{"arguments":[{"id":3131,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"3358:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3134,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"3388:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:20","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"3388:13:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:20","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3137,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"3412:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3138,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"3421:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3139,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3436:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3132,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3130,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"3338:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3143,"nodeType":"ExpressionStatement","src":"3338:105:20"}]}]},"documentation":{"id":3102,"nodeType":"StructuredDocumentation","src":"2868:180:20","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3146,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:20","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3105,"mutability":"mutable","name":"token","nameLocation":"3091:5:20","nodeType":"VariableDeclaration","scope":3146,"src":"3084:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3104,"nodeType":"UserDefinedTypeName","pathNode":{"id":3103,"name":"IERC20","nameLocations":["3084:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"3084:6:20"},"referencedDeclaration":2924,"src":"3084:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3107,"mutability":"mutable","name":"spender","nameLocation":"3106:7:20","nodeType":"VariableDeclaration","scope":3146,"src":"3098:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3106,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3109,"mutability":"mutable","name":"value","nameLocation":"3123:5:20","nodeType":"VariableDeclaration","scope":3146,"src":"3115:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:20"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[],"src":"3139:0:20"},"scope":3336,"src":"3053:407:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3192,"nodeType":"Block","src":"3856:333:20","statements":[{"assignments":[3158],"declarations":[{"constant":false,"id":3158,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:20","nodeType":"VariableDeclaration","scope":3192,"src":"3866:25:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3157,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3167,"initialValue":{"arguments":[{"expression":{"expression":{"id":3161,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"3917:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:20","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"3917:13:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:20","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3164,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"3941:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"3950:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3159,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:20"},{"condition":{"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:20","subExpression":{"arguments":[{"id":3169,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"3996:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"id":3170,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"4003:12:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3168,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"3972:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"IfStatement","src":"3967:216:20","trueBody":{"id":3190,"nodeType":"Block","src":"4018:165:20","statements":[{"expression":{"arguments":[{"id":3174,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4052:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3177,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4082:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:20","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2911,"src":"4082:13:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:20","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3180,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"4106:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3175,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:20","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3173,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"4032:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3184,"nodeType":"ExpressionStatement","src":"4032:86:20"},{"expression":{"arguments":[{"id":3186,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4152:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},{"id":3187,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"4159:12:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3185,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"4132:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2924_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3189,"nodeType":"ExpressionStatement","src":"4132:40:20"}]}}]},"documentation":{"id":3147,"nodeType":"StructuredDocumentation","src":"3466:308:20","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":3193,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:20","nodeType":"FunctionDefinition","parameters":{"id":3155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3150,"mutability":"mutable","name":"token","nameLocation":"3808:5:20","nodeType":"VariableDeclaration","scope":3193,"src":"3801:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3149,"nodeType":"UserDefinedTypeName","pathNode":{"id":3148,"name":"IERC20","nameLocations":["3801:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"3801:6:20"},"referencedDeclaration":2924,"src":"3801:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3152,"mutability":"mutable","name":"spender","nameLocation":"3823:7:20","nodeType":"VariableDeclaration","scope":3193,"src":"3815:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3151,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3154,"mutability":"mutable","name":"value","nameLocation":"3840:5:20","nodeType":"VariableDeclaration","scope":3193,"src":"3832:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3153,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:20"},"returnParameters":{"id":3156,"nodeType":"ParameterList","parameters":[],"src":"3856:0:20"},"scope":3336,"src":"3779:410:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3249,"nodeType":"Block","src":"4556:257:20","statements":[{"assignments":[3215],"declarations":[{"constant":false,"id":3215,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:20","nodeType":"VariableDeclaration","scope":3249,"src":"4566:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3220,"initialValue":{"arguments":[{"id":3218,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"4601:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3216,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"4588:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2960","typeString":"contract IERC20Permit"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:20","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2953,"src":"4588:12:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:20"},{"expression":{"arguments":[{"id":3224,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"4630:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3225,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"4637:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3226,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"4646:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3227,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"4653:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3228,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"4663:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3229,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"4666:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3230,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"4669:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3221,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"4617:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2960","typeString":"contract IERC20Permit"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:20","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":2945,"src":"4617:12:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3232,"nodeType":"ExpressionStatement","src":"4617:54:20"},{"assignments":[3234],"declarations":[{"constant":false,"id":3234,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:20","nodeType":"VariableDeclaration","scope":3249,"src":"4681:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3239,"initialValue":{"arguments":[{"id":3237,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"4715:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3235,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"4702:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2960","typeString":"contract IERC20Permit"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:20","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":2953,"src":"4702:12:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"4739:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3242,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"4753:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":3240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3248,"nodeType":"ExpressionStatement","src":"4731:75:20"}]},"documentation":{"id":3194,"nodeType":"StructuredDocumentation","src":"4195:141:20","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:20","nodeType":"FunctionDefinition","parameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3197,"mutability":"mutable","name":"token","nameLocation":"4383:5:20","nodeType":"VariableDeclaration","scope":3250,"src":"4370:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2960","typeString":"contract IERC20Permit"},"typeName":{"id":3196,"nodeType":"UserDefinedTypeName","pathNode":{"id":3195,"name":"IERC20Permit","nameLocations":["4370:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":2960,"src":"4370:12:20"},"referencedDeclaration":2960,"src":"4370:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$2960","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":3199,"mutability":"mutable","name":"owner","nameLocation":"4406:5:20","nodeType":"VariableDeclaration","scope":3250,"src":"4398:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3198,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3201,"mutability":"mutable","name":"spender","nameLocation":"4429:7:20","nodeType":"VariableDeclaration","scope":3250,"src":"4421:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3200,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3203,"mutability":"mutable","name":"value","nameLocation":"4454:5:20","nodeType":"VariableDeclaration","scope":3250,"src":"4446:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3205,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:20","nodeType":"VariableDeclaration","scope":3250,"src":"4469:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3207,"mutability":"mutable","name":"v","nameLocation":"4501:1:20","nodeType":"VariableDeclaration","scope":3250,"src":"4495:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3206,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"r","nameLocation":"4520:1:20","nodeType":"VariableDeclaration","scope":3250,"src":"4512:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"s","nameLocation":"4539:1:20","nodeType":"VariableDeclaration","scope":3250,"src":"4531:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:20"},"returnParameters":{"id":3213,"nodeType":"ParameterList","parameters":[],"src":"4556:0:20"},"scope":3336,"src":"4341:472:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3286,"nodeType":"Block","src":"5266:572:20","statements":[{"assignments":[3260],"declarations":[{"constant":false,"id":3260,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:20","nodeType":"VariableDeclaration","scope":3286,"src":"5615:23:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3259,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3269,"initialValue":{"arguments":[{"id":3266,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3256,"src":"5669:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":3267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":3263,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3254,"src":"5649:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}],"id":3262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3261,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:20","typeDescriptions":{}}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:20","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":3426,"src":"5641:27:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3271,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"5728:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:20","memberName":"length","nodeType":"MemberAccess","src":"5728:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3277,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"5765:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3278,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:20","typeDescriptions":{}}}],"id":3280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3275,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:20","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:20","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":3270,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3285,"nodeType":"ExpressionStatement","src":"5720:111:20"}]},"documentation":{"id":3251,"nodeType":"StructuredDocumentation","src":"4819:372:20","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":3287,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:20","nodeType":"FunctionDefinition","parameters":{"id":3257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3254,"mutability":"mutable","name":"token","nameLocation":"5232:5:20","nodeType":"VariableDeclaration","scope":3287,"src":"5225:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3253,"nodeType":"UserDefinedTypeName","pathNode":{"id":3252,"name":"IERC20","nameLocations":["5225:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"5225:6:20"},"referencedDeclaration":2924,"src":"5225:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3256,"mutability":"mutable","name":"data","nameLocation":"5252:4:20","nodeType":"VariableDeclaration","scope":3287,"src":"5239:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3255,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:20"},"returnParameters":{"id":3258,"nodeType":"ParameterList","parameters":[],"src":"5266:0:20"},"scope":3336,"src":"5196:642:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3334,"nodeType":"Block","src":"6428:505:20","statements":[{"assignments":[3299,3301],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"success","nameLocation":"6729:7:20","nodeType":"VariableDeclaration","scope":3334,"src":"6724:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3298,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3301,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:20","nodeType":"VariableDeclaration","scope":3334,"src":"6738:23:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3300,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3309,"initialValue":{"arguments":[{"id":3307,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"6785:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3304,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"6773:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}],"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3302,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:20","typeDescriptions":{}}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:20","memberName":"call","nodeType":"MemberAccess","src":"6765:19:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:20"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"6819:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3311,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"6831:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:20","memberName":"length","nodeType":"MemberAccess","src":"6831:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3317,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"6868:10:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":3318,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:20","typeDescriptions":{}}}],"id":3320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":3315,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:20","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:20","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3323,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":3329,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"6919:5:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}],"id":3328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3327,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:20","typeDescriptions":{}}},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3325,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"6892:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3666_$","typeString":"type(library Address)"}},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:20","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3354,"src":"6892:18:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3297,"id":3333,"nodeType":"Return","src":"6800:126:20"}]},"documentation":{"id":3288,"nodeType":"StructuredDocumentation","src":"5844:490:20","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":3335,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:20","nodeType":"FunctionDefinition","parameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"token","nameLocation":"6379:5:20","nodeType":"VariableDeclaration","scope":3335,"src":"6372:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"},"typeName":{"id":3290,"nodeType":"UserDefinedTypeName","pathNode":{"id":3289,"name":"IERC20","nameLocations":["6372:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2924,"src":"6372:6:20"},"referencedDeclaration":2924,"src":"6372:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2924","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"data","nameLocation":"6399:4:20","nodeType":"VariableDeclaration","scope":3335,"src":"6386:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3292,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:20"},"returnParameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3335,"src":"6422:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3295,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:20"},"scope":3336,"src":"6339:594:20","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3337,"src":"701:6234:20","usedErrors":[],"usedEvents":[]}],"src":"115:6821:20"},"id":20},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3666]},"id":3667,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3338,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3339,"nodeType":"StructuredDocumentation","src":"126:67:21","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3666,"linearizedBaseContracts":[3666],"name":"Address","nameLocation":"202:7:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":3353,"nodeType":"Block","src":"1478:254:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3347,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"1702:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:21","memberName":"code","nodeType":"MemberAccess","src":"1702:12:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:21","memberName":"length","nodeType":"MemberAccess","src":"1702:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3346,"id":3352,"nodeType":"Return","src":"1695:30:21"}]},"documentation":{"id":3340,"nodeType":"StructuredDocumentation","src":"216:1191:21","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3354,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:21","nodeType":"FunctionDefinition","parameters":{"id":3343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3342,"mutability":"mutable","name":"account","nameLocation":"1440:7:21","nodeType":"VariableDeclaration","scope":3354,"src":"1432:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3341,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:21"},"returnParameters":{"id":3346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3354,"src":"1472:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3344,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:21"},"scope":3666,"src":"1412:320:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3387,"nodeType":"Block","src":"2718:241:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3365,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3666","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3666","typeString":"library Address"}],"id":3364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3363,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:21","typeDescriptions":{}}},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:21","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3368,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"2761:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3362,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3372,"nodeType":"ExpressionStatement","src":"2728:73:21"},{"assignments":[3374,null],"declarations":[{"constant":false,"id":3374,"mutability":"mutable","name":"success","nameLocation":"2818:7:21","nodeType":"VariableDeclaration","scope":3387,"src":"2813:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3373,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3381,"initialValue":{"arguments":[{"hexValue":"","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3375,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"2831:9:21","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:21","memberName":"call","nodeType":"MemberAccess","src":"2831:14:21","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3377,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"2853:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:21","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:21"},{"expression":{"arguments":[{"id":3383,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"2882:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3382,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3386,"nodeType":"ExpressionStatement","src":"2874:78:21"}]},"documentation":{"id":3355,"nodeType":"StructuredDocumentation","src":"1738:904:21","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3388,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:21","nodeType":"FunctionDefinition","parameters":{"id":3360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3357,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:21","nodeType":"VariableDeclaration","scope":3388,"src":"2666:25:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3356,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3359,"mutability":"mutable","name":"amount","nameLocation":"2701:6:21","nodeType":"VariableDeclaration","scope":3388,"src":"2693:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3358,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:21"},"returnParameters":{"id":3361,"nodeType":"ParameterList","parameters":[],"src":"2718:0:21"},"scope":3666,"src":"2647:312:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3405,"nodeType":"Block","src":"3790:96:21","statements":[{"expression":{"arguments":[{"id":3399,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"3829:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3400,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"3837:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3398,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3446,3490],"referencedDeclaration":3490,"src":"3807:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3397,"id":3404,"nodeType":"Return","src":"3800:79:21"}]},"documentation":{"id":3389,"nodeType":"StructuredDocumentation","src":"2965:731:21","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3406,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:21","nodeType":"FunctionDefinition","parameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3391,"mutability":"mutable","name":"target","nameLocation":"3731:6:21","nodeType":"VariableDeclaration","scope":3406,"src":"3723:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3390,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"data","nameLocation":"3752:4:21","nodeType":"VariableDeclaration","scope":3406,"src":"3739:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3392,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:21"},"returnParameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"3776:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3395,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:21"},"scope":3666,"src":"3701:185:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3425,"nodeType":"Block","src":"4255:76:21","statements":[{"expression":{"arguments":[{"id":3419,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"4294:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3420,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"4302:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3422,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3413,"src":"4311:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3418,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3446,3490],"referencedDeclaration":3490,"src":"4272:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3417,"id":3424,"nodeType":"Return","src":"4265:59:21"}]},"documentation":{"id":3407,"nodeType":"StructuredDocumentation","src":"3892:211:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3426,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:21","nodeType":"FunctionDefinition","parameters":{"id":3414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"target","nameLocation":"4147:6:21","nodeType":"VariableDeclaration","scope":3426,"src":"4139:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"data","nameLocation":"4176:4:21","nodeType":"VariableDeclaration","scope":3426,"src":"4163:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3410,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3413,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:21","nodeType":"VariableDeclaration","scope":3426,"src":"4190:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3412,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:21"},"returnParameters":{"id":3417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3426,"src":"4241:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3415,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:21"},"scope":3666,"src":"4108:223:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3445,"nodeType":"Block","src":"4806:111:21","statements":[{"expression":{"arguments":[{"id":3439,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"4845:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3440,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"4853:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"4859:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3438,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3446,3490],"referencedDeclaration":3490,"src":"4823:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3437,"id":3444,"nodeType":"Return","src":"4816:94:21"}]},"documentation":{"id":3427,"nodeType":"StructuredDocumentation","src":"4337:351:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3446,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:21","nodeType":"FunctionDefinition","parameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"target","nameLocation":"4732:6:21","nodeType":"VariableDeclaration","scope":3446,"src":"4724:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3428,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3431,"mutability":"mutable","name":"data","nameLocation":"4753:4:21","nodeType":"VariableDeclaration","scope":3446,"src":"4740:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3430,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3433,"mutability":"mutable","name":"value","nameLocation":"4767:5:21","nodeType":"VariableDeclaration","scope":3446,"src":"4759:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3432,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:21"},"returnParameters":{"id":3437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3446,"src":"4792:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3435,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:21"},"scope":3666,"src":"4693:224:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3489,"nodeType":"Block","src":"5344:267:21","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3463,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3666","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3666","typeString":"library Address"}],"id":3462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:21","typeDescriptions":{}}},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:21","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"5387:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3460,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3470,"nodeType":"ExpressionStatement","src":"5354:81:21"},{"assignments":[3472,3474],"declarations":[{"constant":false,"id":3472,"mutability":"mutable","name":"success","nameLocation":"5451:7:21","nodeType":"VariableDeclaration","scope":3489,"src":"5446:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3471,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:21","nodeType":"VariableDeclaration","scope":3489,"src":"5460:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3473,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3481,"initialValue":{"arguments":[{"id":3479,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5513:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3475,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"5487:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:21","memberName":"call","nodeType":"MemberAccess","src":"5487:11:21","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"5506:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:21","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:21"},{"expression":{"arguments":[{"id":3483,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3449,"src":"5562:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3484,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"5570:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3485,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"5579:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3486,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"5591:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3482,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"5535:26:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3459,"id":3488,"nodeType":"Return","src":"5528:76:21"}]},"documentation":{"id":3447,"nodeType":"StructuredDocumentation","src":"4923:237:21","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3490,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:21","nodeType":"FunctionDefinition","parameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3449,"mutability":"mutable","name":"target","nameLocation":"5213:6:21","nodeType":"VariableDeclaration","scope":3490,"src":"5205:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3448,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3451,"mutability":"mutable","name":"data","nameLocation":"5242:4:21","nodeType":"VariableDeclaration","scope":3490,"src":"5229:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3450,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3453,"mutability":"mutable","name":"value","nameLocation":"5264:5:21","nodeType":"VariableDeclaration","scope":3490,"src":"5256:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3452,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3455,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:21","nodeType":"VariableDeclaration","scope":3490,"src":"5279:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3454,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:21"},"returnParameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3490,"src":"5330:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3457,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:21"},"scope":3666,"src":"5165:446:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3506,"nodeType":"Block","src":"5888:97:21","statements":[{"expression":{"arguments":[{"id":3501,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3493,"src":"5924:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3502,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5932:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3500,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3507,3536],"referencedDeclaration":3536,"src":"5905:18:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3499,"id":3505,"nodeType":"Return","src":"5898:80:21"}]},"documentation":{"id":3491,"nodeType":"StructuredDocumentation","src":"5617:166:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3507,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:21","nodeType":"FunctionDefinition","parameters":{"id":3496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"target","nameLocation":"5824:6:21","nodeType":"VariableDeclaration","scope":3507,"src":"5816:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3492,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3495,"mutability":"mutable","name":"data","nameLocation":"5845:4:21","nodeType":"VariableDeclaration","scope":3507,"src":"5832:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3494,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:21"},"returnParameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3507,"src":"5874:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3497,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:21"},"scope":3666,"src":"5788:197:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3535,"nodeType":"Block","src":"6327:168:21","statements":[{"assignments":[3520,3522],"declarations":[{"constant":false,"id":3520,"mutability":"mutable","name":"success","nameLocation":"6343:7:21","nodeType":"VariableDeclaration","scope":3535,"src":"6338:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3519,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3522,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:21","nodeType":"VariableDeclaration","scope":3535,"src":"6352:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3521,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3527,"initialValue":{"arguments":[{"id":3525,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"6397:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3523,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"6379:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:21","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:21","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:21"},{"expression":{"arguments":[{"id":3529,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"6446:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3530,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"6454:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3531,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"6463:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3532,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"6475:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3528,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"6419:26:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3518,"id":3534,"nodeType":"Return","src":"6412:76:21"}]},"documentation":{"id":3508,"nodeType":"StructuredDocumentation","src":"5991:173:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3536,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:21","nodeType":"FunctionDefinition","parameters":{"id":3515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"target","nameLocation":"6214:6:21","nodeType":"VariableDeclaration","scope":3536,"src":"6206:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3512,"mutability":"mutable","name":"data","nameLocation":"6243:4:21","nodeType":"VariableDeclaration","scope":3536,"src":"6230:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3511,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3514,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:21","nodeType":"VariableDeclaration","scope":3536,"src":"6257:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3513,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:21"},"returnParameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3536,"src":"6313:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3516,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:21"},"scope":3666,"src":"6169:326:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3552,"nodeType":"Block","src":"6771:101:21","statements":[{"expression":{"arguments":[{"id":3547,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"6809:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3548,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"6817:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3546,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3553,3582],"referencedDeclaration":3582,"src":"6788:20:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3545,"id":3551,"nodeType":"Return","src":"6781:84:21"}]},"documentation":{"id":3537,"nodeType":"StructuredDocumentation","src":"6501:168:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3553,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:21","nodeType":"FunctionDefinition","parameters":{"id":3542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"target","nameLocation":"6712:6:21","nodeType":"VariableDeclaration","scope":3553,"src":"6704:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3541,"mutability":"mutable","name":"data","nameLocation":"6733:4:21","nodeType":"VariableDeclaration","scope":3553,"src":"6720:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3540,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:21"},"returnParameters":{"id":3545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3553,"src":"6757:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3543,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:21"},"scope":3666,"src":"6674:198:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3581,"nodeType":"Block","src":"7213:170:21","statements":[{"assignments":[3566,3568],"declarations":[{"constant":false,"id":3566,"mutability":"mutable","name":"success","nameLocation":"7229:7:21","nodeType":"VariableDeclaration","scope":3581,"src":"7224:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3565,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3568,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:21","nodeType":"VariableDeclaration","scope":3581,"src":"7238:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3567,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3573,"initialValue":{"arguments":[{"id":3571,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"7285:4:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3569,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"7265:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:21","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:21","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:21"},{"expression":{"arguments":[{"id":3575,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"7334:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3576,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"7342:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3577,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"7351:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3578,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"7363:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3574,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"7307:26:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3564,"id":3580,"nodeType":"Return","src":"7300:76:21"}]},"documentation":{"id":3554,"nodeType":"StructuredDocumentation","src":"6878:175:21","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3582,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:21","nodeType":"FunctionDefinition","parameters":{"id":3561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"target","nameLocation":"7105:6:21","nodeType":"VariableDeclaration","scope":3582,"src":"7097:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3555,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3558,"mutability":"mutable","name":"data","nameLocation":"7134:4:21","nodeType":"VariableDeclaration","scope":3582,"src":"7121:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3557,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3560,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:21","nodeType":"VariableDeclaration","scope":3582,"src":"7148:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3559,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:21"},"returnParameters":{"id":3564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3582,"src":"7199:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3562,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:21"},"scope":3666,"src":"7058:325:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3620,"nodeType":"Block","src":"7865:434:21","statements":[{"condition":{"id":3596,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"7879:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3618,"nodeType":"Block","src":"8235:58:21","statements":[{"expression":{"arguments":[{"id":3614,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"8257:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3615,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"8269:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3613,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"8249:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3617,"nodeType":"ExpressionStatement","src":"8249:33:21"}]},"id":3619,"nodeType":"IfStatement","src":"7875:418:21","trueBody":{"id":3612,"nodeType":"Block","src":"7888:341:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3597,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"7906:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:21","memberName":"length","nodeType":"MemberAccess","src":"7906:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3609,"nodeType":"IfStatement","src":"7902:286:21","trueBody":{"id":3608,"nodeType":"Block","src":"7930:258:21","statements":[{"expression":{"arguments":[{"arguments":[{"id":3603,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"8132:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3602,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"8121:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3601,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3607,"nodeType":"ExpressionStatement","src":"8113:60:21"}]}},{"expression":{"id":3610,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"8208:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3595,"id":3611,"nodeType":"Return","src":"8201:17:21"}]}}]},"documentation":{"id":3583,"nodeType":"StructuredDocumentation","src":"7389:277:21","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3621,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:21","nodeType":"FunctionDefinition","parameters":{"id":3592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3585,"mutability":"mutable","name":"target","nameLocation":"7724:6:21","nodeType":"VariableDeclaration","scope":3621,"src":"7716:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3584,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"success","nameLocation":"7745:7:21","nodeType":"VariableDeclaration","scope":3621,"src":"7740:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3586,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:21","nodeType":"VariableDeclaration","scope":3621,"src":"7762:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3588,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3591,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:21","nodeType":"VariableDeclaration","scope":3621,"src":"7795:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3590,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:21"},"returnParameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3621,"src":"7851:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3593,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:21"},"scope":3666,"src":"7671:628:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3644,"nodeType":"Block","src":"8680:135:21","statements":[{"condition":{"id":3633,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"8694:7:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3642,"nodeType":"Block","src":"8751:58:21","statements":[{"expression":{"arguments":[{"id":3638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"8773:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3639,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"8785:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3637,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"8765:7:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3641,"nodeType":"ExpressionStatement","src":"8765:33:21"}]},"id":3643,"nodeType":"IfStatement","src":"8690:119:21","trueBody":{"id":3636,"nodeType":"Block","src":"8703:42:21","statements":[{"expression":{"id":3634,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"8724:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3632,"id":3635,"nodeType":"Return","src":"8717:17:21"}]}}]},"documentation":{"id":3622,"nodeType":"StructuredDocumentation","src":"8305:210:21","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3645,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:21","nodeType":"FunctionDefinition","parameters":{"id":3629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3624,"mutability":"mutable","name":"success","nameLocation":"8560:7:21","nodeType":"VariableDeclaration","scope":3645,"src":"8555:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3623,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3626,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:21","nodeType":"VariableDeclaration","scope":3645,"src":"8577:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3625,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:21","nodeType":"VariableDeclaration","scope":3645,"src":"8610:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3627,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:21"},"returnParameters":{"id":3632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3645,"src":"8666:12:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3630,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:21"},"scope":3666,"src":"8520:295:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3664,"nodeType":"Block","src":"8904:457:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3652,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"8980:10:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:21","memberName":"length","nodeType":"MemberAccess","src":"8980:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3662,"nodeType":"Block","src":"9310:45:21","statements":[{"expression":{"arguments":[{"id":3659,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"9331:12:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3658,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:21","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3661,"nodeType":"ExpressionStatement","src":"9324:20:21"}]},"id":3663,"nodeType":"IfStatement","src":"8976:379:21","trueBody":{"id":3657,"nodeType":"Block","src":"9003:301:21","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:21","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:21","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:21"},"nodeType":"YulFunctionCall","src":"9202:17:21"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:21","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:21"},"nodeType":"YulFunctionCall","src":"9243:19:21"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:21"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:21"},"nodeType":"YulFunctionCall","src":"9236:44:21"},"nodeType":"YulExpressionStatement","src":"9236:44:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3647,"isOffset":false,"isSlot":false,"src":"9208:10:21","valueSize":1},{"declaration":3647,"isOffset":false,"isSlot":false,"src":"9251:10:21","valueSize":1}],"id":3656,"nodeType":"InlineAssembly","src":"9152:142:21"}]}}]},"id":3665,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:21","nodeType":"FunctionDefinition","parameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:21","nodeType":"VariableDeclaration","scope":3665,"src":"8838:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3646,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:21","nodeType":"VariableDeclaration","scope":3665,"src":"8863:26:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3648,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:21"},"returnParameters":{"id":3651,"nodeType":"ParameterList","parameters":[],"src":"8904:0:21"},"scope":3666,"src":"8821:540:21","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3667,"src":"194:9169:21","usedErrors":[],"usedEvents":[]}],"src":"101:9263:21"},"id":21},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3696]},"id":3697,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3668,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:22"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3669,"nodeType":"StructuredDocumentation","src":"126:496:22","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3696,"linearizedBaseContracts":[3696],"name":"Context","nameLocation":"641:7:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":3677,"nodeType":"Block","src":"717:34:22","statements":[{"expression":{"expression":{"id":3674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:22","memberName":"sender","nodeType":"MemberAccess","src":"734:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3673,"id":3676,"nodeType":"Return","src":"727:17:22"}]},"id":3678,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:22","nodeType":"FunctionDefinition","parameters":{"id":3670,"nodeType":"ParameterList","parameters":[],"src":"674:2:22"},"returnParameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3678,"src":"708:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3671,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:22"},"scope":3696,"src":"655:96:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3686,"nodeType":"Block","src":"824:32:22","statements":[{"expression":{"expression":{"id":3683,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:22","memberName":"data","nodeType":"MemberAccess","src":"841:8:22","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3682,"id":3685,"nodeType":"Return","src":"834:15:22"}]},"id":3687,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:22","nodeType":"FunctionDefinition","parameters":{"id":3679,"nodeType":"ParameterList","parameters":[],"src":"774:2:22"},"returnParameters":{"id":3682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3687,"src":"808:14:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3680,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:22"},"scope":3696,"src":"757:99:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3694,"nodeType":"Block","src":"934:25:22","statements":[{"expression":{"hexValue":"30","id":3692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3691,"id":3693,"nodeType":"Return","src":"944:8:22"}]},"id":3695,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:22","nodeType":"FunctionDefinition","parameters":{"id":3688,"nodeType":"ParameterList","parameters":[],"src":"891:2:22"},"returnParameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3695,"src":"925:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3689,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:22"},"scope":3696,"src":"862:97:22","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3697,"src":"623:338:22","usedErrors":[],"usedEvents":[]}],"src":"101:861:22"},"id":22},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[5237]},"id":5238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3698,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"192:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":3699,"nodeType":"StructuredDocumentation","src":"217:709:23","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always.\n Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n all math on `uint256` and `int256` and then downcasting."},"fullyImplemented":true,"id":5237,"linearizedBaseContracts":[5237],"name":"SafeCast","nameLocation":"935:8:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":3723,"nodeType":"Block","src":"1339:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"1357:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1371:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3710,"name":"uint248","nodeType":"ElementaryTypeName","src":"1371:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":3709,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1366:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1366:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":3713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1380:3:23","memberName":"max","nodeType":"MemberAccess","src":"1366:17:23","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1357:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1385:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":3707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1349:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3717,"nodeType":"ExpressionStatement","src":"1349:78:23"},{"expression":{"arguments":[{"id":3720,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"1452:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1444:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":3718,"name":"uint248","nodeType":"ElementaryTypeName","src":"1444:7:23","typeDescriptions":{}}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1444:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":3706,"id":3722,"nodeType":"Return","src":"1437:21:23"}]},"documentation":{"id":3700,"nodeType":"StructuredDocumentation","src":"950:318:23","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"id":3724,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1282:9:23","nodeType":"FunctionDefinition","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"value","nameLocation":"1300:5:23","nodeType":"VariableDeclaration","scope":3724,"src":"1292:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1291:15:23"},"returnParameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"1330:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":3704,"name":"uint248","nodeType":"ElementaryTypeName","src":"1330:7:23","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1329:9:23"},"scope":5237,"src":"1273:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3748,"nodeType":"Block","src":"1860:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"1878:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1892:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3735,"name":"uint240","nodeType":"ElementaryTypeName","src":"1892:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":3734,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1887:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1887:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1901:3:23","memberName":"max","nodeType":"MemberAccess","src":"1887:17:23","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"1878:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":3740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":3732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1870:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1870:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3742,"nodeType":"ExpressionStatement","src":"1870:78:23"},{"expression":{"arguments":[{"id":3745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"1973:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1965:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":3743,"name":"uint240","nodeType":"ElementaryTypeName","src":"1965:7:23","typeDescriptions":{}}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1965:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":3731,"id":3747,"nodeType":"Return","src":"1958:21:23"}]},"documentation":{"id":3725,"nodeType":"StructuredDocumentation","src":"1471:318:23","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"id":3749,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"1803:9:23","nodeType":"FunctionDefinition","parameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"value","nameLocation":"1821:5:23","nodeType":"VariableDeclaration","scope":3749,"src":"1813:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1812:15:23"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3749,"src":"1851:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":3729,"name":"uint240","nodeType":"ElementaryTypeName","src":"1851:7:23","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"1850:9:23"},"scope":5237,"src":"1794:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3773,"nodeType":"Block","src":"2381:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"2399:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2413:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3760,"name":"uint232","nodeType":"ElementaryTypeName","src":"2413:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":3759,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2408:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2408:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2422:3:23","memberName":"max","nodeType":"MemberAccess","src":"2408:17:23","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2399:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":3765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2427:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":3757,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2391:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2391:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3767,"nodeType":"ExpressionStatement","src":"2391:78:23"},{"expression":{"arguments":[{"id":3770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"2494:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2486:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":3768,"name":"uint232","nodeType":"ElementaryTypeName","src":"2486:7:23","typeDescriptions":{}}},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2486:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":3756,"id":3772,"nodeType":"Return","src":"2479:21:23"}]},"documentation":{"id":3750,"nodeType":"StructuredDocumentation","src":"1992:318:23","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"id":3774,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2324:9:23","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"value","nameLocation":"2342:5:23","nodeType":"VariableDeclaration","scope":3774,"src":"2334:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2333:15:23"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3774,"src":"2372:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":3754,"name":"uint232","nodeType":"ElementaryTypeName","src":"2372:7:23","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2371:9:23"},"scope":5237,"src":"2315:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3798,"nodeType":"Block","src":"2902:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"2920:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2934:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3785,"name":"uint224","nodeType":"ElementaryTypeName","src":"2934:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":3784,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2929:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2929:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2943:3:23","memberName":"max","nodeType":"MemberAccess","src":"2929:17:23","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"2920:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":3790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2948:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":3782,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2912:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2912:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3792,"nodeType":"ExpressionStatement","src":"2912:78:23"},{"expression":{"arguments":[{"id":3795,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3777,"src":"3015:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3007:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":3793,"name":"uint224","nodeType":"ElementaryTypeName","src":"3007:7:23","typeDescriptions":{}}},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3007:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":3781,"id":3797,"nodeType":"Return","src":"3000:21:23"}]},"documentation":{"id":3775,"nodeType":"StructuredDocumentation","src":"2513:318:23","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.2._"},"id":3799,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"2845:9:23","nodeType":"FunctionDefinition","parameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"mutability":"mutable","name":"value","nameLocation":"2863:5:23","nodeType":"VariableDeclaration","scope":3799,"src":"2855:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3776,"name":"uint256","nodeType":"ElementaryTypeName","src":"2855:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2854:15:23"},"returnParameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3799,"src":"2893:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":3779,"name":"uint224","nodeType":"ElementaryTypeName","src":"2893:7:23","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"2892:9:23"},"scope":5237,"src":"2836:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3823,"nodeType":"Block","src":"3423:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"3441:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3455:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3810,"name":"uint216","nodeType":"ElementaryTypeName","src":"3455:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":3809,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3450:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3450:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":3813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3464:3:23","memberName":"max","nodeType":"MemberAccess","src":"3450:17:23","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3441:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":3815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3469:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":3807,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3433:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3433:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3817,"nodeType":"ExpressionStatement","src":"3433:78:23"},{"expression":{"arguments":[{"id":3820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3802,"src":"3536:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3528:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":3818,"name":"uint216","nodeType":"ElementaryTypeName","src":"3528:7:23","typeDescriptions":{}}},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3528:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":3806,"id":3822,"nodeType":"Return","src":"3521:21:23"}]},"documentation":{"id":3800,"nodeType":"StructuredDocumentation","src":"3034:318:23","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"id":3824,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3366:9:23","nodeType":"FunctionDefinition","parameters":{"id":3803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3802,"mutability":"mutable","name":"value","nameLocation":"3384:5:23","nodeType":"VariableDeclaration","scope":3824,"src":"3376:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3801,"name":"uint256","nodeType":"ElementaryTypeName","src":"3376:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3375:15:23"},"returnParameters":{"id":3806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3824,"src":"3414:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":3804,"name":"uint216","nodeType":"ElementaryTypeName","src":"3414:7:23","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3413:9:23"},"scope":5237,"src":"3357:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3848,"nodeType":"Block","src":"3944:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"3962:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3976:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3835,"name":"uint208","nodeType":"ElementaryTypeName","src":"3976:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":3834,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3971:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3971:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3985:3:23","memberName":"max","nodeType":"MemberAccess","src":"3971:17:23","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"3962:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3990:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":3832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3954:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3954:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3842,"nodeType":"ExpressionStatement","src":"3954:78:23"},{"expression":{"arguments":[{"id":3845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"4057:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4049:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":3843,"name":"uint208","nodeType":"ElementaryTypeName","src":"4049:7:23","typeDescriptions":{}}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4049:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":3831,"id":3847,"nodeType":"Return","src":"4042:21:23"}]},"documentation":{"id":3825,"nodeType":"StructuredDocumentation","src":"3555:318:23","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"id":3849,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"3887:9:23","nodeType":"FunctionDefinition","parameters":{"id":3828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3827,"mutability":"mutable","name":"value","nameLocation":"3905:5:23","nodeType":"VariableDeclaration","scope":3849,"src":"3897:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3826,"name":"uint256","nodeType":"ElementaryTypeName","src":"3897:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3896:15:23"},"returnParameters":{"id":3831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3849,"src":"3935:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":3829,"name":"uint208","nodeType":"ElementaryTypeName","src":"3935:7:23","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"3934:9:23"},"scope":5237,"src":"3878:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3873,"nodeType":"Block","src":"4465:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4483:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4497:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3860,"name":"uint200","nodeType":"ElementaryTypeName","src":"4497:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":3859,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4492:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":3863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4506:3:23","memberName":"max","nodeType":"MemberAccess","src":"4492:17:23","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4483:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4511:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":3857,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4475:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4475:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3867,"nodeType":"ExpressionStatement","src":"4475:78:23"},{"expression":{"arguments":[{"id":3870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"4578:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4570:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":3868,"name":"uint200","nodeType":"ElementaryTypeName","src":"4570:7:23","typeDescriptions":{}}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4570:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":3856,"id":3872,"nodeType":"Return","src":"4563:21:23"}]},"documentation":{"id":3850,"nodeType":"StructuredDocumentation","src":"4076:318:23","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"id":3874,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4408:9:23","nodeType":"FunctionDefinition","parameters":{"id":3853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3852,"mutability":"mutable","name":"value","nameLocation":"4426:5:23","nodeType":"VariableDeclaration","scope":3874,"src":"4418:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"4418:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4417:15:23"},"returnParameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3874,"src":"4456:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":3854,"name":"uint200","nodeType":"ElementaryTypeName","src":"4456:7:23","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4455:9:23"},"scope":5237,"src":"4399:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3898,"nodeType":"Block","src":"4986:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"5004:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5018:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3885,"name":"uint192","nodeType":"ElementaryTypeName","src":"5018:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":3884,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5013:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5013:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5027:3:23","memberName":"max","nodeType":"MemberAccess","src":"5013:17:23","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5004:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5032:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":3882,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4996:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3892,"nodeType":"ExpressionStatement","src":"4996:78:23"},{"expression":{"arguments":[{"id":3895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"5099:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5091:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":3893,"name":"uint192","nodeType":"ElementaryTypeName","src":"5091:7:23","typeDescriptions":{}}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":3881,"id":3897,"nodeType":"Return","src":"5084:21:23"}]},"documentation":{"id":3875,"nodeType":"StructuredDocumentation","src":"4597:318:23","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"id":3899,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"4929:9:23","nodeType":"FunctionDefinition","parameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"value","nameLocation":"4947:5:23","nodeType":"VariableDeclaration","scope":3899,"src":"4939:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3876,"name":"uint256","nodeType":"ElementaryTypeName","src":"4939:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4938:15:23"},"returnParameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3899,"src":"4977:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3879,"name":"uint192","nodeType":"ElementaryTypeName","src":"4977:7:23","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"4976:9:23"},"scope":5237,"src":"4920:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3923,"nodeType":"Block","src":"5507:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"5525:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5539:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3910,"name":"uint184","nodeType":"ElementaryTypeName","src":"5539:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":3909,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5534:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5534:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":3913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5548:3:23","memberName":"max","nodeType":"MemberAccess","src":"5534:17:23","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5525:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":3915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5553:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":3907,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5517:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5517:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3917,"nodeType":"ExpressionStatement","src":"5517:78:23"},{"expression":{"arguments":[{"id":3920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"5620:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5612:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":3918,"name":"uint184","nodeType":"ElementaryTypeName","src":"5612:7:23","typeDescriptions":{}}},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":3906,"id":3922,"nodeType":"Return","src":"5605:21:23"}]},"documentation":{"id":3900,"nodeType":"StructuredDocumentation","src":"5118:318:23","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"id":3924,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5450:9:23","nodeType":"FunctionDefinition","parameters":{"id":3903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"value","nameLocation":"5468:5:23","nodeType":"VariableDeclaration","scope":3924,"src":"5460:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"5460:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5459:15:23"},"returnParameters":{"id":3906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3924,"src":"5498:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":3904,"name":"uint184","nodeType":"ElementaryTypeName","src":"5498:7:23","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5497:9:23"},"scope":5237,"src":"5441:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3948,"nodeType":"Block","src":"6028:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6046:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6060:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3935,"name":"uint176","nodeType":"ElementaryTypeName","src":"6060:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":3934,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6055:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6055:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":3938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6069:3:23","memberName":"max","nodeType":"MemberAccess","src":"6055:17:23","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6046:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":3940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6074:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":3932,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6038:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3942,"nodeType":"ExpressionStatement","src":"6038:78:23"},{"expression":{"arguments":[{"id":3945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6141:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":3943,"name":"uint176","nodeType":"ElementaryTypeName","src":"6133:7:23","typeDescriptions":{}}},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":3931,"id":3947,"nodeType":"Return","src":"6126:21:23"}]},"documentation":{"id":3925,"nodeType":"StructuredDocumentation","src":"5639:318:23","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"id":3949,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"5971:9:23","nodeType":"FunctionDefinition","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"mutability":"mutable","name":"value","nameLocation":"5989:5:23","nodeType":"VariableDeclaration","scope":3949,"src":"5981:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3926,"name":"uint256","nodeType":"ElementaryTypeName","src":"5981:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5980:15:23"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3949,"src":"6019:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":3929,"name":"uint176","nodeType":"ElementaryTypeName","src":"6019:7:23","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6018:9:23"},"scope":5237,"src":"5962:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3973,"nodeType":"Block","src":"6549:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"6567:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6581:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3960,"name":"uint168","nodeType":"ElementaryTypeName","src":"6581:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":3959,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6576:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6576:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6590:3:23","memberName":"max","nodeType":"MemberAccess","src":"6576:17:23","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6567:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6595:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":3957,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6559:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6559:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3967,"nodeType":"ExpressionStatement","src":"6559:78:23"},{"expression":{"arguments":[{"id":3970,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"6662:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6654:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":3968,"name":"uint168","nodeType":"ElementaryTypeName","src":"6654:7:23","typeDescriptions":{}}},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6654:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":3956,"id":3972,"nodeType":"Return","src":"6647:21:23"}]},"documentation":{"id":3950,"nodeType":"StructuredDocumentation","src":"6160:318:23","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"id":3974,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6492:9:23","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"value","nameLocation":"6510:5:23","nodeType":"VariableDeclaration","scope":3974,"src":"6502:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3951,"name":"uint256","nodeType":"ElementaryTypeName","src":"6502:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6501:15:23"},"returnParameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3974,"src":"6540:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":3954,"name":"uint168","nodeType":"ElementaryTypeName","src":"6540:7:23","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6539:9:23"},"scope":5237,"src":"6483:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3998,"nodeType":"Block","src":"7070:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"7088:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":3986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7102:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3985,"name":"uint160","nodeType":"ElementaryTypeName","src":"7102:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":3984,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7097:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7097:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7111:3:23","memberName":"max","nodeType":"MemberAccess","src":"7097:17:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7088:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":3990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7116:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":3982,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7080:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7080:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3992,"nodeType":"ExpressionStatement","src":"7080:78:23"},{"expression":{"arguments":[{"id":3995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"7183:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7175:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3993,"name":"uint160","nodeType":"ElementaryTypeName","src":"7175:7:23","typeDescriptions":{}}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7175:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":3981,"id":3997,"nodeType":"Return","src":"7168:21:23"}]},"documentation":{"id":3975,"nodeType":"StructuredDocumentation","src":"6681:318:23","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"id":3999,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7013:9:23","nodeType":"FunctionDefinition","parameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3977,"mutability":"mutable","name":"value","nameLocation":"7031:5:23","nodeType":"VariableDeclaration","scope":3999,"src":"7023:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"7023:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7022:15:23"},"returnParameters":{"id":3981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3999,"src":"7061:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":3979,"name":"uint160","nodeType":"ElementaryTypeName","src":"7061:7:23","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7060:9:23"},"scope":5237,"src":"7004:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4023,"nodeType":"Block","src":"7591:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7609:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7623:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4010,"name":"uint152","nodeType":"ElementaryTypeName","src":"7623:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":4009,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7618:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7618:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":4013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7632:3:23","memberName":"max","nodeType":"MemberAccess","src":"7618:17:23","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7609:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7637:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":4007,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7601:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7601:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4017,"nodeType":"ExpressionStatement","src":"7601:78:23"},{"expression":{"arguments":[{"id":4020,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"7704:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7696:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":4018,"name":"uint152","nodeType":"ElementaryTypeName","src":"7696:7:23","typeDescriptions":{}}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7696:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":4006,"id":4022,"nodeType":"Return","src":"7689:21:23"}]},"documentation":{"id":4000,"nodeType":"StructuredDocumentation","src":"7202:318:23","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"id":4024,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7534:9:23","nodeType":"FunctionDefinition","parameters":{"id":4003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4002,"mutability":"mutable","name":"value","nameLocation":"7552:5:23","nodeType":"VariableDeclaration","scope":4024,"src":"7544:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4001,"name":"uint256","nodeType":"ElementaryTypeName","src":"7544:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7543:15:23"},"returnParameters":{"id":4006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4024,"src":"7582:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":4004,"name":"uint152","nodeType":"ElementaryTypeName","src":"7582:7:23","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7581:9:23"},"scope":5237,"src":"7525:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4048,"nodeType":"Block","src":"8112:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4033,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"8130:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8144:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4035,"name":"uint144","nodeType":"ElementaryTypeName","src":"8144:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":4034,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8139:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8139:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":4038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8153:3:23","memberName":"max","nodeType":"MemberAccess","src":"8139:17:23","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8130:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8158:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":4032,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8122:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8122:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4042,"nodeType":"ExpressionStatement","src":"8122:78:23"},{"expression":{"arguments":[{"id":4045,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"8225:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8217:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":4043,"name":"uint144","nodeType":"ElementaryTypeName","src":"8217:7:23","typeDescriptions":{}}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8217:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":4031,"id":4047,"nodeType":"Return","src":"8210:21:23"}]},"documentation":{"id":4025,"nodeType":"StructuredDocumentation","src":"7723:318:23","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"id":4049,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8055:9:23","nodeType":"FunctionDefinition","parameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4027,"mutability":"mutable","name":"value","nameLocation":"8073:5:23","nodeType":"VariableDeclaration","scope":4049,"src":"8065:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4026,"name":"uint256","nodeType":"ElementaryTypeName","src":"8065:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8064:15:23"},"returnParameters":{"id":4031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4049,"src":"8103:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":4029,"name":"uint144","nodeType":"ElementaryTypeName","src":"8103:7:23","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8102:9:23"},"scope":5237,"src":"8046:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4073,"nodeType":"Block","src":"8633:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"8651:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8665:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4060,"name":"uint136","nodeType":"ElementaryTypeName","src":"8665:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":4059,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8660:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8660:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8674:3:23","memberName":"max","nodeType":"MemberAccess","src":"8660:17:23","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8651:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":4065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8679:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":4057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8643:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4067,"nodeType":"ExpressionStatement","src":"8643:78:23"},{"expression":{"arguments":[{"id":4070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"8746:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8738:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":4068,"name":"uint136","nodeType":"ElementaryTypeName","src":"8738:7:23","typeDescriptions":{}}},"id":4071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8738:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":4056,"id":4072,"nodeType":"Return","src":"8731:21:23"}]},"documentation":{"id":4050,"nodeType":"StructuredDocumentation","src":"8244:318:23","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"id":4074,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8576:9:23","nodeType":"FunctionDefinition","parameters":{"id":4053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4052,"mutability":"mutable","name":"value","nameLocation":"8594:5:23","nodeType":"VariableDeclaration","scope":4074,"src":"8586:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4051,"name":"uint256","nodeType":"ElementaryTypeName","src":"8586:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8585:15:23"},"returnParameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4074,"src":"8624:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":4054,"name":"uint136","nodeType":"ElementaryTypeName","src":"8624:7:23","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8623:9:23"},"scope":5237,"src":"8567:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4098,"nodeType":"Block","src":"9154:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"9172:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9186:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4085,"name":"uint128","nodeType":"ElementaryTypeName","src":"9186:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4084,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9181:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9181:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9195:3:23","memberName":"max","nodeType":"MemberAccess","src":"9181:17:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9172:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9200:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":4082,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9164:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9164:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4092,"nodeType":"ExpressionStatement","src":"9164:78:23"},{"expression":{"arguments":[{"id":4095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"9267:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9259:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4093,"name":"uint128","nodeType":"ElementaryTypeName","src":"9259:7:23","typeDescriptions":{}}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9259:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":4081,"id":4097,"nodeType":"Return","src":"9252:21:23"}]},"documentation":{"id":4075,"nodeType":"StructuredDocumentation","src":"8765:318:23","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v2.5._"},"id":4099,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9097:9:23","nodeType":"FunctionDefinition","parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"mutability":"mutable","name":"value","nameLocation":"9115:5:23","nodeType":"VariableDeclaration","scope":4099,"src":"9107:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"9107:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9106:15:23"},"returnParameters":{"id":4081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4099,"src":"9145:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4079,"name":"uint128","nodeType":"ElementaryTypeName","src":"9145:7:23","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9144:9:23"},"scope":5237,"src":"9088:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4123,"nodeType":"Block","src":"9675:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"9693:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9707:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4110,"name":"uint120","nodeType":"ElementaryTypeName","src":"9707:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":4109,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9702:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9702:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9716:3:23","memberName":"max","nodeType":"MemberAccess","src":"9702:17:23","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9693:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9721:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":4107,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9685:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9685:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4117,"nodeType":"ExpressionStatement","src":"9685:78:23"},{"expression":{"arguments":[{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"9788:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9780:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":4118,"name":"uint120","nodeType":"ElementaryTypeName","src":"9780:7:23","typeDescriptions":{}}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9780:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":4106,"id":4122,"nodeType":"Return","src":"9773:21:23"}]},"documentation":{"id":4100,"nodeType":"StructuredDocumentation","src":"9286:318:23","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"id":4124,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9618:9:23","nodeType":"FunctionDefinition","parameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"value","nameLocation":"9636:5:23","nodeType":"VariableDeclaration","scope":4124,"src":"9628:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4101,"name":"uint256","nodeType":"ElementaryTypeName","src":"9628:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9627:15:23"},"returnParameters":{"id":4106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4124,"src":"9666:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":4104,"name":"uint120","nodeType":"ElementaryTypeName","src":"9666:7:23","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9665:9:23"},"scope":5237,"src":"9609:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4148,"nodeType":"Block","src":"10196:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"10214:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10228:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4135,"name":"uint112","nodeType":"ElementaryTypeName","src":"10228:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":4134,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10223:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10223:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10237:3:23","memberName":"max","nodeType":"MemberAccess","src":"10223:17:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10214:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":4140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10242:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":4132,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10206:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10206:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4142,"nodeType":"ExpressionStatement","src":"10206:78:23"},{"expression":{"arguments":[{"id":4145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"10309:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10301:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":4143,"name":"uint112","nodeType":"ElementaryTypeName","src":"10301:7:23","typeDescriptions":{}}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10301:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":4131,"id":4147,"nodeType":"Return","src":"10294:21:23"}]},"documentation":{"id":4125,"nodeType":"StructuredDocumentation","src":"9807:318:23","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"id":4149,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10139:9:23","nodeType":"FunctionDefinition","parameters":{"id":4128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4127,"mutability":"mutable","name":"value","nameLocation":"10157:5:23","nodeType":"VariableDeclaration","scope":4149,"src":"10149:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4126,"name":"uint256","nodeType":"ElementaryTypeName","src":"10149:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10148:15:23"},"returnParameters":{"id":4131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4149,"src":"10187:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":4129,"name":"uint112","nodeType":"ElementaryTypeName","src":"10187:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10186:9:23"},"scope":5237,"src":"10130:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4173,"nodeType":"Block","src":"10717:126:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10735:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10749:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4160,"name":"uint104","nodeType":"ElementaryTypeName","src":"10749:7:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":4159,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10744:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10744:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10758:3:23","memberName":"max","nodeType":"MemberAccess","src":"10744:17:23","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10735:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":4165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10763:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":4157,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10727:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10727:78:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4167,"nodeType":"ExpressionStatement","src":"10727:78:23"},{"expression":{"arguments":[{"id":4170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"10830:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10822:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":4168,"name":"uint104","nodeType":"ElementaryTypeName","src":"10822:7:23","typeDescriptions":{}}},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10822:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":4156,"id":4172,"nodeType":"Return","src":"10815:21:23"}]},"documentation":{"id":4150,"nodeType":"StructuredDocumentation","src":"10328:318:23","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"id":4174,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10660:9:23","nodeType":"FunctionDefinition","parameters":{"id":4153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"value","nameLocation":"10678:5:23","nodeType":"VariableDeclaration","scope":4174,"src":"10670:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4151,"name":"uint256","nodeType":"ElementaryTypeName","src":"10670:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10669:15:23"},"returnParameters":{"id":4156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4174,"src":"10708:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":4154,"name":"uint104","nodeType":"ElementaryTypeName","src":"10708:7:23","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10707:9:23"},"scope":5237,"src":"10651:192:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4198,"nodeType":"Block","src":"11232:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"11250:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11264:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4185,"name":"uint96","nodeType":"ElementaryTypeName","src":"11264:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":4184,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11259:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11259:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":4188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11272:3:23","memberName":"max","nodeType":"MemberAccess","src":"11259:16:23","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11250:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":4190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11277:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":4182,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11242:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11242:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4192,"nodeType":"ExpressionStatement","src":"11242:76:23"},{"expression":{"arguments":[{"id":4195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"11342:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11335:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":4193,"name":"uint96","nodeType":"ElementaryTypeName","src":"11335:6:23","typeDescriptions":{}}},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11335:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":4181,"id":4197,"nodeType":"Return","src":"11328:20:23"}]},"documentation":{"id":4175,"nodeType":"StructuredDocumentation","src":"10849:314:23","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.2._"},"id":4199,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11177:8:23","nodeType":"FunctionDefinition","parameters":{"id":4178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4177,"mutability":"mutable","name":"value","nameLocation":"11194:5:23","nodeType":"VariableDeclaration","scope":4199,"src":"11186:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4176,"name":"uint256","nodeType":"ElementaryTypeName","src":"11186:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11185:15:23"},"returnParameters":{"id":4181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4199,"src":"11224:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4179,"name":"uint96","nodeType":"ElementaryTypeName","src":"11224:6:23","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11223:8:23"},"scope":5237,"src":"11168:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4223,"nodeType":"Block","src":"11744:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"11762:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11776:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4210,"name":"uint88","nodeType":"ElementaryTypeName","src":"11776:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":4209,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11771:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11771:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11784:3:23","memberName":"max","nodeType":"MemberAccess","src":"11771:16:23","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11762:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11789:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":4207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11754:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11754:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4217,"nodeType":"ExpressionStatement","src":"11754:76:23"},{"expression":{"arguments":[{"id":4220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"11854:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11847:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":4218,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:23","typeDescriptions":{}}},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11847:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":4206,"id":4222,"nodeType":"Return","src":"11840:20:23"}]},"documentation":{"id":4200,"nodeType":"StructuredDocumentation","src":"11361:314:23","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"id":4224,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11689:8:23","nodeType":"FunctionDefinition","parameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4202,"mutability":"mutable","name":"value","nameLocation":"11706:5:23","nodeType":"VariableDeclaration","scope":4224,"src":"11698:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4201,"name":"uint256","nodeType":"ElementaryTypeName","src":"11698:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11697:15:23"},"returnParameters":{"id":4206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4224,"src":"11736:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":4204,"name":"uint88","nodeType":"ElementaryTypeName","src":"11736:6:23","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11735:8:23"},"scope":5237,"src":"11680:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4248,"nodeType":"Block","src":"12256:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"12274:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12288:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4235,"name":"uint80","nodeType":"ElementaryTypeName","src":"12288:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":4234,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12283:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12283:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12296:3:23","memberName":"max","nodeType":"MemberAccess","src":"12283:16:23","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12274:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12301:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":4232,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12266:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12266:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4242,"nodeType":"ExpressionStatement","src":"12266:76:23"},{"expression":{"arguments":[{"id":4245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"12366:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12359:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":4243,"name":"uint80","nodeType":"ElementaryTypeName","src":"12359:6:23","typeDescriptions":{}}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12359:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":4231,"id":4247,"nodeType":"Return","src":"12352:20:23"}]},"documentation":{"id":4225,"nodeType":"StructuredDocumentation","src":"11873:314:23","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"id":4249,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12201:8:23","nodeType":"FunctionDefinition","parameters":{"id":4228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4227,"mutability":"mutable","name":"value","nameLocation":"12218:5:23","nodeType":"VariableDeclaration","scope":4249,"src":"12210:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4226,"name":"uint256","nodeType":"ElementaryTypeName","src":"12210:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:15:23"},"returnParameters":{"id":4231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4249,"src":"12248:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":4229,"name":"uint80","nodeType":"ElementaryTypeName","src":"12248:6:23","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12247:8:23"},"scope":5237,"src":"12192:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4273,"nodeType":"Block","src":"12768:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"12786:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12800:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4260,"name":"uint72","nodeType":"ElementaryTypeName","src":"12800:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":4259,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12795:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12795:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12808:3:23","memberName":"max","nodeType":"MemberAccess","src":"12795:16:23","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12786:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":4265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12813:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":4257,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12778:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12778:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4267,"nodeType":"ExpressionStatement","src":"12778:76:23"},{"expression":{"arguments":[{"id":4270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"12878:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12871:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":4268,"name":"uint72","nodeType":"ElementaryTypeName","src":"12871:6:23","typeDescriptions":{}}},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12871:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":4256,"id":4272,"nodeType":"Return","src":"12864:20:23"}]},"documentation":{"id":4250,"nodeType":"StructuredDocumentation","src":"12385:314:23","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"id":4274,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12713:8:23","nodeType":"FunctionDefinition","parameters":{"id":4253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4252,"mutability":"mutable","name":"value","nameLocation":"12730:5:23","nodeType":"VariableDeclaration","scope":4274,"src":"12722:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4251,"name":"uint256","nodeType":"ElementaryTypeName","src":"12722:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12721:15:23"},"returnParameters":{"id":4256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4274,"src":"12760:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":4254,"name":"uint72","nodeType":"ElementaryTypeName","src":"12760:6:23","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12759:8:23"},"scope":5237,"src":"12704:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4298,"nodeType":"Block","src":"13280:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"13298:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13312:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4285,"name":"uint64","nodeType":"ElementaryTypeName","src":"13312:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4284,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13307:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13307:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13320:3:23","memberName":"max","nodeType":"MemberAccess","src":"13307:16:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13298:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13325:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":4282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13290:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13290:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4292,"nodeType":"ExpressionStatement","src":"13290:76:23"},{"expression":{"arguments":[{"id":4295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4277,"src":"13390:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13383:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4293,"name":"uint64","nodeType":"ElementaryTypeName","src":"13383:6:23","typeDescriptions":{}}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13383:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":4281,"id":4297,"nodeType":"Return","src":"13376:20:23"}]},"documentation":{"id":4275,"nodeType":"StructuredDocumentation","src":"12897:314:23","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v2.5._"},"id":4299,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13225:8:23","nodeType":"FunctionDefinition","parameters":{"id":4278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4277,"mutability":"mutable","name":"value","nameLocation":"13242:5:23","nodeType":"VariableDeclaration","scope":4299,"src":"13234:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4276,"name":"uint256","nodeType":"ElementaryTypeName","src":"13234:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13233:15:23"},"returnParameters":{"id":4281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4299,"src":"13272:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4279,"name":"uint64","nodeType":"ElementaryTypeName","src":"13272:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13271:8:23"},"scope":5237,"src":"13216:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4323,"nodeType":"Block","src":"13792:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4302,"src":"13810:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13824:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4310,"name":"uint56","nodeType":"ElementaryTypeName","src":"13824:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":4309,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13819:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13819:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":4313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13832:3:23","memberName":"max","nodeType":"MemberAccess","src":"13819:16:23","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13810:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":4315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13837:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":4307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13802:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13802:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4317,"nodeType":"ExpressionStatement","src":"13802:76:23"},{"expression":{"arguments":[{"id":4320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4302,"src":"13902:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13895:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":4318,"name":"uint56","nodeType":"ElementaryTypeName","src":"13895:6:23","typeDescriptions":{}}},"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13895:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":4306,"id":4322,"nodeType":"Return","src":"13888:20:23"}]},"documentation":{"id":4300,"nodeType":"StructuredDocumentation","src":"13409:314:23","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"id":4324,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13737:8:23","nodeType":"FunctionDefinition","parameters":{"id":4303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4302,"mutability":"mutable","name":"value","nameLocation":"13754:5:23","nodeType":"VariableDeclaration","scope":4324,"src":"13746:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4301,"name":"uint256","nodeType":"ElementaryTypeName","src":"13746:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13745:15:23"},"returnParameters":{"id":4306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4324,"src":"13784:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":4304,"name":"uint56","nodeType":"ElementaryTypeName","src":"13784:6:23","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13783:8:23"},"scope":5237,"src":"13728:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4348,"nodeType":"Block","src":"14304:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4327,"src":"14322:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14336:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4335,"name":"uint48","nodeType":"ElementaryTypeName","src":"14336:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":4334,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14331:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14331:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14344:3:23","memberName":"max","nodeType":"MemberAccess","src":"14331:16:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14322:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":4340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14349:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":4332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14314:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14314:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4342,"nodeType":"ExpressionStatement","src":"14314:76:23"},{"expression":{"arguments":[{"id":4345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4327,"src":"14414:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14407:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4343,"name":"uint48","nodeType":"ElementaryTypeName","src":"14407:6:23","typeDescriptions":{}}},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14407:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":4331,"id":4347,"nodeType":"Return","src":"14400:20:23"}]},"documentation":{"id":4325,"nodeType":"StructuredDocumentation","src":"13921:314:23","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"id":4349,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14249:8:23","nodeType":"FunctionDefinition","parameters":{"id":4328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4327,"mutability":"mutable","name":"value","nameLocation":"14266:5:23","nodeType":"VariableDeclaration","scope":4349,"src":"14258:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4326,"name":"uint256","nodeType":"ElementaryTypeName","src":"14258:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14257:15:23"},"returnParameters":{"id":4331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4349,"src":"14296:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4329,"name":"uint48","nodeType":"ElementaryTypeName","src":"14296:6:23","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14295:8:23"},"scope":5237,"src":"14240:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4373,"nodeType":"Block","src":"14816:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"14834:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14848:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4360,"name":"uint40","nodeType":"ElementaryTypeName","src":"14848:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":4359,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14843:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14843:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":4363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14856:3:23","memberName":"max","nodeType":"MemberAccess","src":"14843:16:23","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14834:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14861:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":4357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14826:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14826:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4367,"nodeType":"ExpressionStatement","src":"14826:76:23"},{"expression":{"arguments":[{"id":4370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4352,"src":"14926:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14919:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":4368,"name":"uint40","nodeType":"ElementaryTypeName","src":"14919:6:23","typeDescriptions":{}}},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14919:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":4356,"id":4372,"nodeType":"Return","src":"14912:20:23"}]},"documentation":{"id":4350,"nodeType":"StructuredDocumentation","src":"14433:314:23","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"id":4374,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14761:8:23","nodeType":"FunctionDefinition","parameters":{"id":4353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"mutability":"mutable","name":"value","nameLocation":"14778:5:23","nodeType":"VariableDeclaration","scope":4374,"src":"14770:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4351,"name":"uint256","nodeType":"ElementaryTypeName","src":"14770:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14769:15:23"},"returnParameters":{"id":4356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4374,"src":"14808:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":4354,"name":"uint40","nodeType":"ElementaryTypeName","src":"14808:6:23","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14807:8:23"},"scope":5237,"src":"14752:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4398,"nodeType":"Block","src":"15328:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"15346:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15360:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4385,"name":"uint32","nodeType":"ElementaryTypeName","src":"15360:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4384,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15355:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15355:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15368:3:23","memberName":"max","nodeType":"MemberAccess","src":"15355:16:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15346:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":4390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15373:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":4382,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15338:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15338:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4392,"nodeType":"ExpressionStatement","src":"15338:76:23"},{"expression":{"arguments":[{"id":4395,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4377,"src":"15438:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15431:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4393,"name":"uint32","nodeType":"ElementaryTypeName","src":"15431:6:23","typeDescriptions":{}}},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15431:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":4381,"id":4397,"nodeType":"Return","src":"15424:20:23"}]},"documentation":{"id":4375,"nodeType":"StructuredDocumentation","src":"14945:314:23","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v2.5._"},"id":4399,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15273:8:23","nodeType":"FunctionDefinition","parameters":{"id":4378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4377,"mutability":"mutable","name":"value","nameLocation":"15290:5:23","nodeType":"VariableDeclaration","scope":4399,"src":"15282:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4376,"name":"uint256","nodeType":"ElementaryTypeName","src":"15282:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15281:15:23"},"returnParameters":{"id":4381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4399,"src":"15320:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4379,"name":"uint32","nodeType":"ElementaryTypeName","src":"15320:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15319:8:23"},"scope":5237,"src":"15264:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4423,"nodeType":"Block","src":"15840:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4402,"src":"15858:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15872:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4410,"name":"uint24","nodeType":"ElementaryTypeName","src":"15872:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":4409,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15867:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15867:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15880:3:23","memberName":"max","nodeType":"MemberAccess","src":"15867:16:23","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15858:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":4415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15885:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":4407,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15850:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15850:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4417,"nodeType":"ExpressionStatement","src":"15850:76:23"},{"expression":{"arguments":[{"id":4420,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4402,"src":"15950:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15943:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":4418,"name":"uint24","nodeType":"ElementaryTypeName","src":"15943:6:23","typeDescriptions":{}}},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15943:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":4406,"id":4422,"nodeType":"Return","src":"15936:20:23"}]},"documentation":{"id":4400,"nodeType":"StructuredDocumentation","src":"15457:314:23","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"id":4424,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15785:8:23","nodeType":"FunctionDefinition","parameters":{"id":4403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4402,"mutability":"mutable","name":"value","nameLocation":"15802:5:23","nodeType":"VariableDeclaration","scope":4424,"src":"15794:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4401,"name":"uint256","nodeType":"ElementaryTypeName","src":"15794:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15793:15:23"},"returnParameters":{"id":4406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4424,"src":"15832:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":4404,"name":"uint24","nodeType":"ElementaryTypeName","src":"15832:6:23","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15831:8:23"},"scope":5237,"src":"15776:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4448,"nodeType":"Block","src":"16352:123:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"16370:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16384:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4435,"name":"uint16","nodeType":"ElementaryTypeName","src":"16384:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":4434,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16379:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16379:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16392:3:23","memberName":"max","nodeType":"MemberAccess","src":"16379:16:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16370:25:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":4440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16397:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":4432,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16362:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16362:76:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4442,"nodeType":"ExpressionStatement","src":"16362:76:23"},{"expression":{"arguments":[{"id":4445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"16462:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16455:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":4443,"name":"uint16","nodeType":"ElementaryTypeName","src":"16455:6:23","typeDescriptions":{}}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16455:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":4431,"id":4447,"nodeType":"Return","src":"16448:20:23"}]},"documentation":{"id":4425,"nodeType":"StructuredDocumentation","src":"15969:314:23","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v2.5._"},"id":4449,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16297:8:23","nodeType":"FunctionDefinition","parameters":{"id":4428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4427,"mutability":"mutable","name":"value","nameLocation":"16314:5:23","nodeType":"VariableDeclaration","scope":4449,"src":"16306:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4426,"name":"uint256","nodeType":"ElementaryTypeName","src":"16306:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16305:15:23"},"returnParameters":{"id":4431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4449,"src":"16344:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4429,"name":"uint16","nodeType":"ElementaryTypeName","src":"16344:6:23","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16343:8:23"},"scope":5237,"src":"16288:187:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4473,"nodeType":"Block","src":"16858:120:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"16876:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16890:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4460,"name":"uint8","nodeType":"ElementaryTypeName","src":"16890:5:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":4459,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16885:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16885:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":4463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16897:3:23","memberName":"max","nodeType":"MemberAccess","src":"16885:15:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16876:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":4465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16902:39:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":4457,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16868:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16868:74:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4467,"nodeType":"ExpressionStatement","src":"16868:74:23"},{"expression":{"arguments":[{"id":4470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"16965:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16959:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4468,"name":"uint8","nodeType":"ElementaryTypeName","src":"16959:5:23","typeDescriptions":{}}},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16959:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4456,"id":4472,"nodeType":"Return","src":"16952:19:23"}]},"documentation":{"id":4450,"nodeType":"StructuredDocumentation","src":"16481:310:23","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v2.5._"},"id":4474,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16805:7:23","nodeType":"FunctionDefinition","parameters":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4452,"mutability":"mutable","name":"value","nameLocation":"16821:5:23","nodeType":"VariableDeclaration","scope":4474,"src":"16813:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"16813:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16812:15:23"},"returnParameters":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4474,"src":"16851:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4454,"name":"uint8","nodeType":"ElementaryTypeName","src":"16851:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16850:7:23"},"scope":5237,"src":"16796:182:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4494,"nodeType":"Block","src":"17252:103:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"17270:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17279:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17270:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c7565206d75737420626520706f736974697665","id":4486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17282:34:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""},"value":"SafeCast: value must be positive"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""}],"id":4482,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17262:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17262:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4488,"nodeType":"ExpressionStatement","src":"17262:55:23"},{"expression":{"arguments":[{"id":4491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"17342:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17334:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"17334:7:23","typeDescriptions":{}}},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17334:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4481,"id":4493,"nodeType":"Return","src":"17327:21:23"}]},"documentation":{"id":4475,"nodeType":"StructuredDocumentation","src":"16984:198:23","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0.\n _Available since v3.0._"},"id":4495,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17196:9:23","nodeType":"FunctionDefinition","parameters":{"id":4478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4477,"mutability":"mutable","name":"value","nameLocation":"17213:5:23","nodeType":"VariableDeclaration","scope":4495,"src":"17206:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4476,"name":"int256","nodeType":"ElementaryTypeName","src":"17206:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17205:14:23"},"returnParameters":{"id":4481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4495,"src":"17243:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4479,"name":"uint256","nodeType":"ElementaryTypeName","src":"17243:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17242:9:23"},"scope":5237,"src":"17187:168:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4517,"nodeType":"Block","src":"17790:124:23","statements":[{"expression":{"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4503,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"17800:10:23","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"17820:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17813:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":4504,"name":"int248","nodeType":"ElementaryTypeName","src":"17813:6:23","typeDescriptions":{}}},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17813:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17800:26:23","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":4509,"nodeType":"ExpressionStatement","src":"17800:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4511,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"17844:10:23","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"17858:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17844:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":4514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17865:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":4510,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17836:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17836:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4516,"nodeType":"ExpressionStatement","src":"17836:71:23"}]},"documentation":{"id":4496,"nodeType":"StructuredDocumentation","src":"17361:350:23","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"id":4518,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17725:8:23","nodeType":"FunctionDefinition","parameters":{"id":4499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4498,"mutability":"mutable","name":"value","nameLocation":"17741:5:23","nodeType":"VariableDeclaration","scope":4518,"src":"17734:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4497,"name":"int256","nodeType":"ElementaryTypeName","src":"17734:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17733:14:23"},"returnParameters":{"id":4502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4501,"mutability":"mutable","name":"downcasted","nameLocation":"17778:10:23","nodeType":"VariableDeclaration","scope":4518,"src":"17771:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":4500,"name":"int248","nodeType":"ElementaryTypeName","src":"17771:6:23","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17770:19:23"},"scope":5237,"src":"17716:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4540,"nodeType":"Block","src":"18349:124:23","statements":[{"expression":{"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4526,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"18359:10:23","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"18379:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18372:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":4527,"name":"int240","nodeType":"ElementaryTypeName","src":"18372:6:23","typeDescriptions":{}}},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18372:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18359:26:23","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":4532,"nodeType":"ExpressionStatement","src":"18359:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4534,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"18403:10:23","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4535,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"18417:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18403:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":4537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18424:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":4533,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18395:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18395:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4539,"nodeType":"ExpressionStatement","src":"18395:71:23"}]},"documentation":{"id":4519,"nodeType":"StructuredDocumentation","src":"17920:350:23","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"id":4541,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18284:8:23","nodeType":"FunctionDefinition","parameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4521,"mutability":"mutable","name":"value","nameLocation":"18300:5:23","nodeType":"VariableDeclaration","scope":4541,"src":"18293:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4520,"name":"int256","nodeType":"ElementaryTypeName","src":"18293:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18292:14:23"},"returnParameters":{"id":4525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"downcasted","nameLocation":"18337:10:23","nodeType":"VariableDeclaration","scope":4541,"src":"18330:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":4523,"name":"int240","nodeType":"ElementaryTypeName","src":"18330:6:23","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18329:19:23"},"scope":5237,"src":"18275:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4563,"nodeType":"Block","src":"18908:124:23","statements":[{"expression":{"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4549,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4547,"src":"18918:10:23","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"18938:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18931:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":4550,"name":"int232","nodeType":"ElementaryTypeName","src":"18931:6:23","typeDescriptions":{}}},"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18931:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18918:26:23","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":4555,"nodeType":"ExpressionStatement","src":"18918:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4557,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4547,"src":"18962:10:23","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4544,"src":"18976:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18962:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":4560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18983:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":4556,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18954:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18954:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4562,"nodeType":"ExpressionStatement","src":"18954:71:23"}]},"documentation":{"id":4542,"nodeType":"StructuredDocumentation","src":"18479:350:23","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"id":4564,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18843:8:23","nodeType":"FunctionDefinition","parameters":{"id":4545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4544,"mutability":"mutable","name":"value","nameLocation":"18859:5:23","nodeType":"VariableDeclaration","scope":4564,"src":"18852:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4543,"name":"int256","nodeType":"ElementaryTypeName","src":"18852:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18851:14:23"},"returnParameters":{"id":4548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4547,"mutability":"mutable","name":"downcasted","nameLocation":"18896:10:23","nodeType":"VariableDeclaration","scope":4564,"src":"18889:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":4546,"name":"int232","nodeType":"ElementaryTypeName","src":"18889:6:23","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18888:19:23"},"scope":5237,"src":"18834:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4586,"nodeType":"Block","src":"19467:124:23","statements":[{"expression":{"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4572,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"19477:10:23","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4567,"src":"19497:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19490:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":4573,"name":"int224","nodeType":"ElementaryTypeName","src":"19490:6:23","typeDescriptions":{}}},"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19490:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19477:26:23","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":4578,"nodeType":"ExpressionStatement","src":"19477:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4580,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"19521:10:23","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4567,"src":"19535:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19521:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":4583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19542:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":4579,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19513:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19513:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4585,"nodeType":"ExpressionStatement","src":"19513:71:23"}]},"documentation":{"id":4565,"nodeType":"StructuredDocumentation","src":"19038:350:23","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.7._"},"id":4587,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19402:8:23","nodeType":"FunctionDefinition","parameters":{"id":4568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4567,"mutability":"mutable","name":"value","nameLocation":"19418:5:23","nodeType":"VariableDeclaration","scope":4587,"src":"19411:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4566,"name":"int256","nodeType":"ElementaryTypeName","src":"19411:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19410:14:23"},"returnParameters":{"id":4571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4570,"mutability":"mutable","name":"downcasted","nameLocation":"19455:10:23","nodeType":"VariableDeclaration","scope":4587,"src":"19448:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":4569,"name":"int224","nodeType":"ElementaryTypeName","src":"19448:6:23","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19447:19:23"},"scope":5237,"src":"19393:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4609,"nodeType":"Block","src":"20026:124:23","statements":[{"expression":{"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4595,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"20036:10:23","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"20056:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20049:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":4596,"name":"int216","nodeType":"ElementaryTypeName","src":"20049:6:23","typeDescriptions":{}}},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20049:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"20036:26:23","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":4601,"nodeType":"ExpressionStatement","src":"20036:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4603,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4593,"src":"20080:10:23","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"20094:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20080:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":4606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20101:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":4602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20072:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20072:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4608,"nodeType":"ExpressionStatement","src":"20072:71:23"}]},"documentation":{"id":4588,"nodeType":"StructuredDocumentation","src":"19597:350:23","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"id":4610,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19961:8:23","nodeType":"FunctionDefinition","parameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"mutability":"mutable","name":"value","nameLocation":"19977:5:23","nodeType":"VariableDeclaration","scope":4610,"src":"19970:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4589,"name":"int256","nodeType":"ElementaryTypeName","src":"19970:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19969:14:23"},"returnParameters":{"id":4594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4593,"mutability":"mutable","name":"downcasted","nameLocation":"20014:10:23","nodeType":"VariableDeclaration","scope":4610,"src":"20007:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":4592,"name":"int216","nodeType":"ElementaryTypeName","src":"20007:6:23","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"20006:19:23"},"scope":5237,"src":"19952:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4632,"nodeType":"Block","src":"20585:124:23","statements":[{"expression":{"id":4623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4618,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"20595:10:23","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4621,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"20615:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20608:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":4619,"name":"int208","nodeType":"ElementaryTypeName","src":"20608:6:23","typeDescriptions":{}}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20608:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20595:26:23","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":4624,"nodeType":"ExpressionStatement","src":"20595:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4626,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"20639:10:23","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"20653:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20639:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":4629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20660:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":4625,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20631:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20631:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4631,"nodeType":"ExpressionStatement","src":"20631:71:23"}]},"documentation":{"id":4611,"nodeType":"StructuredDocumentation","src":"20156:350:23","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"id":4633,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20520:8:23","nodeType":"FunctionDefinition","parameters":{"id":4614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4613,"mutability":"mutable","name":"value","nameLocation":"20536:5:23","nodeType":"VariableDeclaration","scope":4633,"src":"20529:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4612,"name":"int256","nodeType":"ElementaryTypeName","src":"20529:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20528:14:23"},"returnParameters":{"id":4617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4616,"mutability":"mutable","name":"downcasted","nameLocation":"20573:10:23","nodeType":"VariableDeclaration","scope":4633,"src":"20566:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":4615,"name":"int208","nodeType":"ElementaryTypeName","src":"20566:6:23","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20565:19:23"},"scope":5237,"src":"20511:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4655,"nodeType":"Block","src":"21144:124:23","statements":[{"expression":{"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4641,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"21154:10:23","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4644,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"21174:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21167:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":4642,"name":"int200","nodeType":"ElementaryTypeName","src":"21167:6:23","typeDescriptions":{}}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21167:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21154:26:23","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":4647,"nodeType":"ExpressionStatement","src":"21154:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4649,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4639,"src":"21198:10:23","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"21212:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21198:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":4652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21219:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":4648,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21190:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21190:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4654,"nodeType":"ExpressionStatement","src":"21190:71:23"}]},"documentation":{"id":4634,"nodeType":"StructuredDocumentation","src":"20715:350:23","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"id":4656,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"21079:8:23","nodeType":"FunctionDefinition","parameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4636,"mutability":"mutable","name":"value","nameLocation":"21095:5:23","nodeType":"VariableDeclaration","scope":4656,"src":"21088:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4635,"name":"int256","nodeType":"ElementaryTypeName","src":"21088:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21087:14:23"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"downcasted","nameLocation":"21132:10:23","nodeType":"VariableDeclaration","scope":4656,"src":"21125:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":4638,"name":"int200","nodeType":"ElementaryTypeName","src":"21125:6:23","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21124:19:23"},"scope":5237,"src":"21070:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4678,"nodeType":"Block","src":"21703:124:23","statements":[{"expression":{"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4664,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"21713:10:23","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"21733:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21726:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":4665,"name":"int192","nodeType":"ElementaryTypeName","src":"21726:6:23","typeDescriptions":{}}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21726:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21713:26:23","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":4670,"nodeType":"ExpressionStatement","src":"21713:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4672,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"21757:10:23","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"21771:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21757:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21778:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":4671,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21749:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21749:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4677,"nodeType":"ExpressionStatement","src":"21749:71:23"}]},"documentation":{"id":4657,"nodeType":"StructuredDocumentation","src":"21274:350:23","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"id":4679,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21638:8:23","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4659,"mutability":"mutable","name":"value","nameLocation":"21654:5:23","nodeType":"VariableDeclaration","scope":4679,"src":"21647:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4658,"name":"int256","nodeType":"ElementaryTypeName","src":"21647:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21646:14:23"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4662,"mutability":"mutable","name":"downcasted","nameLocation":"21691:10:23","nodeType":"VariableDeclaration","scope":4679,"src":"21684:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":4661,"name":"int192","nodeType":"ElementaryTypeName","src":"21684:6:23","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21683:19:23"},"scope":5237,"src":"21629:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4701,"nodeType":"Block","src":"22262:124:23","statements":[{"expression":{"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4687,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"22272:10:23","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"22292:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22285:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":4688,"name":"int184","nodeType":"ElementaryTypeName","src":"22285:6:23","typeDescriptions":{}}},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22285:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22272:26:23","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":4693,"nodeType":"ExpressionStatement","src":"22272:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"22316:10:23","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4682,"src":"22330:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22316:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22337:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":4694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22308:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22308:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4700,"nodeType":"ExpressionStatement","src":"22308:71:23"}]},"documentation":{"id":4680,"nodeType":"StructuredDocumentation","src":"21833:350:23","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"id":4702,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22197:8:23","nodeType":"FunctionDefinition","parameters":{"id":4683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4682,"mutability":"mutable","name":"value","nameLocation":"22213:5:23","nodeType":"VariableDeclaration","scope":4702,"src":"22206:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4681,"name":"int256","nodeType":"ElementaryTypeName","src":"22206:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22205:14:23"},"returnParameters":{"id":4686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"downcasted","nameLocation":"22250:10:23","nodeType":"VariableDeclaration","scope":4702,"src":"22243:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":4684,"name":"int184","nodeType":"ElementaryTypeName","src":"22243:6:23","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22242:19:23"},"scope":5237,"src":"22188:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4724,"nodeType":"Block","src":"22821:124:23","statements":[{"expression":{"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4710,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"22831:10:23","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"22851:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22844:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":4711,"name":"int176","nodeType":"ElementaryTypeName","src":"22844:6:23","typeDescriptions":{}}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22844:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22831:26:23","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":4716,"nodeType":"ExpressionStatement","src":"22831:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4718,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"22875:10:23","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"22889:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22875:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":4721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22896:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":4717,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22867:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22867:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4723,"nodeType":"ExpressionStatement","src":"22867:71:23"}]},"documentation":{"id":4703,"nodeType":"StructuredDocumentation","src":"22392:350:23","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"id":4725,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22756:8:23","nodeType":"FunctionDefinition","parameters":{"id":4706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4705,"mutability":"mutable","name":"value","nameLocation":"22772:5:23","nodeType":"VariableDeclaration","scope":4725,"src":"22765:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4704,"name":"int256","nodeType":"ElementaryTypeName","src":"22765:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22764:14:23"},"returnParameters":{"id":4709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4708,"mutability":"mutable","name":"downcasted","nameLocation":"22809:10:23","nodeType":"VariableDeclaration","scope":4725,"src":"22802:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":4707,"name":"int176","nodeType":"ElementaryTypeName","src":"22802:6:23","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22801:19:23"},"scope":5237,"src":"22747:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4747,"nodeType":"Block","src":"23380:124:23","statements":[{"expression":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4733,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"23390:10:23","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"23410:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23403:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":4734,"name":"int168","nodeType":"ElementaryTypeName","src":"23403:6:23","typeDescriptions":{}}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23403:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23390:26:23","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":4739,"nodeType":"ExpressionStatement","src":"23390:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4741,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"23434:10:23","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4742,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"23448:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23434:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23455:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":4740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23426:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23426:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4746,"nodeType":"ExpressionStatement","src":"23426:71:23"}]},"documentation":{"id":4726,"nodeType":"StructuredDocumentation","src":"22951:350:23","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"id":4748,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23315:8:23","nodeType":"FunctionDefinition","parameters":{"id":4729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4728,"mutability":"mutable","name":"value","nameLocation":"23331:5:23","nodeType":"VariableDeclaration","scope":4748,"src":"23324:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4727,"name":"int256","nodeType":"ElementaryTypeName","src":"23324:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23323:14:23"},"returnParameters":{"id":4732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4731,"mutability":"mutable","name":"downcasted","nameLocation":"23368:10:23","nodeType":"VariableDeclaration","scope":4748,"src":"23361:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":4730,"name":"int168","nodeType":"ElementaryTypeName","src":"23361:6:23","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23360:19:23"},"scope":5237,"src":"23306:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4770,"nodeType":"Block","src":"23939:124:23","statements":[{"expression":{"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4756,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"23949:10:23","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4759,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"23969:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23962:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":4757,"name":"int160","nodeType":"ElementaryTypeName","src":"23962:6:23","typeDescriptions":{}}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23962:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23949:26:23","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":4762,"nodeType":"ExpressionStatement","src":"23949:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4764,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"23993:10:23","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4751,"src":"24007:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23993:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":4767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24014:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":4763,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23985:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23985:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4769,"nodeType":"ExpressionStatement","src":"23985:71:23"}]},"documentation":{"id":4749,"nodeType":"StructuredDocumentation","src":"23510:350:23","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"id":4771,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23874:8:23","nodeType":"FunctionDefinition","parameters":{"id":4752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4751,"mutability":"mutable","name":"value","nameLocation":"23890:5:23","nodeType":"VariableDeclaration","scope":4771,"src":"23883:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4750,"name":"int256","nodeType":"ElementaryTypeName","src":"23883:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23882:14:23"},"returnParameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4754,"mutability":"mutable","name":"downcasted","nameLocation":"23927:10:23","nodeType":"VariableDeclaration","scope":4771,"src":"23920:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":4753,"name":"int160","nodeType":"ElementaryTypeName","src":"23920:6:23","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23919:19:23"},"scope":5237,"src":"23865:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4793,"nodeType":"Block","src":"24498:124:23","statements":[{"expression":{"id":4784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4779,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"24508:10:23","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"24528:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24521:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":4780,"name":"int152","nodeType":"ElementaryTypeName","src":"24521:6:23","typeDescriptions":{}}},"id":4783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24521:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24508:26:23","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":4785,"nodeType":"ExpressionStatement","src":"24508:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4777,"src":"24552:10:23","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4788,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"24566:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24552:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":4790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24573:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":4786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24544:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24544:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4792,"nodeType":"ExpressionStatement","src":"24544:71:23"}]},"documentation":{"id":4772,"nodeType":"StructuredDocumentation","src":"24069:350:23","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"id":4794,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24433:8:23","nodeType":"FunctionDefinition","parameters":{"id":4775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4774,"mutability":"mutable","name":"value","nameLocation":"24449:5:23","nodeType":"VariableDeclaration","scope":4794,"src":"24442:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4773,"name":"int256","nodeType":"ElementaryTypeName","src":"24442:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24441:14:23"},"returnParameters":{"id":4778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4777,"mutability":"mutable","name":"downcasted","nameLocation":"24486:10:23","nodeType":"VariableDeclaration","scope":4794,"src":"24479:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":4776,"name":"int152","nodeType":"ElementaryTypeName","src":"24479:6:23","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24478:19:23"},"scope":5237,"src":"24424:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4816,"nodeType":"Block","src":"25057:124:23","statements":[{"expression":{"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4802,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"25067:10:23","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"25087:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25080:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":4803,"name":"int144","nodeType":"ElementaryTypeName","src":"25080:6:23","typeDescriptions":{}}},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25080:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"25067:26:23","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":4808,"nodeType":"ExpressionStatement","src":"25067:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4810,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"25111:10:23","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"25125:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25111:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":4813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25132:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":4809,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25103:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25103:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4815,"nodeType":"ExpressionStatement","src":"25103:71:23"}]},"documentation":{"id":4795,"nodeType":"StructuredDocumentation","src":"24628:350:23","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"id":4817,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24992:8:23","nodeType":"FunctionDefinition","parameters":{"id":4798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4797,"mutability":"mutable","name":"value","nameLocation":"25008:5:23","nodeType":"VariableDeclaration","scope":4817,"src":"25001:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4796,"name":"int256","nodeType":"ElementaryTypeName","src":"25001:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25000:14:23"},"returnParameters":{"id":4801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4800,"mutability":"mutable","name":"downcasted","nameLocation":"25045:10:23","nodeType":"VariableDeclaration","scope":4817,"src":"25038:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":4799,"name":"int144","nodeType":"ElementaryTypeName","src":"25038:6:23","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"25037:19:23"},"scope":5237,"src":"24983:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4839,"nodeType":"Block","src":"25616:124:23","statements":[{"expression":{"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4825,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"25626:10:23","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"25646:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25639:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":4826,"name":"int136","nodeType":"ElementaryTypeName","src":"25639:6:23","typeDescriptions":{}}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25639:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25626:26:23","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":4831,"nodeType":"ExpressionStatement","src":"25626:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4833,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"25670:10:23","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"25684:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25670:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":4836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25691:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":4832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25662:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25662:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4838,"nodeType":"ExpressionStatement","src":"25662:71:23"}]},"documentation":{"id":4818,"nodeType":"StructuredDocumentation","src":"25187:350:23","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"id":4840,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25551:8:23","nodeType":"FunctionDefinition","parameters":{"id":4821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4820,"mutability":"mutable","name":"value","nameLocation":"25567:5:23","nodeType":"VariableDeclaration","scope":4840,"src":"25560:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4819,"name":"int256","nodeType":"ElementaryTypeName","src":"25560:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25559:14:23"},"returnParameters":{"id":4824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4823,"mutability":"mutable","name":"downcasted","nameLocation":"25604:10:23","nodeType":"VariableDeclaration","scope":4840,"src":"25597:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":4822,"name":"int136","nodeType":"ElementaryTypeName","src":"25597:6:23","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25596:19:23"},"scope":5237,"src":"25542:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4862,"nodeType":"Block","src":"26175:124:23","statements":[{"expression":{"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4848,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"26185:10:23","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"26205:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26198:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":4849,"name":"int128","nodeType":"ElementaryTypeName","src":"26198:6:23","typeDescriptions":{}}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26198:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"26185:26:23","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":4854,"nodeType":"ExpressionStatement","src":"26185:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4856,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"26229:10:23","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4857,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"26243:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26229:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":4859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26250:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":4855,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26221:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26221:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4861,"nodeType":"ExpressionStatement","src":"26221:71:23"}]},"documentation":{"id":4841,"nodeType":"StructuredDocumentation","src":"25746:350:23","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v3.1._"},"id":4863,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"26110:8:23","nodeType":"FunctionDefinition","parameters":{"id":4844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4843,"mutability":"mutable","name":"value","nameLocation":"26126:5:23","nodeType":"VariableDeclaration","scope":4863,"src":"26119:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4842,"name":"int256","nodeType":"ElementaryTypeName","src":"26119:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26118:14:23"},"returnParameters":{"id":4847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4846,"mutability":"mutable","name":"downcasted","nameLocation":"26163:10:23","nodeType":"VariableDeclaration","scope":4863,"src":"26156:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":4845,"name":"int128","nodeType":"ElementaryTypeName","src":"26156:6:23","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"26155:19:23"},"scope":5237,"src":"26101:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4885,"nodeType":"Block","src":"26734:124:23","statements":[{"expression":{"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4871,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"26744:10:23","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"26764:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26757:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":4872,"name":"int120","nodeType":"ElementaryTypeName","src":"26757:6:23","typeDescriptions":{}}},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26757:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26744:26:23","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":4877,"nodeType":"ExpressionStatement","src":"26744:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4869,"src":"26788:10:23","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4866,"src":"26802:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26788:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26809:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":4878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26780:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26780:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4884,"nodeType":"ExpressionStatement","src":"26780:71:23"}]},"documentation":{"id":4864,"nodeType":"StructuredDocumentation","src":"26305:350:23","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"id":4886,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26669:8:23","nodeType":"FunctionDefinition","parameters":{"id":4867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4866,"mutability":"mutable","name":"value","nameLocation":"26685:5:23","nodeType":"VariableDeclaration","scope":4886,"src":"26678:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4865,"name":"int256","nodeType":"ElementaryTypeName","src":"26678:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26677:14:23"},"returnParameters":{"id":4870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4869,"mutability":"mutable","name":"downcasted","nameLocation":"26722:10:23","nodeType":"VariableDeclaration","scope":4886,"src":"26715:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":4868,"name":"int120","nodeType":"ElementaryTypeName","src":"26715:6:23","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26714:19:23"},"scope":5237,"src":"26660:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4908,"nodeType":"Block","src":"27293:124:23","statements":[{"expression":{"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4894,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4892,"src":"27303:10:23","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"27323:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27316:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":4895,"name":"int112","nodeType":"ElementaryTypeName","src":"27316:6:23","typeDescriptions":{}}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27316:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27303:26:23","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":4900,"nodeType":"ExpressionStatement","src":"27303:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4902,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4892,"src":"27347:10:23","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"27361:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27347:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":4905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27368:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":4901,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27339:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27339:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4907,"nodeType":"ExpressionStatement","src":"27339:71:23"}]},"documentation":{"id":4887,"nodeType":"StructuredDocumentation","src":"26864:350:23","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"id":4909,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"27228:8:23","nodeType":"FunctionDefinition","parameters":{"id":4890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4889,"mutability":"mutable","name":"value","nameLocation":"27244:5:23","nodeType":"VariableDeclaration","scope":4909,"src":"27237:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4888,"name":"int256","nodeType":"ElementaryTypeName","src":"27237:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27236:14:23"},"returnParameters":{"id":4893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4892,"mutability":"mutable","name":"downcasted","nameLocation":"27281:10:23","nodeType":"VariableDeclaration","scope":4909,"src":"27274:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":4891,"name":"int112","nodeType":"ElementaryTypeName","src":"27274:6:23","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27273:19:23"},"scope":5237,"src":"27219:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4931,"nodeType":"Block","src":"27852:124:23","statements":[{"expression":{"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4917,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"27862:10:23","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"27882:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27875:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":4918,"name":"int104","nodeType":"ElementaryTypeName","src":"27875:6:23","typeDescriptions":{}}},"id":4921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27875:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27862:26:23","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":4923,"nodeType":"ExpressionStatement","src":"27862:26:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4925,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"27906:10:23","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"27920:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27906:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":4928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27927:41:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":4924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27898:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27898:71:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4930,"nodeType":"ExpressionStatement","src":"27898:71:23"}]},"documentation":{"id":4910,"nodeType":"StructuredDocumentation","src":"27423:350:23","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"id":4932,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27787:8:23","nodeType":"FunctionDefinition","parameters":{"id":4913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4912,"mutability":"mutable","name":"value","nameLocation":"27803:5:23","nodeType":"VariableDeclaration","scope":4932,"src":"27796:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4911,"name":"int256","nodeType":"ElementaryTypeName","src":"27796:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27795:14:23"},"returnParameters":{"id":4916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4915,"mutability":"mutable","name":"downcasted","nameLocation":"27840:10:23","nodeType":"VariableDeclaration","scope":4932,"src":"27833:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":4914,"name":"int104","nodeType":"ElementaryTypeName","src":"27833:6:23","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27832:19:23"},"scope":5237,"src":"27778:198:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4954,"nodeType":"Block","src":"28404:122:23","statements":[{"expression":{"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4940,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"28414:10:23","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"28433:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28427:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":4941,"name":"int96","nodeType":"ElementaryTypeName","src":"28427:5:23","typeDescriptions":{}}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28427:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28414:25:23","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":4946,"nodeType":"ExpressionStatement","src":"28414:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4948,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"28457:10:23","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4935,"src":"28471:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28457:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":4951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"28478:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":4947,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"28449:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28449:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4953,"nodeType":"ExpressionStatement","src":"28449:70:23"}]},"documentation":{"id":4933,"nodeType":"StructuredDocumentation","src":"27982:345:23","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.7._"},"id":4955,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28341:7:23","nodeType":"FunctionDefinition","parameters":{"id":4936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4935,"mutability":"mutable","name":"value","nameLocation":"28356:5:23","nodeType":"VariableDeclaration","scope":4955,"src":"28349:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4934,"name":"int256","nodeType":"ElementaryTypeName","src":"28349:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28348:14:23"},"returnParameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"downcasted","nameLocation":"28392:10:23","nodeType":"VariableDeclaration","scope":4955,"src":"28386:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":4937,"name":"int96","nodeType":"ElementaryTypeName","src":"28386:5:23","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28385:18:23"},"scope":5237,"src":"28332:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4977,"nodeType":"Block","src":"28954:122:23","statements":[{"expression":{"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4963,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"28964:10:23","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"28983:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28977:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":4964,"name":"int88","nodeType":"ElementaryTypeName","src":"28977:5:23","typeDescriptions":{}}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28977:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28964:25:23","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":4969,"nodeType":"ExpressionStatement","src":"28964:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4971,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4961,"src":"29007:10:23","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"29021:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29007:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":4974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29028:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":4970,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"28999:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28999:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4976,"nodeType":"ExpressionStatement","src":"28999:70:23"}]},"documentation":{"id":4956,"nodeType":"StructuredDocumentation","src":"28532:345:23","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"id":4978,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28891:7:23","nodeType":"FunctionDefinition","parameters":{"id":4959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4958,"mutability":"mutable","name":"value","nameLocation":"28906:5:23","nodeType":"VariableDeclaration","scope":4978,"src":"28899:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4957,"name":"int256","nodeType":"ElementaryTypeName","src":"28899:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28898:14:23"},"returnParameters":{"id":4962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4961,"mutability":"mutable","name":"downcasted","nameLocation":"28942:10:23","nodeType":"VariableDeclaration","scope":4978,"src":"28936:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":4960,"name":"int88","nodeType":"ElementaryTypeName","src":"28936:5:23","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28935:18:23"},"scope":5237,"src":"28882:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5000,"nodeType":"Block","src":"29504:122:23","statements":[{"expression":{"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4986,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"29514:10:23","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"29533:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29527:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":4987,"name":"int80","nodeType":"ElementaryTypeName","src":"29527:5:23","typeDescriptions":{}}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29527:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29514:25:23","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":4992,"nodeType":"ExpressionStatement","src":"29514:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4994,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4984,"src":"29557:10:23","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"29571:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29557:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":4997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29578:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":4993,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"29549:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29549:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4999,"nodeType":"ExpressionStatement","src":"29549:70:23"}]},"documentation":{"id":4979,"nodeType":"StructuredDocumentation","src":"29082:345:23","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"id":5001,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29441:7:23","nodeType":"FunctionDefinition","parameters":{"id":4982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4981,"mutability":"mutable","name":"value","nameLocation":"29456:5:23","nodeType":"VariableDeclaration","scope":5001,"src":"29449:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4980,"name":"int256","nodeType":"ElementaryTypeName","src":"29449:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29448:14:23"},"returnParameters":{"id":4985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4984,"mutability":"mutable","name":"downcasted","nameLocation":"29492:10:23","nodeType":"VariableDeclaration","scope":5001,"src":"29486:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":4983,"name":"int80","nodeType":"ElementaryTypeName","src":"29486:5:23","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29485:18:23"},"scope":5237,"src":"29432:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5023,"nodeType":"Block","src":"30054:122:23","statements":[{"expression":{"id":5014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5009,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5007,"src":"30064:10:23","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"30083:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30077:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":5010,"name":"int72","nodeType":"ElementaryTypeName","src":"30077:5:23","typeDescriptions":{}}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30077:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"30064:25:23","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":5015,"nodeType":"ExpressionStatement","src":"30064:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5017,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5007,"src":"30107:10:23","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"30121:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30107:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":5020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30128:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":5016,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"30099:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30099:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5022,"nodeType":"ExpressionStatement","src":"30099:70:23"}]},"documentation":{"id":5002,"nodeType":"StructuredDocumentation","src":"29632:345:23","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"id":5024,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29991:7:23","nodeType":"FunctionDefinition","parameters":{"id":5005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5004,"mutability":"mutable","name":"value","nameLocation":"30006:5:23","nodeType":"VariableDeclaration","scope":5024,"src":"29999:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5003,"name":"int256","nodeType":"ElementaryTypeName","src":"29999:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29998:14:23"},"returnParameters":{"id":5008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5007,"mutability":"mutable","name":"downcasted","nameLocation":"30042:10:23","nodeType":"VariableDeclaration","scope":5024,"src":"30036:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":5006,"name":"int72","nodeType":"ElementaryTypeName","src":"30036:5:23","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"30035:18:23"},"scope":5237,"src":"29982:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5046,"nodeType":"Block","src":"30604:122:23","statements":[{"expression":{"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5032,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"30614:10:23","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"30633:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30627:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":5033,"name":"int64","nodeType":"ElementaryTypeName","src":"30627:5:23","typeDescriptions":{}}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30627:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30614:25:23","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":5038,"nodeType":"ExpressionStatement","src":"30614:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5040,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"30657:10:23","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5027,"src":"30671:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30657:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30678:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":5039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"30649:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30649:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5045,"nodeType":"ExpressionStatement","src":"30649:70:23"}]},"documentation":{"id":5025,"nodeType":"StructuredDocumentation","src":"30182:345:23","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v3.1._"},"id":5047,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30541:7:23","nodeType":"FunctionDefinition","parameters":{"id":5028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5027,"mutability":"mutable","name":"value","nameLocation":"30556:5:23","nodeType":"VariableDeclaration","scope":5047,"src":"30549:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5026,"name":"int256","nodeType":"ElementaryTypeName","src":"30549:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30548:14:23"},"returnParameters":{"id":5031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5030,"mutability":"mutable","name":"downcasted","nameLocation":"30592:10:23","nodeType":"VariableDeclaration","scope":5047,"src":"30586:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":5029,"name":"int64","nodeType":"ElementaryTypeName","src":"30586:5:23","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30585:18:23"},"scope":5237,"src":"30532:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5069,"nodeType":"Block","src":"31154:122:23","statements":[{"expression":{"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5055,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"31164:10:23","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"31183:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31177:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":5056,"name":"int56","nodeType":"ElementaryTypeName","src":"31177:5:23","typeDescriptions":{}}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31177:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"31164:25:23","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":5061,"nodeType":"ExpressionStatement","src":"31164:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5063,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5053,"src":"31207:10:23","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5050,"src":"31221:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31207:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":5066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31228:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":5062,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31199:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31199:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5068,"nodeType":"ExpressionStatement","src":"31199:70:23"}]},"documentation":{"id":5048,"nodeType":"StructuredDocumentation","src":"30732:345:23","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"id":5070,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"31091:7:23","nodeType":"FunctionDefinition","parameters":{"id":5051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5050,"mutability":"mutable","name":"value","nameLocation":"31106:5:23","nodeType":"VariableDeclaration","scope":5070,"src":"31099:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5049,"name":"int256","nodeType":"ElementaryTypeName","src":"31099:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31098:14:23"},"returnParameters":{"id":5054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5053,"mutability":"mutable","name":"downcasted","nameLocation":"31142:10:23","nodeType":"VariableDeclaration","scope":5070,"src":"31136:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":5052,"name":"int56","nodeType":"ElementaryTypeName","src":"31136:5:23","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"31135:18:23"},"scope":5237,"src":"31082:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5092,"nodeType":"Block","src":"31704:122:23","statements":[{"expression":{"id":5083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5078,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"31714:10:23","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"31733:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31727:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":5079,"name":"int48","nodeType":"ElementaryTypeName","src":"31727:5:23","typeDescriptions":{}}},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31727:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31714:25:23","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":5084,"nodeType":"ExpressionStatement","src":"31714:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5086,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"31757:10:23","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"31771:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31757:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":5089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31778:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":5085,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31749:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31749:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5091,"nodeType":"ExpressionStatement","src":"31749:70:23"}]},"documentation":{"id":5071,"nodeType":"StructuredDocumentation","src":"31282:345:23","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"id":5093,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31641:7:23","nodeType":"FunctionDefinition","parameters":{"id":5074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5073,"mutability":"mutable","name":"value","nameLocation":"31656:5:23","nodeType":"VariableDeclaration","scope":5093,"src":"31649:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5072,"name":"int256","nodeType":"ElementaryTypeName","src":"31649:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31648:14:23"},"returnParameters":{"id":5077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5076,"mutability":"mutable","name":"downcasted","nameLocation":"31692:10:23","nodeType":"VariableDeclaration","scope":5093,"src":"31686:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":5075,"name":"int48","nodeType":"ElementaryTypeName","src":"31686:5:23","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31685:18:23"},"scope":5237,"src":"31632:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5115,"nodeType":"Block","src":"32254:122:23","statements":[{"expression":{"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5101,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"32264:10:23","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5096,"src":"32283:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32277:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":5102,"name":"int40","nodeType":"ElementaryTypeName","src":"32277:5:23","typeDescriptions":{}}},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32277:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"32264:25:23","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":5107,"nodeType":"ExpressionStatement","src":"32264:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5109,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"32307:10:23","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5096,"src":"32321:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32307:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":5112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32328:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":5108,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"32299:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32299:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5114,"nodeType":"ExpressionStatement","src":"32299:70:23"}]},"documentation":{"id":5094,"nodeType":"StructuredDocumentation","src":"31832:345:23","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"id":5116,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"32191:7:23","nodeType":"FunctionDefinition","parameters":{"id":5097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5096,"mutability":"mutable","name":"value","nameLocation":"32206:5:23","nodeType":"VariableDeclaration","scope":5116,"src":"32199:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5095,"name":"int256","nodeType":"ElementaryTypeName","src":"32199:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32198:14:23"},"returnParameters":{"id":5100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5099,"mutability":"mutable","name":"downcasted","nameLocation":"32242:10:23","nodeType":"VariableDeclaration","scope":5116,"src":"32236:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":5098,"name":"int40","nodeType":"ElementaryTypeName","src":"32236:5:23","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"32235:18:23"},"scope":5237,"src":"32182:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5138,"nodeType":"Block","src":"32804:122:23","statements":[{"expression":{"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5124,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"32814:10:23","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"32833:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32827:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":5125,"name":"int32","nodeType":"ElementaryTypeName","src":"32827:5:23","typeDescriptions":{}}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32827:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32814:25:23","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":5130,"nodeType":"ExpressionStatement","src":"32814:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5132,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5122,"src":"32857:10:23","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5133,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5119,"src":"32871:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32857:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":5135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32878:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":5131,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"32849:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32849:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5137,"nodeType":"ExpressionStatement","src":"32849:70:23"}]},"documentation":{"id":5117,"nodeType":"StructuredDocumentation","src":"32382:345:23","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v3.1._"},"id":5139,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32741:7:23","nodeType":"FunctionDefinition","parameters":{"id":5120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5119,"mutability":"mutable","name":"value","nameLocation":"32756:5:23","nodeType":"VariableDeclaration","scope":5139,"src":"32749:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5118,"name":"int256","nodeType":"ElementaryTypeName","src":"32749:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32748:14:23"},"returnParameters":{"id":5123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5122,"mutability":"mutable","name":"downcasted","nameLocation":"32792:10:23","nodeType":"VariableDeclaration","scope":5139,"src":"32786:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":5121,"name":"int32","nodeType":"ElementaryTypeName","src":"32786:5:23","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32785:18:23"},"scope":5237,"src":"32732:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5161,"nodeType":"Block","src":"33354:122:23","statements":[{"expression":{"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5147,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"33364:10:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"33383:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33377:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":5148,"name":"int24","nodeType":"ElementaryTypeName","src":"33377:5:23","typeDescriptions":{}}},"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33377:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"33364:25:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":5153,"nodeType":"ExpressionStatement","src":"33364:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5155,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5145,"src":"33407:10:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5156,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"33421:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33407:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33428:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":5154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"33399:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33399:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5160,"nodeType":"ExpressionStatement","src":"33399:70:23"}]},"documentation":{"id":5140,"nodeType":"StructuredDocumentation","src":"32932:345:23","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"id":5162,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"33291:7:23","nodeType":"FunctionDefinition","parameters":{"id":5143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5142,"mutability":"mutable","name":"value","nameLocation":"33306:5:23","nodeType":"VariableDeclaration","scope":5162,"src":"33299:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5141,"name":"int256","nodeType":"ElementaryTypeName","src":"33299:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33298:14:23"},"returnParameters":{"id":5146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5145,"mutability":"mutable","name":"downcasted","nameLocation":"33342:10:23","nodeType":"VariableDeclaration","scope":5162,"src":"33336:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":5144,"name":"int24","nodeType":"ElementaryTypeName","src":"33336:5:23","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"33335:18:23"},"scope":5237,"src":"33282:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5184,"nodeType":"Block","src":"33904:122:23","statements":[{"expression":{"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5170,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"33914:10:23","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"33933:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33927:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":5171,"name":"int16","nodeType":"ElementaryTypeName","src":"33927:5:23","typeDescriptions":{}}},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33927:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33914:25:23","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":5176,"nodeType":"ExpressionStatement","src":"33914:25:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5178,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"33957:10:23","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5179,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5165,"src":"33971:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33957:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":5181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33978:40:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":5177,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"33949:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33949:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5183,"nodeType":"ExpressionStatement","src":"33949:70:23"}]},"documentation":{"id":5163,"nodeType":"StructuredDocumentation","src":"33482:345:23","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v3.1._"},"id":5185,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33841:7:23","nodeType":"FunctionDefinition","parameters":{"id":5166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5165,"mutability":"mutable","name":"value","nameLocation":"33856:5:23","nodeType":"VariableDeclaration","scope":5185,"src":"33849:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5164,"name":"int256","nodeType":"ElementaryTypeName","src":"33849:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33848:14:23"},"returnParameters":{"id":5169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5168,"mutability":"mutable","name":"downcasted","nameLocation":"33892:10:23","nodeType":"VariableDeclaration","scope":5185,"src":"33886:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":5167,"name":"int16","nodeType":"ElementaryTypeName","src":"33886:5:23","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33885:18:23"},"scope":5237,"src":"33832:194:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5207,"nodeType":"Block","src":"34447:120:23","statements":[{"expression":{"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5193,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"34457:10:23","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"34475:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34470:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":5194,"name":"int8","nodeType":"ElementaryTypeName","src":"34470:4:23","typeDescriptions":{}}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34470:11:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34457:24:23","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":5199,"nodeType":"ExpressionStatement","src":"34457:24:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5201,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5191,"src":"34499:10:23","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"34513:5:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34499:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":5204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34520:39:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":5200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34491:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34491:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5206,"nodeType":"ExpressionStatement","src":"34491:69:23"}]},"documentation":{"id":5186,"nodeType":"StructuredDocumentation","src":"34032:340:23","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v3.1._"},"id":5208,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"34386:6:23","nodeType":"FunctionDefinition","parameters":{"id":5189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5188,"mutability":"mutable","name":"value","nameLocation":"34400:5:23","nodeType":"VariableDeclaration","scope":5208,"src":"34393:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5187,"name":"int256","nodeType":"ElementaryTypeName","src":"34393:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34392:14:23"},"returnParameters":{"id":5192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5191,"mutability":"mutable","name":"downcasted","nameLocation":"34435:10:23","nodeType":"VariableDeclaration","scope":5208,"src":"34430:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":5190,"name":"int8","nodeType":"ElementaryTypeName","src":"34430:4:23","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34429:17:23"},"scope":5237,"src":"34377:190:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5235,"nodeType":"Block","src":"34845:233:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"34962:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":5222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34984:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5221,"name":"int256","nodeType":"ElementaryTypeName","src":"34984:6:23","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":5220,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34979:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34979:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":5224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34992:3:23","memberName":"max","nodeType":"MemberAccess","src":"34979:16:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34971:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5218,"name":"uint256","nodeType":"ElementaryTypeName","src":"34971:7:23","typeDescriptions":{}}},"id":5225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34971:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34962:34:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536","id":5227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34998:42:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""},"value":"SafeCast: value doesn't fit in an int256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""}],"id":5216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34954:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34954:87:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5229,"nodeType":"ExpressionStatement","src":"34954:87:23"},{"expression":{"arguments":[{"id":5232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"35065:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35058:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5230,"name":"int256","nodeType":"ElementaryTypeName","src":"35058:6:23","typeDescriptions":{}}},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35058:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5215,"id":5234,"nodeType":"Return","src":"35051:20:23"}]},"documentation":{"id":5209,"nodeType":"StructuredDocumentation","src":"34573:203:23","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256.\n _Available since v3.0._"},"id":5236,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34790:8:23","nodeType":"FunctionDefinition","parameters":{"id":5212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5211,"mutability":"mutable","name":"value","nameLocation":"34807:5:23","nodeType":"VariableDeclaration","scope":5236,"src":"34799:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5210,"name":"uint256","nodeType":"ElementaryTypeName","src":"34799:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34798:15:23"},"returnParameters":{"id":5215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5236,"src":"34837:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5213,"name":"int256","nodeType":"ElementaryTypeName","src":"34837:6:23","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34836:8:23"},"scope":5237,"src":"34781:297:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5238,"src":"927:34153:23","usedErrors":[],"usedEvents":[]}],"src":"192:34889:23"},"id":23},"contracts/OmnichainIdentityLinker.sol":{"ast":{"absolutePath":"contracts/OmnichainIdentityLinker.sol","exportedSymbols":{"BytesLib":[6158],"DVNOptions":[474],"ExecutorOptions":[1760],"MessagingFee":[508],"MessagingReceipt":[503],"OApp":[1806],"OAppCore":[1936],"OAppReceiver":[2088],"OAppSender":[2274],"OmnichainIdentityLinker":[5824],"OptionsBuilder":[2733],"Origin":[515],"SafeCast":[5237]},"id":5825,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5239,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:24"},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol","file":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol","id":5240,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5825,"sourceUnit":1807,"src":"61:57:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol","file":"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol","id":5241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5825,"sourceUnit":2734,"src":"120:72:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5243,"name":"OApp","nameLocations":["424:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":1806,"src":"424:4:24"},"id":5244,"nodeType":"InheritanceSpecifier","src":"424:4:24"}],"canonicalName":"OmnichainIdentityLinker","contractDependencies":[],"contractKind":"contract","documentation":{"id":5242,"nodeType":"StructuredDocumentation","src":"196:190:24","text":" @title OmnichainIdentityLinker\n @dev Contract for linking EVM addresses to Solana addresses via LayerZero V2\n This contract sends messages from EVM chains to a Solana OApp"},"fullyImplemented":true,"id":5824,"linearizedBaseContracts":[5824,1806,2088,2274,1936,2846,3696,2337,2358,713],"name":"OmnichainIdentityLinker","nameLocation":"397:23:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5247,"libraryName":{"id":5245,"name":"OptionsBuilder","nameLocations":["442:14:24"],"nodeType":"IdentifierPath","referencedDeclaration":2733,"src":"442:14:24"},"nodeType":"UsingForDirective","src":"436:31:24","typeName":{"id":5246,"name":"bytes","nodeType":"ElementaryTypeName","src":"461:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"constant":true,"functionSelector":"067bd07a","id":5250,"mutability":"constant","name":"SOLANA_CHAIN_ID","nameLocation":"536:15:24","nodeType":"VariableDeclaration","scope":5824,"src":"513:46:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5248,"name":"uint32","nodeType":"ElementaryTypeName","src":"513:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"3430313638","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"554:5:24","typeDescriptions":{"typeIdentifier":"t_rational_40168_by_1","typeString":"int_const 40168"},"value":"40168"},"visibility":"public"},{"constant":false,"functionSelector":"f68016b7","id":5253,"mutability":"mutable","name":"gasLimit","nameLocation":"658:8:24","nodeType":"VariableDeclaration","scope":5824,"src":"643:32:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5251,"name":"uint256","nodeType":"ElementaryTypeName","src":"643:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323030303030","id":5252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"669:6:24","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},"visibility":"public"},{"constant":false,"functionSelector":"7954c58f","id":5258,"mutability":"mutable","name":"linkedSolanaAddresses","nameLocation":"772:21:24","nodeType":"VariableDeclaration","scope":5824,"src":"737:56:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_bytes_storage_$dyn_storage_$","typeString":"mapping(address => bytes[])"},"typeName":{"id":5257,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5254,"name":"address","nodeType":"ElementaryTypeName","src":"745:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"737:27:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_bytes_storage_$dyn_storage_$","typeString":"mapping(address => bytes[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":5255,"name":"bytes","nodeType":"ElementaryTypeName","src":"756:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5256,"nodeType":"ArrayTypeName","src":"756:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"15b1a221748794744cd2960e23ab851c4e6b2b22fbabe81f3404e15eebf0af16","id":5266,"name":"IdentityLinked","nameLocation":"853:14:24","nodeType":"EventDefinition","parameters":{"id":5265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5260,"indexed":false,"mutability":"mutable","name":"evmAddress","nameLocation":"876:10:24","nodeType":"VariableDeclaration","scope":5266,"src":"868:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5259,"name":"address","nodeType":"ElementaryTypeName","src":"868:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5262,"indexed":false,"mutability":"mutable","name":"solanaAddress","nameLocation":"894:13:24","nodeType":"VariableDeclaration","scope":5266,"src":"888:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5261,"name":"bytes","nodeType":"ElementaryTypeName","src":"888:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5264,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"917:9:24","nodeType":"VariableDeclaration","scope":5266,"src":"909:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5263,"name":"uint256","nodeType":"ElementaryTypeName","src":"909:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"867:60:24"},"src":"847:81:24"},{"body":{"id":5277,"nodeType":"Block","src":"1017:2:24","statements":[]},"id":5278,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5273,"name":"_lzEndpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"993:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5274,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5270,"src":"1006:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5275,"kind":"baseConstructorSpecifier","modifierName":{"id":5272,"name":"OApp","nameLocations":["988:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":1806,"src":"988:4:24"},"nodeType":"ModifierInvocation","src":"988:28:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5268,"mutability":"mutable","name":"_lzEndpoint","nameLocation":"956:11:24","nodeType":"VariableDeclaration","scope":5278,"src":"948:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5267,"name":"address","nodeType":"ElementaryTypeName","src":"948:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5270,"mutability":"mutable","name":"_delegate","nameLocation":"977:9:24","nodeType":"VariableDeclaration","scope":5278,"src":"969:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5269,"name":"address","nodeType":"ElementaryTypeName","src":"969:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"947:40:24"},"returnParameters":{"id":5276,"nodeType":"ParameterList","parameters":[],"src":"1017:0:24"},"scope":5824,"src":"936:83:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5386,"nodeType":"Block","src":"1231:1447:24","statements":[{"assignments":[5285],"declarations":[{"constant":false,"id":5285,"mutability":"mutable","name":"evmAddressStr","nameLocation":"1385:13:24","nodeType":"VariableDeclaration","scope":5386,"src":"1371:27:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5284,"name":"string","nodeType":"ElementaryTypeName","src":"1371:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5290,"initialValue":{"arguments":[{"expression":{"id":5287,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1417:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1421:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1417:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5286,"name":"addressToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"1401:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1401:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1371:57:24"},{"assignments":[5292],"declarations":[{"constant":false,"id":5292,"mutability":"mutable","name":"timestampStr","nameLocation":"1453:12:24","nodeType":"VariableDeclaration","scope":5386,"src":"1439:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5291,"name":"string","nodeType":"ElementaryTypeName","src":"1439:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5297,"initialValue":{"arguments":[{"expression":{"id":5294,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1484:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1490:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"1484:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5293,"name":"uint256ToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"1468:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1468:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1439:61:24"},{"assignments":[5299],"declarations":[{"constant":false,"id":5299,"mutability":"mutable","name":"message","nameLocation":"1525:7:24","nodeType":"VariableDeclaration","scope":5386,"src":"1511:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5298,"name":"string","nodeType":"ElementaryTypeName","src":"1511:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5311,"initialValue":{"arguments":[{"arguments":[{"id":5304,"name":"evmAddressStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"1573:13:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1588:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5306,"name":"_solanaAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"1607:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1623:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5308,"name":"timestampStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"1642:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5302,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1542:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1546:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"1542:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1542:123:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1535:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5300,"name":"string","nodeType":"ElementaryTypeName","src":"1535:6:24","typeDescriptions":{}}},"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:131:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1511:155:24"},{"assignments":[5313],"declarations":[{"constant":false,"id":5313,"mutability":"mutable","name":"payload","nameLocation":"1748:7:24","nodeType":"VariableDeclaration","scope":5386,"src":"1735:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5312,"name":"bytes","nodeType":"ElementaryTypeName","src":"1735:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5318,"initialValue":{"arguments":[{"id":5316,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5299,"src":"1764:7:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1758:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5314,"name":"bytes","nodeType":"ElementaryTypeName","src":"1758:5:24","typeDescriptions":{}}},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1758:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1735:37:24"},{"expression":{"arguments":[{"arguments":[{"id":5326,"name":"_solanaAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"1878:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1872:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5324,"name":"bytes","nodeType":"ElementaryTypeName","src":"1872:5:24","typeDescriptions":{}}},"id":5327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1872:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"baseExpression":{"id":5319,"name":"linkedSolanaAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"1833:21:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_bytes_storage_$dyn_storage_$","typeString":"mapping(address => bytes storage ref[] storage ref)"}},"id":5322,"indexExpression":{"expression":{"id":5320,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1855:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1859:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1855:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1833:33:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage","typeString":"bytes storage ref[] storage ref"}},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1867:4:24","memberName":"push","nodeType":"MemberAccess","src":"1833:38:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes_storage_$dyn_storage_ptr_$_t_bytes_storage_$returns$__$attached_to$_t_array$_t_bytes_storage_$dyn_storage_ptr_$","typeString":"function (bytes storage ref[] storage pointer,bytes storage ref)"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1833:61:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5329,"nodeType":"ExpressionStatement","src":"1833:61:24"},{"eventCall":{"arguments":[{"expression":{"id":5331,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1950:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1954:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1950:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":5335,"name":"_solanaAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"1968:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5334,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1962:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5333,"name":"bytes","nodeType":"ElementaryTypeName","src":"1962:5:24","typeDescriptions":{}}},"id":5336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1962:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":5337,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1985:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1991:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"1985:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5330,"name":"IdentityLinked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"1935:14:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1935:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5340,"nodeType":"EmitStatement","src":"1930:71:24"},{"assignments":[5342],"declarations":[{"constant":false,"id":5342,"mutability":"mutable","name":"options","nameLocation":"2085:7:24","nodeType":"VariableDeclaration","scope":5386,"src":"2072:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5341,"name":"bytes","nodeType":"ElementaryTypeName","src":"2072:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5350,"initialValue":{"arguments":[{"hexValue":"323030303030","id":5347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:6:24","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},{"hexValue":"30","id":5348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2158:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5343,"name":"OptionsBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"2095:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OptionsBuilder_$2733_$","typeString":"type(library OptionsBuilder)"}},"id":5344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2110:10:24","memberName":"newOptions","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"2095:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2095:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2123:26:24","memberName":"addExecutorLzReceiveOption","nodeType":"MemberAccess","referencedDeclaration":2457,"src":"2095:54:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint128_$_t_uint128_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint128,uint128) pure returns (bytes memory)"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2095:65:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2072:88:24"},{"assignments":[5353],"declarations":[{"constant":false,"id":5353,"mutability":"mutable","name":"fee","nameLocation":"2253:3:24","nodeType":"VariableDeclaration","scope":5386,"src":"2233:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":5352,"nodeType":"UserDefinedTypeName","pathNode":{"id":5351,"name":"MessagingFee","nameLocations":["2233:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"2233:12:24"},"referencedDeclaration":508,"src":"2233:12:24","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"id":5360,"initialValue":{"arguments":[{"id":5355,"name":"SOLANA_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2266:15:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5356,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"2283:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5357,"name":"options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"2292:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":5358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2301:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5354,"name":"_quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"2259:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bool_$returns$_t_struct$_MessagingFee_$508_memory_ptr_$","typeString":"function (uint32,bytes memory,bytes memory,bool) view returns (struct MessagingFee memory)"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:48:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"nodeType":"VariableDeclarationStatement","src":"2233:74:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5362,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2326:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2330:5:24","memberName":"value","nodeType":"MemberAccess","src":"2326:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":5364,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5353,"src":"2339:3:24","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":5365,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2343:9:24","memberName":"nativeFee","nodeType":"MemberAccess","referencedDeclaration":505,"src":"2339:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2326:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420666565","id":5367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2354:18:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af","typeString":"literal_string \"Insufficient fee\""},"value":"Insufficient fee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af","typeString":"literal_string \"Insufficient fee\""}],"id":5361,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2318:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2318:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5369,"nodeType":"ExpressionStatement","src":"2318:55:24"},{"expression":{"arguments":[{"id":5371,"name":"SOLANA_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2416:15:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5372,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"2483:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5373,"name":"options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"2528:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"expression":{"id":5375,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2586:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2590:5:24","memberName":"value","nodeType":"MemberAccess","src":"2586:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2597:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5374,"name":"MessagingFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2573:12:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MessagingFee_$508_storage_ptr_$","typeString":"type(struct MessagingFee storage pointer)"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},{"arguments":[{"expression":{"id":5381,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2629:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2633:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2629:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2621:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5379,"name":"address","nodeType":"ElementaryTypeName","src":"2621:8:24","stateMutability":"payable","typeDescriptions":{}}},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2621:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5370,"name":"_lzSend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"2394:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_MessagingFee_$508_memory_ptr_$_t_address_$returns$_t_struct$_MessagingReceipt_$503_memory_ptr_$","typeString":"function (uint32,bytes memory,bytes memory,struct MessagingFee memory,address) returns (struct MessagingReceipt memory)"}},"id":5384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:276:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingReceipt_$503_memory_ptr","typeString":"struct MessagingReceipt memory"}},"id":5385,"nodeType":"ExpressionStatement","src":"2394:276:24"}]},"documentation":{"id":5279,"nodeType":"StructuredDocumentation","src":"1027:130:24","text":" @dev Link the sender's EVM address to a Solana address\n @param _solanaAddress Solana address as string"},"functionSelector":"306fed73","id":5387,"implemented":true,"kind":"function","modifiers":[],"name":"linkAddress","nameLocation":"1172:11:24","nodeType":"FunctionDefinition","parameters":{"id":5282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5281,"mutability":"mutable","name":"_solanaAddress","nameLocation":"1198:14:24","nodeType":"VariableDeclaration","scope":5387,"src":"1184:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5280,"name":"string","nodeType":"ElementaryTypeName","src":"1184:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1183:30:24"},"returnParameters":{"id":5283,"nodeType":"ParameterList","parameters":[],"src":"1231:0:24"},"scope":5824,"src":"1163:1515:24","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5490,"nodeType":"Block","src":"2927:459:24","statements":[{"assignments":[5396],"declarations":[{"constant":false,"id":5396,"mutability":"mutable","name":"value","nameLocation":"2946:5:24","nodeType":"VariableDeclaration","scope":5490,"src":"2938:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2938:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5407,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":5403,"name":"_addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5390,"src":"2978:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2970:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5401,"name":"uint160","nodeType":"ElementaryTypeName","src":"2970:7:24","typeDescriptions":{}}},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2970:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":5400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2962:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2962:7:24","typeDescriptions":{}}},"id":5405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2962:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2954:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2954:7:24","typeDescriptions":{}}},"id":5406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2954:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2938:48:24"},{"assignments":[5409],"declarations":[{"constant":false,"id":5409,"mutability":"mutable","name":"alphabet","nameLocation":"3010:8:24","nodeType":"VariableDeclaration","scope":5490,"src":"2997:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5408,"name":"bytes","nodeType":"ElementaryTypeName","src":"2997:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5411,"initialValue":{"hexValue":"30313233343536373839616263646566","id":5410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3021:18:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"nodeType":"VariableDeclarationStatement","src":"2997:42:24"},{"assignments":[5413],"declarations":[{"constant":false,"id":5413,"mutability":"mutable","name":"str","nameLocation":"3073:3:24","nodeType":"VariableDeclaration","scope":5490,"src":"3060:16:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5412,"name":"bytes","nodeType":"ElementaryTypeName","src":"3060:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5418,"initialValue":{"arguments":[{"hexValue":"3432","id":5416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3089:2:24","typeDescriptions":{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"},"value":"42"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"}],"id":5415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3079:9:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5414,"name":"bytes","nodeType":"ElementaryTypeName","src":"3083:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3060:32:24"},{"expression":{"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5419,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3103:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5421,"indexExpression":{"hexValue":"30","id":5420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3107:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3103:6:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3112:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"3103:12:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5424,"nodeType":"ExpressionStatement","src":"3103:12:24"},{"expression":{"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5425,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3126:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5427,"indexExpression":{"hexValue":"31","id":5426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3130:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3126:6:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":5428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3135:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"3126:12:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5430,"nodeType":"ExpressionStatement","src":"3126:12:24"},{"body":{"id":5483,"nodeType":"Block","src":"3192:148:24","statements":[{"expression":{"id":5460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5441,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3207:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5447,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":5442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3211:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5443,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3215:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3219:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3215:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3211:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3207:14:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5448,"name":"alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"3224:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5459,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5451,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5396,"src":"3239:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5455,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5452,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3245:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":5453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3249:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"3245:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3239:13:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":5456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3256:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"3239:18:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3233:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5449,"name":"uint8","nodeType":"ElementaryTypeName","src":"3233:5:24","typeDescriptions":{}}},"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3233:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3224:35:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"3207:52:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5461,"nodeType":"ExpressionStatement","src":"3207:52:24"},{"expression":{"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5462,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3274:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5468,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":5463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3278:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5464,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3282:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":5465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3286:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3282:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3278:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3274:14:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5469,"name":"alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5409,"src":"3291:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5480,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5396,"src":"3306:5:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5476,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5473,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3312:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":5474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3316:2:24","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"3312:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3306:13:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783066","id":5477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3322:4:24","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0x0f"},"src":"3306:20:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3300:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5470,"name":"uint8","nodeType":"ElementaryTypeName","src":"3300:5:24","typeDescriptions":{}}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3300:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3291:37:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"3274:54:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5482,"nodeType":"ExpressionStatement","src":"3274:54:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5435,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3179:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3230","id":5436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3183:2:24","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3179:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5484,"initializationExpression":{"assignments":[5432],"declarations":[{"constant":false,"id":5432,"mutability":"mutable","name":"i","nameLocation":"3172:1:24","nodeType":"VariableDeclaration","scope":5484,"src":"3164:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5431,"name":"uint256","nodeType":"ElementaryTypeName","src":"3164:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5434,"initialValue":{"hexValue":"30","id":5433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3176:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3164:13:24"},"loopExpression":{"expression":{"id":5439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3187:3:24","subExpression":{"id":5438,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"3187:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5440,"nodeType":"ExpressionStatement","src":"3187:3:24"},"nodeType":"ForStatement","src":"3159:181:24"},{"expression":{"arguments":[{"id":5487,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5413,"src":"3374:3:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3367:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5485,"name":"string","nodeType":"ElementaryTypeName","src":"3367:6:24","typeDescriptions":{}}},"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5394,"id":5489,"nodeType":"Return","src":"3360:18:24"}]},"documentation":{"id":5388,"nodeType":"StructuredDocumentation","src":"2690:153:24","text":" @dev Convert an address to a string\n @param _addr The address to convert\n @return String representation of the address"},"id":5491,"implemented":true,"kind":"function","modifiers":[],"name":"addressToString","nameLocation":"2858:15:24","nodeType":"FunctionDefinition","parameters":{"id":5391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5390,"mutability":"mutable","name":"_addr","nameLocation":"2882:5:24","nodeType":"VariableDeclaration","scope":5491,"src":"2874:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5389,"name":"address","nodeType":"ElementaryTypeName","src":"2874:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2873:15:24"},"returnParameters":{"id":5394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5491,"src":"2912:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5392,"name":"string","nodeType":"ElementaryTypeName","src":"2912:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2911:15:24"},"scope":5824,"src":"2849:537:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5569,"nodeType":"Block","src":"3636:506:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5499,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3651:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3661:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3651:11:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5505,"nodeType":"IfStatement","src":"3647:54:24","trueBody":{"id":5504,"nodeType":"Block","src":"3664:37:24","statements":[{"expression":{"hexValue":"30","id":5502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3686:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":5498,"id":5503,"nodeType":"Return","src":"3679:10:24"}]}},{"assignments":[5507],"declarations":[{"constant":false,"id":5507,"mutability":"mutable","name":"temp","nameLocation":"3729:4:24","nodeType":"VariableDeclaration","scope":5569,"src":"3721:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5506,"name":"uint256","nodeType":"ElementaryTypeName","src":"3721:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5509,"initialValue":{"id":5508,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3736:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3721:21:24"},{"assignments":[5511],"declarations":[{"constant":false,"id":5511,"mutability":"mutable","name":"digits","nameLocation":"3761:6:24","nodeType":"VariableDeclaration","scope":5569,"src":"3753:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5510,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5512,"nodeType":"VariableDeclarationStatement","src":"3753:14:24"},{"body":{"id":5523,"nodeType":"Block","src":"3806:60:24","statements":[{"expression":{"id":5517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3821:8:24","subExpression":{"id":5516,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"3821:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5518,"nodeType":"ExpressionStatement","src":"3821:8:24"},{"expression":{"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5519,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"3844:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3852:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"3844:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5522,"nodeType":"ExpressionStatement","src":"3844:10:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5513,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5507,"src":"3795:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3803:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3795:9:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5524,"nodeType":"WhileStatement","src":"3788:78:24"},{"assignments":[5526],"declarations":[{"constant":false,"id":5526,"mutability":"mutable","name":"buffer","nameLocation":"3899:6:24","nodeType":"VariableDeclaration","scope":5569,"src":"3886:19:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5525,"name":"bytes","nodeType":"ElementaryTypeName","src":"3886:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5531,"initialValue":{"arguments":[{"id":5529,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"3918:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3908:9:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5527,"name":"bytes","nodeType":"ElementaryTypeName","src":"3912:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3908:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3886:39:24"},{"body":{"id":5562,"nodeType":"Block","src":"3956:137:24","statements":[{"expression":{"id":5537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5535,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"3971:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":5536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3981:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3971:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5538,"nodeType":"ExpressionStatement","src":"3971:11:24"},{"expression":{"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5539,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"3997:6:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5541,"indexExpression":{"id":5540,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"4004:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3997:14:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":5546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4027:2:24","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5549,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"4040:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3130","id":5550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4049:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"4040:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4032:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5547,"name":"uint256","nodeType":"ElementaryTypeName","src":"4032:7:24","typeDescriptions":{}}},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4027:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4021:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5544,"name":"uint8","nodeType":"ElementaryTypeName","src":"4021:5:24","typeDescriptions":{}}},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4021:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":5543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4014:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":5542,"name":"bytes1","nodeType":"ElementaryTypeName","src":"4014:6:24","typeDescriptions":{}}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4014:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"3997:57:24","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":5557,"nodeType":"ExpressionStatement","src":"3997:57:24"},{"expression":{"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5558,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"4069:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":5559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4079:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"4069:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5561,"nodeType":"ExpressionStatement","src":"4069:12:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5532,"name":"_value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"3943:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3953:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3943:11:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5563,"nodeType":"WhileStatement","src":"3936:157:24"},{"expression":{"arguments":[{"id":5566,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5526,"src":"4127:6:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4120:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5564,"name":"string","nodeType":"ElementaryTypeName","src":"4120:6:24","typeDescriptions":{}}},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4120:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5498,"id":5568,"nodeType":"Return","src":"4113:21:24"}]},"documentation":{"id":5492,"nodeType":"StructuredDocumentation","src":"3398:153:24","text":" @dev Convert a uint256 to a string\n @param _value The uint256 to convert\n @return String representation of the uint256"},"id":5570,"implemented":true,"kind":"function","modifiers":[],"name":"uint256ToString","nameLocation":"3566:15:24","nodeType":"FunctionDefinition","parameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5494,"mutability":"mutable","name":"_value","nameLocation":"3590:6:24","nodeType":"VariableDeclaration","scope":5570,"src":"3582:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5493,"name":"uint256","nodeType":"ElementaryTypeName","src":"3582:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3581:16:24"},"returnParameters":{"id":5498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5570,"src":"3621:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5496,"name":"string","nodeType":"ElementaryTypeName","src":"3621:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3620:15:24"},"scope":5824,"src":"3557:585:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5583,"nodeType":"Block","src":"4426:60:24","statements":[{"expression":{"baseExpression":{"id":5579,"name":"linkedSolanaAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"4444:21:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_bytes_storage_$dyn_storage_$","typeString":"mapping(address => bytes storage ref[] storage ref)"}},"id":5581,"indexExpression":{"id":5580,"name":"_evmAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5573,"src":"4466:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4444:34:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage","typeString":"bytes storage ref[] storage ref"}},"functionReturnParameters":5578,"id":5582,"nodeType":"Return","src":"4437:41:24"}]},"documentation":{"id":5571,"nodeType":"StructuredDocumentation","src":"4150:182:24","text":" @dev Get linked Solana addresses for an EVM address\n @param _evmAddress The EVM address to check\n @return Array of linked Solana addresses as bytes"},"functionSelector":"9541618c","id":5584,"implemented":true,"kind":"function","modifiers":[],"name":"getLinkedAddresses","nameLocation":"4347:18:24","nodeType":"FunctionDefinition","parameters":{"id":5574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5573,"mutability":"mutable","name":"_evmAddress","nameLocation":"4374:11:24","nodeType":"VariableDeclaration","scope":5584,"src":"4366:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5572,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4365:21:24"},"returnParameters":{"id":5578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5584,"src":"4410:14:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5575,"name":"bytes","nodeType":"ElementaryTypeName","src":"4410:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5576,"nodeType":"ArrayTypeName","src":"4410:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"4409:16:24"},"scope":5824,"src":"4338:148:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5640,"nodeType":"Block","src":"4797:341:24","statements":[{"assignments":[5597],"declarations":[{"constant":false,"id":5597,"mutability":"mutable","name":"bytesAddresses","nameLocation":"4823:14:24","nodeType":"VariableDeclaration","scope":5640,"src":"4808:29:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":5595,"name":"bytes","nodeType":"ElementaryTypeName","src":"4808:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":5596,"nodeType":"ArrayTypeName","src":"4808:7:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":5601,"initialValue":{"baseExpression":{"id":5598,"name":"linkedSolanaAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"4840:21:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_bytes_storage_$dyn_storage_$","typeString":"mapping(address => bytes storage ref[] storage ref)"}},"id":5600,"indexExpression":{"id":5599,"name":"_evmAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"4862:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4840:34:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage","typeString":"bytes storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4808:66:24"},{"assignments":[5606],"declarations":[{"constant":false,"id":5606,"mutability":"mutable","name":"strAddresses","nameLocation":"4901:12:24","nodeType":"VariableDeclaration","scope":5640,"src":"4885:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5604,"name":"string","nodeType":"ElementaryTypeName","src":"4885:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5605,"nodeType":"ArrayTypeName","src":"4885:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":5613,"initialValue":{"arguments":[{"expression":{"id":5610,"name":"bytesAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"4929:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4944:6:24","memberName":"length","nodeType":"MemberAccess","src":"4929:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4916:12:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":5607,"name":"string","nodeType":"ElementaryTypeName","src":"4920:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5608,"nodeType":"ArrayTypeName","src":"4920:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4885:66:24"},{"body":{"id":5636,"nodeType":"Block","src":"5021:70:24","statements":[{"expression":{"id":5634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5625,"name":"strAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5606,"src":"5036:12:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":5627,"indexExpression":{"id":5626,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"5049:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5036:15:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":5630,"name":"bytesAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"5061:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5632,"indexExpression":{"id":5631,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"5076:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5061:17:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5054:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5628,"name":"string","nodeType":"ElementaryTypeName","src":"5054:6:24","typeDescriptions":{}}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5054:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5036:43:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":5635,"nodeType":"ExpressionStatement","src":"5036:43:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"4989:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5619,"name":"bytesAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"4993:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":5620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5008:6:24","memberName":"length","nodeType":"MemberAccess","src":"4993:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4989:25:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5637,"initializationExpression":{"assignments":[5615],"declarations":[{"constant":false,"id":5615,"mutability":"mutable","name":"i","nameLocation":"4982:1:24","nodeType":"VariableDeclaration","scope":5637,"src":"4977:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5614,"name":"uint","nodeType":"ElementaryTypeName","src":"4977:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5617,"initialValue":{"hexValue":"30","id":5616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4986:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4977:10:24"},"loopExpression":{"expression":{"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5016:3:24","subExpression":{"id":5622,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"5016:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5624,"nodeType":"ExpressionStatement","src":"5016:3:24"},"nodeType":"ForStatement","src":"4972:119:24"},{"expression":{"id":5638,"name":"strAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5606,"src":"5118:12:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"functionReturnParameters":5592,"id":5639,"nodeType":"Return","src":"5111:19:24"}]},"documentation":{"id":5585,"nodeType":"StructuredDocumentation","src":"4498:195:24","text":" @dev Get linked Solana addresses for an EVM address as strings\n @param _evmAddress The EVM address to check\n @return Array of linked Solana addresses as strings"},"functionSelector":"a6451163","id":5641,"implemented":true,"kind":"function","modifiers":[],"name":"getLinkedAddressesAsStrings","nameLocation":"4708:27:24","nodeType":"FunctionDefinition","parameters":{"id":5588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5587,"mutability":"mutable","name":"_evmAddress","nameLocation":"4744:11:24","nodeType":"VariableDeclaration","scope":5641,"src":"4736:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5586,"name":"address","nodeType":"ElementaryTypeName","src":"4736:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4735:21:24"},"returnParameters":{"id":5592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5641,"src":"4780:15:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5589,"name":"string","nodeType":"ElementaryTypeName","src":"4780:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5590,"nodeType":"ArrayTypeName","src":"4780:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"4779:17:24"},"scope":5824,"src":"4699:439:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5699,"nodeType":"Block","src":"5428:574:24","statements":[{"assignments":[5651],"declarations":[{"constant":false,"id":5651,"mutability":"mutable","name":"evmAddressStr","nameLocation":"5517:13:24","nodeType":"VariableDeclaration","scope":5699,"src":"5503:27:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5650,"name":"string","nodeType":"ElementaryTypeName","src":"5503:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5656,"initialValue":{"arguments":[{"expression":{"id":5653,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5549:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5553:6:24","memberName":"sender","nodeType":"MemberAccess","src":"5549:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5652,"name":"addressToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"5533:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5533:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"5503:57:24"},{"assignments":[5658],"declarations":[{"constant":false,"id":5658,"mutability":"mutable","name":"timestampStr","nameLocation":"5585:12:24","nodeType":"VariableDeclaration","scope":5699,"src":"5571:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5657,"name":"string","nodeType":"ElementaryTypeName","src":"5571:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5663,"initialValue":{"arguments":[{"expression":{"id":5660,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5616:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5622:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5616:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5659,"name":"uint256ToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"5600:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5600:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"5571:61:24"},{"assignments":[5665],"declarations":[{"constant":false,"id":5665,"mutability":"mutable","name":"message","nameLocation":"5657:7:24","nodeType":"VariableDeclaration","scope":5699,"src":"5643:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5664,"name":"string","nodeType":"ElementaryTypeName","src":"5643:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5677,"initialValue":{"arguments":[{"arguments":[{"id":5670,"name":"evmAddressStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5651,"src":"5705:13:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5720:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5672,"name":"_solanaAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5644,"src":"5739:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5755:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5674,"name":"timestampStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"5774:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5668,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5674:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5678:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"5674:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5674:123:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5667:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5666,"name":"string","nodeType":"ElementaryTypeName","src":"5667:6:24","typeDescriptions":{}}},"id":5676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5667:131:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"5643:155:24"},{"assignments":[5679],"declarations":[{"constant":false,"id":5679,"mutability":"mutable","name":"payload","nameLocation":"5832:7:24","nodeType":"VariableDeclaration","scope":5699,"src":"5819:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5678,"name":"bytes","nodeType":"ElementaryTypeName","src":"5819:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5684,"initialValue":{"arguments":[{"id":5682,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5665,"src":"5848:7:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5842:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5680,"name":"bytes","nodeType":"ElementaryTypeName","src":"5842:5:24","typeDescriptions":{}}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5842:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5819:37:24"},{"assignments":[5686],"declarations":[{"constant":false,"id":5686,"mutability":"mutable","name":"options","nameLocation":"5880:7:24","nodeType":"VariableDeclaration","scope":5699,"src":"5867:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5685,"name":"bytes","nodeType":"ElementaryTypeName","src":"5867:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5691,"initialValue":{"arguments":[{"hexValue":"","id":5689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5896:2:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5890:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5687,"name":"bytes","nodeType":"ElementaryTypeName","src":"5890:5:24","typeDescriptions":{}}},"id":5690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5890:9:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5867:32:24"},{"expression":{"arguments":[{"id":5693,"name":"SOLANA_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"5953:15:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5694,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5679,"src":"5970:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5695,"name":"options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5686,"src":"5979:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":5696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5988:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5692,"name":"_quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5946:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bool_$returns$_t_struct$_MessagingFee_$508_memory_ptr_$","typeString":"function (uint32,bytes memory,bytes memory,bool) view returns (struct MessagingFee memory)"}},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5946:48:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"functionReturnParameters":5649,"id":5698,"nodeType":"Return","src":"5939:55:24"}]},"documentation":{"id":5642,"nodeType":"StructuredDocumentation","src":"5146:176:24","text":" @dev Quote the fee for sending a message to Solana\n @param _solanaAddress The Solana address to link\n @return fee The estimated messaging fee"},"functionSelector":"56368126","id":5700,"implemented":true,"kind":"function","modifiers":[],"name":"quoteLinkFee","nameLocation":"5337:12:24","nodeType":"FunctionDefinition","parameters":{"id":5645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5644,"mutability":"mutable","name":"_solanaAddress","nameLocation":"5364:14:24","nodeType":"VariableDeclaration","scope":5700,"src":"5350:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5643,"name":"string","nodeType":"ElementaryTypeName","src":"5350:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5349:30:24"},"returnParameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5648,"mutability":"mutable","name":"fee","nameLocation":"5423:3:24","nodeType":"VariableDeclaration","scope":5700,"src":"5403:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":5647,"nodeType":"UserDefinedTypeName","pathNode":{"id":5646,"name":"MessagingFee","nameLocations":["5403:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"5403:12:24"},"referencedDeclaration":508,"src":"5403:12:24","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"src":"5402:25:24"},"scope":5824,"src":"5328:674:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5766,"nodeType":"Block","src":"6278:735:24","statements":[{"assignments":[5709],"declarations":[{"constant":false,"id":5709,"mutability":"mutable","name":"evmAddressStr","nameLocation":"6357:13:24","nodeType":"VariableDeclaration","scope":5766,"src":"6343:27:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5708,"name":"string","nodeType":"ElementaryTypeName","src":"6343:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5714,"initialValue":{"arguments":[{"expression":{"id":5711,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6389:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6393:6:24","memberName":"sender","nodeType":"MemberAccess","src":"6389:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5710,"name":"addressToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"6373:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6343:57:24"},{"assignments":[5716],"declarations":[{"constant":false,"id":5716,"mutability":"mutable","name":"timestampStr","nameLocation":"6425:12:24","nodeType":"VariableDeclaration","scope":5766,"src":"6411:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5715,"name":"string","nodeType":"ElementaryTypeName","src":"6411:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5721,"initialValue":{"arguments":[{"expression":{"id":5718,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6456:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6462:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"6456:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5717,"name":"uint256ToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"6440:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6440:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6411:61:24"},{"assignments":[5723],"declarations":[{"constant":false,"id":5723,"mutability":"mutable","name":"message","nameLocation":"6497:7:24","nodeType":"VariableDeclaration","scope":5766,"src":"6483:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5722,"name":"string","nodeType":"ElementaryTypeName","src":"6483:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5735,"initialValue":{"arguments":[{"arguments":[{"id":5728,"name":"evmAddressStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5709,"src":"6545:13:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6560:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5730,"name":"_solanaAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5703,"src":"6579:14:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6595:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"id":5732,"name":"timestampStr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5716,"src":"6614:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5726,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6514:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6518:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"6514:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6514:123:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6507:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5724,"name":"string","nodeType":"ElementaryTypeName","src":"6507:6:24","typeDescriptions":{}}},"id":5734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6507:131:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"6483:155:24"},{"assignments":[5737],"declarations":[{"constant":false,"id":5737,"mutability":"mutable","name":"payload","nameLocation":"6672:7:24","nodeType":"VariableDeclaration","scope":5766,"src":"6659:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5736,"name":"bytes","nodeType":"ElementaryTypeName","src":"6659:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5742,"initialValue":{"arguments":[{"id":5740,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"6688:7:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6682:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5738,"name":"bytes","nodeType":"ElementaryTypeName","src":"6682:5:24","typeDescriptions":{}}},"id":5741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6682:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6659:37:24"},{"assignments":[5744],"declarations":[{"constant":false,"id":5744,"mutability":"mutable","name":"options","nameLocation":"6804:7:24","nodeType":"VariableDeclaration","scope":5766,"src":"6791:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5743,"name":"bytes","nodeType":"ElementaryTypeName","src":"6791:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5752,"initialValue":{"arguments":[{"hexValue":"323030303030","id":5749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6869:6:24","typeDescriptions":{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},"value":"200000"},{"hexValue":"30","id":5750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6877:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200000_by_1","typeString":"int_const 200000"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5745,"name":"OptionsBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"6814:14:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OptionsBuilder_$2733_$","typeString":"type(library OptionsBuilder)"}},"id":5746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6829:10:24","memberName":"newOptions","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"6814:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6814:27:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:26:24","memberName":"addExecutorLzReceiveOption","nodeType":"MemberAccess","referencedDeclaration":2457,"src":"6814:54:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint128_$_t_uint128_$returns$_t_bytes_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint128,uint128) pure returns (bytes memory)"}},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6814:65:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6791:88:24"},{"assignments":[5755],"declarations":[{"constant":false,"id":5755,"mutability":"mutable","name":"fee","nameLocation":"6920:3:24","nodeType":"VariableDeclaration","scope":5766,"src":"6900:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee"},"typeName":{"id":5754,"nodeType":"UserDefinedTypeName","pathNode":{"id":5753,"name":"MessagingFee","nameLocations":["6900:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"6900:12:24"},"referencedDeclaration":508,"src":"6900:12:24","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_storage_ptr","typeString":"struct MessagingFee"}},"visibility":"internal"}],"id":5762,"initialValue":{"arguments":[{"id":5757,"name":"SOLANA_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"6933:15:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5758,"name":"payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5737,"src":"6950:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5759,"name":"options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5744,"src":"6959:7:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":5760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6968:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5756,"name":"_quote","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"6926:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bool_$returns$_t_struct$_MessagingFee_$508_memory_ptr_$","typeString":"function (uint32,bytes memory,bytes memory,bool) view returns (struct MessagingFee memory)"}},"id":5761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6926:48:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"nodeType":"VariableDeclarationStatement","src":"6900:74:24"},{"expression":{"expression":{"id":5763,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5755,"src":"6992:3:24","typeDescriptions":{"typeIdentifier":"t_struct$_MessagingFee_$508_memory_ptr","typeString":"struct MessagingFee memory"}},"id":5764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6996:9:24","memberName":"nativeFee","nodeType":"MemberAccess","referencedDeclaration":505,"src":"6992:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5707,"id":5765,"nodeType":"Return","src":"6985:20:24"}]},"documentation":{"id":5701,"nodeType":"StructuredDocumentation","src":"6010:174:24","text":" @dev Quote the fee for linking an address\n @param _solanaAddress Solana address as string\n @return Fee required for the cross-chain message"},"functionSelector":"bf3f3de9","id":5767,"implemented":true,"kind":"function","modifiers":[],"name":"quoteLinkAddress","nameLocation":"6199:16:24","nodeType":"FunctionDefinition","parameters":{"id":5704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5703,"mutability":"mutable","name":"_solanaAddress","nameLocation":"6230:14:24","nodeType":"VariableDeclaration","scope":5767,"src":"6216:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5702,"name":"string","nodeType":"ElementaryTypeName","src":"6216:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6215:30:24"},"returnParameters":{"id":5707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5767,"src":"6269:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5705,"name":"uint256","nodeType":"ElementaryTypeName","src":"6269:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6268:9:24"},"scope":5824,"src":"6190:823:24","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2087],"body":{"id":5783,"nodeType":"Block","src":"7409:120:24","statements":[]},"documentation":{"id":5768,"nodeType":"StructuredDocumentation","src":"7021:181:24","text":" @dev Override the _lzReceive function to handle incoming messages (if needed)\n This would be used if you want to receive messages from Solana back to EVM"},"id":5784,"implemented":true,"kind":"function","modifiers":[],"name":"_lzReceive","nameLocation":"7217:10:24","nodeType":"FunctionDefinition","overrides":{"id":5781,"nodeType":"OverrideSpecifier","overrides":[],"src":"7400:8:24"},"parameters":{"id":5780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5771,"mutability":"mutable","name":"_origin","nameLocation":"7254:7:24","nodeType":"VariableDeclaration","scope":5784,"src":"7238:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_calldata_ptr","typeString":"struct Origin"},"typeName":{"id":5770,"nodeType":"UserDefinedTypeName","pathNode":{"id":5769,"name":"Origin","nameLocations":["7238:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":515,"src":"7238:6:24"},"referencedDeclaration":515,"src":"7238:6:24","typeDescriptions":{"typeIdentifier":"t_struct$_Origin_$515_storage_ptr","typeString":"struct Origin"}},"visibility":"internal"},{"constant":false,"id":5773,"mutability":"mutable","name":"_guid","nameLocation":"7280:5:24","nodeType":"VariableDeclaration","scope":5784,"src":"7272:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7272:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5775,"mutability":"mutable","name":"_payload","nameLocation":"7311:8:24","nodeType":"VariableDeclaration","scope":5784,"src":"7296:23:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5774,"name":"bytes","nodeType":"ElementaryTypeName","src":"7296:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5777,"mutability":"mutable","name":"_executor","nameLocation":"7338:9:24","nodeType":"VariableDeclaration","scope":5784,"src":"7330:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5776,"name":"address","nodeType":"ElementaryTypeName","src":"7330:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5779,"mutability":"mutable","name":"_extraData","nameLocation":"7373:10:24","nodeType":"VariableDeclaration","scope":5784,"src":"7358:25:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5778,"name":"bytes","nodeType":"ElementaryTypeName","src":"7358:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7227:163:24"},"returnParameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"7409:0:24"},"scope":5824,"src":"7208:321:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5796,"nodeType":"Block","src":"7709:39:24","statements":[{"expression":{"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5792,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"7720:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5793,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"7731:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7720:20:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5795,"nodeType":"ExpressionStatement","src":"7720:20:24"}]},"documentation":{"id":5785,"nodeType":"StructuredDocumentation","src":"7537:107:24","text":" @dev Update the gas limit for cross-chain calls\n @param _gasLimit New gas limit"},"functionSelector":"ee7d72b4","id":5797,"implemented":true,"kind":"function","modifiers":[{"id":5790,"kind":"modifierInvocation","modifierName":{"id":5789,"name":"onlyOwner","nameLocations":["7699:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"7699:9:24"},"nodeType":"ModifierInvocation","src":"7699:9:24"}],"name":"setGasLimit","nameLocation":"7659:11:24","nodeType":"FunctionDefinition","parameters":{"id":5788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5787,"mutability":"mutable","name":"_gasLimit","nameLocation":"7679:9:24","nodeType":"VariableDeclaration","scope":5797,"src":"7671:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5786,"name":"uint256","nodeType":"ElementaryTypeName","src":"7671:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7670:19:24"},"returnParameters":{"id":5791,"nodeType":"ParameterList","parameters":[],"src":"7709:0:24"},"scope":5824,"src":"7650:98:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5822,"nodeType":"Block","src":"7868:130:24","statements":[{"assignments":[5804,null],"declarations":[{"constant":false,"id":5804,"mutability":"mutable","name":"success","nameLocation":"7885:7:24","nodeType":"VariableDeclaration","scope":5822,"src":"7880:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5803,"name":"bool","nodeType":"ElementaryTypeName","src":"7880:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5816,"initialValue":{"arguments":[{"hexValue":"","id":5814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7941:2:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5805,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"7898:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7906:4:24","memberName":"call","nodeType":"MemberAccess","src":"7898:12:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":5810,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7926:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_OmnichainIdentityLinker_$5824","typeString":"contract OmnichainIdentityLinker"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OmnichainIdentityLinker_$5824","typeString":"contract OmnichainIdentityLinker"}],"id":5809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7918:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5808,"name":"address","nodeType":"ElementaryTypeName","src":"7918:7:24","typeDescriptions":{}}},"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7918:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7932:7:24","memberName":"balance","nodeType":"MemberAccess","src":"7918:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"7898:42:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7879:65:24"},{"expression":{"arguments":[{"id":5818,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"7963:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":5819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7972:17:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":5817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7955:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7955:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5821,"nodeType":"ExpressionStatement","src":"7955:35:24"}]},"documentation":{"id":5798,"nodeType":"StructuredDocumentation","src":"7756:67:24","text":" @dev Withdraw any stuck funds (admin function)"},"functionSelector":"3ccfd60b","id":5823,"implemented":true,"kind":"function","modifiers":[{"id":5801,"kind":"modifierInvocation","modifierName":{"id":5800,"name":"onlyOwner","nameLocations":["7858:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":2765,"src":"7858:9:24"},"nodeType":"ModifierInvocation","src":"7858:9:24"}],"name":"withdraw","nameLocation":"7838:8:24","nodeType":"FunctionDefinition","parameters":{"id":5799,"nodeType":"ParameterList","parameters":[],"src":"7846:2:24"},"returnParameters":{"id":5802,"nodeType":"ParameterList","parameters":[],"src":"7868:0:24"},"scope":5824,"src":"7829:169:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5825,"src":"388:7613:24","usedErrors":[1952,2110,2112,2285,2289,2291,2293,2394],"usedEvents":[2299,2747,5266]}],"src":"33:7970:24"},"id":24},"solidity-bytes-utils/contracts/BytesLib.sol":{"ast":{"absolutePath":"solidity-bytes-utils/contracts/BytesLib.sol","exportedSymbols":{"BytesLib":[6158]},"id":6159,"license":"Unlicense","nodeType":"SourceUnit","nodes":[{"id":5826,"literals":["solidity",">=","0.8",".0","<","0.9",".0"],"nodeType":"PragmaDirective","src":"336:31:25"},{"abstract":false,"baseContracts":[],"canonicalName":"BytesLib","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":6158,"linearizedBaseContracts":[6158],"name":"BytesLib","nameLocation":"378:8:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":5841,"nodeType":"Block","src":"545:2803:25","statements":[{"assignments":[5836],"declarations":[{"constant":false,"id":5836,"mutability":"mutable","name":"tempBytes","nameLocation":"568:9:25","nodeType":"VariableDeclaration","scope":5841,"src":"555:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5835,"name":"bytes","nodeType":"ElementaryTypeName","src":"555:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5837,"nodeType":"VariableDeclarationStatement","src":"555:22:25"},{"AST":{"nodeType":"YulBlock","src":"597:2718:25","statements":[{"nodeType":"YulAssignment","src":"741:24:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"760:4:25","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"754:5:25"},"nodeType":"YulFunctionCall","src":"754:11:25"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"741:9:25"}]},{"nodeType":"YulVariableDeclaration","src":"897:30:25","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"917:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"911:5:25"},"nodeType":"YulFunctionCall","src":"911:16:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"901:6:25","type":""}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"947:9:25"},{"name":"length","nodeType":"YulIdentifier","src":"958:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"940:6:25"},"nodeType":"YulFunctionCall","src":"940:25:25"},"nodeType":"YulExpressionStatement","src":"940:25:25"},{"nodeType":"YulVariableDeclaration","src":"1175:30:25","value":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"1189:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1200:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1185:3:25"},"nodeType":"YulFunctionCall","src":"1185:20:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"1179:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1330:26:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1345:2:25"},{"name":"length","nodeType":"YulIdentifier","src":"1349:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1341:3:25"},"nodeType":"YulFunctionCall","src":"1341:15:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"1334:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1733:162:25","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1867:2:25"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1877:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1871:5:25"},"nodeType":"YulFunctionCall","src":"1871:9:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1860:6:25"},"nodeType":"YulFunctionCall","src":"1860:21:25"},"nodeType":"YulExpressionStatement","src":"1860:21:25"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1566:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"1570:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1563:2:25"},"nodeType":"YulFunctionCall","src":"1563:11:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1575:157:25","statements":[{"nodeType":"YulAssignment","src":"1663:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"1673:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"1677:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1669:3:25"},"nodeType":"YulFunctionCall","src":"1669:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"1663:2:25"}]},{"nodeType":"YulAssignment","src":"1699:19:25","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"1709:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"1713:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1705:3:25"},"nodeType":"YulFunctionCall","src":"1705:13:25"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"1699:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1374:188:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1518:30:25","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"1532:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1543:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1528:3:25"},"nodeType":"YulFunctionCall","src":"1528:20:25"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"1522:2:25","type":""}]}]},"src":"1370:525:25"},{"nodeType":"YulAssignment","src":"2096:27:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2112:10:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2106:5:25"},"nodeType":"YulFunctionCall","src":"2106:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2096:6:25"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2143:9:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2158:6:25"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"2172:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2166:5:25"},"nodeType":"YulFunctionCall","src":"2166:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2154:3:25"},"nodeType":"YulFunctionCall","src":"2154:29:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2136:6:25"},"nodeType":"YulFunctionCall","src":"2136:48:25"},"nodeType":"YulExpressionStatement","src":"2136:48:25"},{"nodeType":"YulAssignment","src":"2322:9:25","value":{"name":"end","nodeType":"YulIdentifier","src":"2328:3:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2322:2:25"}]},{"nodeType":"YulAssignment","src":"2458:22:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2469:2:25"},{"name":"length","nodeType":"YulIdentifier","src":"2473:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2465:3:25"},"nodeType":"YulFunctionCall","src":"2465:15:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2458:3:25"}]},{"body":{"nodeType":"YulBlock","src":"2662:53:25","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2687:2:25"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2697:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2691:5:25"},"nodeType":"YulFunctionCall","src":"2691:9:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2680:6:25"},"nodeType":"YulFunctionCall","src":"2680:21:25"},"nodeType":"YulExpressionStatement","src":"2680:21:25"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2565:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"2569:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:25"},"nodeType":"YulFunctionCall","src":"2562:11:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2574:87:25","statements":[{"nodeType":"YulAssignment","src":"2592:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"2602:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"2606:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2598:3:25"},"nodeType":"YulFunctionCall","src":"2598:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"2592:2:25"}]},{"nodeType":"YulAssignment","src":"2628:19:25","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"2638:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"2642:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:25"},"nodeType":"YulFunctionCall","src":"2634:13:25"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"2628:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"2498:63:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2516:31:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"2530:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2542:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2526:3:25"},"nodeType":"YulFunctionCall","src":"2526:21:25"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"2520:2:25","type":""}]}]},"src":"2494:221:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:4:25","type":"","value":"0x40"},{"arguments":[{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"3180:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3196:6:25"},{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"3210:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3204:5:25"},"nodeType":"YulFunctionCall","src":"3204:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3192:3:25"},"nodeType":"YulFunctionCall","src":"3192:29:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3185:6:25"},"nodeType":"YulFunctionCall","src":"3185:37:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3176:3:25"},"nodeType":"YulFunctionCall","src":"3176:47:25"},{"kind":"number","nodeType":"YulLiteral","src":"3225:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3172:3:25"},"nodeType":"YulFunctionCall","src":"3172:56:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3248:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3244:3:25"},"nodeType":"YulFunctionCall","src":"3244:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3153:3:25"},"nodeType":"YulFunctionCall","src":"3153:151:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3140:6:25"},"nodeType":"YulFunctionCall","src":"3140:165:25"},"nodeType":"YulExpressionStatement","src":"3140:165:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":5830,"isOffset":false,"isSlot":false,"src":"2112:10:25","valueSize":1},{"declaration":5830,"isOffset":false,"isSlot":false,"src":"2530:10:25","valueSize":1},{"declaration":5828,"isOffset":false,"isSlot":false,"src":"1532:9:25","valueSize":1},{"declaration":5828,"isOffset":false,"isSlot":false,"src":"3210:9:25","valueSize":1},{"declaration":5828,"isOffset":false,"isSlot":false,"src":"917:9:25","valueSize":1},{"declaration":5836,"isOffset":false,"isSlot":false,"src":"1189:9:25","valueSize":1},{"declaration":5836,"isOffset":false,"isSlot":false,"src":"2143:9:25","valueSize":1},{"declaration":5836,"isOffset":false,"isSlot":false,"src":"2172:9:25","valueSize":1},{"declaration":5836,"isOffset":false,"isSlot":false,"src":"741:9:25","valueSize":1},{"declaration":5836,"isOffset":false,"isSlot":false,"src":"947:9:25","valueSize":1}],"id":5838,"nodeType":"InlineAssembly","src":"588:2727:25"},{"expression":{"id":5839,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5836,"src":"3332:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5834,"id":5840,"nodeType":"Return","src":"3325:16:25"}]},"id":5842,"implemented":true,"kind":"function","modifiers":[],"name":"concat","nameLocation":"402:6:25","nodeType":"FunctionDefinition","parameters":{"id":5831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5828,"mutability":"mutable","name":"_preBytes","nameLocation":"431:9:25","nodeType":"VariableDeclaration","scope":5842,"src":"418:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5827,"name":"bytes","nodeType":"ElementaryTypeName","src":"418:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5830,"mutability":"mutable","name":"_postBytes","nameLocation":"463:10:25","nodeType":"VariableDeclaration","scope":5842,"src":"450:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5829,"name":"bytes","nodeType":"ElementaryTypeName","src":"450:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"408:71:25"},"returnParameters":{"id":5834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5842,"src":"527:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5832,"name":"bytes","nodeType":"ElementaryTypeName","src":"527:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"526:14:25"},"scope":6158,"src":"393:2955:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5850,"nodeType":"Block","src":"3436:6015:25","statements":[{"AST":{"nodeType":"YulBlock","src":"3455:5990:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:34:25","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"3697:14:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3691:5:25"},"nodeType":"YulFunctionCall","src":"3691:21:25"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"3682:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4205:76:25","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4228:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4243:5:25","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"4261:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4268:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4257:3:25"},"nodeType":"YulFunctionCall","src":"4257:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4250:6:25"},"nodeType":"YulFunctionCall","src":"4250:21:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4239:3:25"},"nodeType":"YulFunctionCall","src":"4239:33:25"},{"kind":"number","nodeType":"YulLiteral","src":"4274:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4235:3:25"},"nodeType":"YulFunctionCall","src":"4235:41:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4224:3:25"},"nodeType":"YulFunctionCall","src":"4224:53:25"},{"kind":"number","nodeType":"YulLiteral","src":"4279:1:25","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4220:3:25"},"nodeType":"YulFunctionCall","src":"4220:61:25"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"4209:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4294:32:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"4315:10:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4309:5:25"},"nodeType":"YulFunctionCall","src":"4309:17:25"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"4298:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4339:38:25","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4360:7:25"},{"name":"mlength","nodeType":"YulIdentifier","src":"4369:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4356:3:25"},"nodeType":"YulFunctionCall","src":"4356:21:25"},"variables":[{"name":"newlength","nodeType":"YulTypedName","src":"4343:9:25","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4710:1485:25","statements":[{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"4991:14:25"},{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"5303:5:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"5521:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"5533:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5517:3:25"},"nodeType":"YulFunctionCall","src":"5517:21:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5511:5:25"},"nodeType":"YulFunctionCall","src":"5511:28:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5648:5:25","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5659:2:25","type":"","value":"32"},{"name":"mlength","nodeType":"YulIdentifier","src":"5663:7:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5655:3:25"},"nodeType":"YulFunctionCall","src":"5655:16:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5644:3:25"},"nodeType":"YulFunctionCall","src":"5644:28:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5404:3:25"},"nodeType":"YulFunctionCall","src":"5404:302:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5895:5:25","type":"","value":"0x100"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5906:2:25","type":"","value":"32"},{"name":"newlength","nodeType":"YulIdentifier","src":"5910:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5902:3:25"},"nodeType":"YulFunctionCall","src":"5902:18:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5891:3:25"},"nodeType":"YulFunctionCall","src":"5891:30:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5367:3:25"},"nodeType":"YulFunctionCall","src":"5367:584:25"},{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"6104:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"6113:1:25","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6100:3:25"},"nodeType":"YulFunctionCall","src":"6100:15:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5334:3:25"},"nodeType":"YulFunctionCall","src":"5334:807:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5134:3:25"},"nodeType":"YulFunctionCall","src":"5134:1029:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4963:6:25"},"nodeType":"YulFunctionCall","src":"4963:1218:25"},"nodeType":"YulExpressionStatement","src":"4963:1218:25"}]},"nodeType":"YulCase","src":"4703:1492:25","value":{"kind":"number","nodeType":"YulLiteral","src":"4708:1:25","type":"","value":"2"}},{"body":{"nodeType":"YulBlock","src":"6215:1935:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6424:3:25","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"6429:14:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6417:6:25"},"nodeType":"YulFunctionCall","src":"6417:27:25"},"nodeType":"YulExpressionStatement","src":"6417:27:25"},{"nodeType":"YulVariableDeclaration","src":"6461:53:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6485:3:25","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"6490:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"6475:9:25"},"nodeType":"YulFunctionCall","src":"6475:20:25"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"6501:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"6510:2:25","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6497:3:25"},"nodeType":"YulFunctionCall","src":"6497:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6471:3:25"},"nodeType":"YulFunctionCall","src":"6471:43:25"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"6465:2:25","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"6574:14:25"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"6598:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6609:1:25","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6594:3:25"},"nodeType":"YulFunctionCall","src":"6594:17:25"},{"kind":"number","nodeType":"YulLiteral","src":"6613:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6590:3:25"},"nodeType":"YulFunctionCall","src":"6590:25:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6567:6:25"},"nodeType":"YulFunctionCall","src":"6567:49:25"},"nodeType":"YulExpressionStatement","src":"6567:49:25"},{"nodeType":"YulVariableDeclaration","src":"7204:30:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7222:2:25","type":"","value":"32"},{"name":"slength","nodeType":"YulIdentifier","src":"7226:7:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7218:3:25"},"nodeType":"YulFunctionCall","src":"7218:16:25"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"7208:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7251:33:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"7265:10:25"},{"name":"submod","nodeType":"YulIdentifier","src":"7277:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7261:3:25"},"nodeType":"YulFunctionCall","src":"7261:23:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"7255:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7301:35:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"7316:10:25"},{"name":"mlength","nodeType":"YulIdentifier","src":"7328:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7312:3:25"},"nodeType":"YulFunctionCall","src":"7312:24:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"7305:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7353:38:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:5:25","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"7380:6:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"7369:3:25"},"nodeType":"YulFunctionCall","src":"7369:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"7389:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7365:3:25"},"nodeType":"YulFunctionCall","src":"7365:26:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"7357:4:25","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7437:2:25"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"7523:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"7558:66:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7490:3:25"},"nodeType":"YulFunctionCall","src":"7490:160:25"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7686:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7680:5:25"},"nodeType":"YulFunctionCall","src":"7680:9:25"},{"name":"mask","nodeType":"YulIdentifier","src":"7691:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7676:3:25"},"nodeType":"YulFunctionCall","src":"7676:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7461:3:25"},"nodeType":"YulFunctionCall","src":"7461:257:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7409:6:25"},"nodeType":"YulFunctionCall","src":"7409:327:25"},"nodeType":"YulExpressionStatement","src":"7409:327:25"},{"body":{"nodeType":"YulBlock","src":"7964:61:25","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7993:2:25"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8003:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7997:5:25"},"nodeType":"YulFunctionCall","src":"7997:9:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7986:6:25"},"nodeType":"YulFunctionCall","src":"7986:21:25"},"nodeType":"YulExpressionStatement","src":"7986:21:25"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7858:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"7862:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7855:2:25"},"nodeType":"YulFunctionCall","src":"7855:11:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7867:96:25","statements":[{"nodeType":"YulAssignment","src":"7889:16:25","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7899:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7903:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7895:3:25"},"nodeType":"YulFunctionCall","src":"7895:10:25"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7889:2:25"}]},{"nodeType":"YulAssignment","src":"7926:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7936:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7940:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7932:3:25"},"nodeType":"YulFunctionCall","src":"7932:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7926:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"7758:96:25","statements":[{"nodeType":"YulAssignment","src":"7780:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7790:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7794:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7786:3:25"},"nodeType":"YulFunctionCall","src":"7786:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7780:2:25"}]},{"nodeType":"YulAssignment","src":"7820:16:25","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"7830:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"7834:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7826:3:25"},"nodeType":"YulFunctionCall","src":"7826:10:25"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"7820:2:25"}]}]},"src":"7754:271:25"},{"nodeType":"YulAssignment","src":"8043:32:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8055:5:25","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8066:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"8070:3:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8062:3:25"},"nodeType":"YulFunctionCall","src":"8062:12:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8051:3:25"},"nodeType":"YulFunctionCall","src":"8051:24:25"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"8043:4:25"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8100:2:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8118:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8112:5:25"},"nodeType":"YulFunctionCall","src":"8112:9:25"},{"name":"mask","nodeType":"YulIdentifier","src":"8123:4:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8108:3:25"},"nodeType":"YulFunctionCall","src":"8108:20:25"},{"name":"mask","nodeType":"YulIdentifier","src":"8130:4:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8104:3:25"},"nodeType":"YulFunctionCall","src":"8104:31:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8093:6:25"},"nodeType":"YulFunctionCall","src":"8093:43:25"},"nodeType":"YulExpressionStatement","src":"8093:43:25"}]},"nodeType":"YulCase","src":"6208:1942:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6213:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8171:1264:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8268:3:25","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"8273:14:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:25"},"nodeType":"YulFunctionCall","src":"8261:27:25"},"nodeType":"YulExpressionStatement","src":"8261:27:25"},{"nodeType":"YulVariableDeclaration","src":"8381:53:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8405:3:25","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"8410:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8395:9:25"},"nodeType":"YulFunctionCall","src":"8395:20:25"},{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"8421:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"8430:2:25","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8417:3:25"},"nodeType":"YulFunctionCall","src":"8417:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8391:3:25"},"nodeType":"YulFunctionCall","src":"8391:43:25"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"8385:2:25","type":""}]},{"expression":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"8494:14:25"},{"arguments":[{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"8518:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8529:1:25","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8514:3:25"},"nodeType":"YulFunctionCall","src":"8514:17:25"},{"kind":"number","nodeType":"YulLiteral","src":"8533:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8510:3:25"},"nodeType":"YulFunctionCall","src":"8510:25:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8487:6:25"},"nodeType":"YulFunctionCall","src":"8487:49:25"},"nodeType":"YulExpressionStatement","src":"8487:49:25"},{"nodeType":"YulVariableDeclaration","src":"8663:34:25","value":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"8685:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"8694:2:25","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8681:3:25"},"nodeType":"YulFunctionCall","src":"8681:16:25"},"variables":[{"name":"slengthmod","nodeType":"YulTypedName","src":"8667:10:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8714:34:25","value":{"arguments":[{"name":"mlength","nodeType":"YulIdentifier","src":"8736:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"8745:2:25","type":"","value":"32"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"8732:3:25"},"nodeType":"YulFunctionCall","src":"8732:16:25"},"variables":[{"name":"mlengthmod","nodeType":"YulTypedName","src":"8718:10:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8765:33:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8783:2:25","type":"","value":"32"},{"name":"slengthmod","nodeType":"YulIdentifier","src":"8787:10:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8779:3:25"},"nodeType":"YulFunctionCall","src":"8779:19:25"},"variables":[{"name":"submod","nodeType":"YulTypedName","src":"8769:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8815:33:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8829:10:25"},{"name":"submod","nodeType":"YulIdentifier","src":"8841:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8825:3:25"},"nodeType":"YulFunctionCall","src":"8825:23:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"8819:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8865:35:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"8880:10:25"},{"name":"mlength","nodeType":"YulIdentifier","src":"8892:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8876:3:25"},"nodeType":"YulFunctionCall","src":"8876:24:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"8869:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8917:38:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8937:5:25","type":"","value":"0x100"},{"name":"submod","nodeType":"YulIdentifier","src":"8944:6:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"8933:3:25"},"nodeType":"YulFunctionCall","src":"8933:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"8953:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8929:3:25"},"nodeType":"YulFunctionCall","src":"8929:26:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"8921:4:25","type":""}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8980:2:25"},{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"8994:2:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"8988:5:25"},"nodeType":"YulFunctionCall","src":"8988:9:25"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9009:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9003:5:25"},"nodeType":"YulFunctionCall","src":"9003:9:25"},{"name":"mask","nodeType":"YulIdentifier","src":"9014:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8999:3:25"},"nodeType":"YulFunctionCall","src":"8999:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8984:3:25"},"nodeType":"YulFunctionCall","src":"8984:36:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8973:6:25"},"nodeType":"YulFunctionCall","src":"8973:48:25"},"nodeType":"YulExpressionStatement","src":"8973:48:25"},{"body":{"nodeType":"YulBlock","src":"9249:61:25","statements":[{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9278:2:25"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9288:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9282:5:25"},"nodeType":"YulFunctionCall","src":"9282:9:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9271:6:25"},"nodeType":"YulFunctionCall","src":"9271:21:25"},"nodeType":"YulExpressionStatement","src":"9271:21:25"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9143:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"9147:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9140:2:25"},"nodeType":"YulFunctionCall","src":"9140:11:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9152:96:25","statements":[{"nodeType":"YulAssignment","src":"9174:16:25","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9184:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9188:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9180:3:25"},"nodeType":"YulFunctionCall","src":"9180:10:25"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"9174:2:25"}]},{"nodeType":"YulAssignment","src":"9211:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9221:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9225:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9217:3:25"},"nodeType":"YulFunctionCall","src":"9217:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"9211:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"9043:96:25","statements":[{"nodeType":"YulAssignment","src":"9065:16:25","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9075:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9079:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9071:3:25"},"nodeType":"YulFunctionCall","src":"9071:10:25"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"9065:2:25"}]},{"nodeType":"YulAssignment","src":"9102:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9112:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9116:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9108:3:25"},"nodeType":"YulFunctionCall","src":"9108:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"9102:2:25"}]}]},"src":"9039:271:25"},{"nodeType":"YulAssignment","src":"9328:32:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9340:5:25","type":"","value":"0x100"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9351:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"9355:3:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9347:3:25"},"nodeType":"YulFunctionCall","src":"9347:12:25"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"9336:3:25"},"nodeType":"YulFunctionCall","src":"9336:24:25"},"variableNames":[{"name":"mask","nodeType":"YulIdentifier","src":"9328:4:25"}]},{"expression":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"9385:2:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"9403:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9397:5:25"},"nodeType":"YulFunctionCall","src":"9397:9:25"},{"name":"mask","nodeType":"YulIdentifier","src":"9408:4:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9393:3:25"},"nodeType":"YulFunctionCall","src":"9393:20:25"},{"name":"mask","nodeType":"YulIdentifier","src":"9415:4:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9389:3:25"},"nodeType":"YulFunctionCall","src":"9389:31:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9378:6:25"},"nodeType":"YulFunctionCall","src":"9378:43:25"},"nodeType":"YulExpressionStatement","src":"9378:43:25"}]},"nodeType":"YulCase","src":"8163:1272:25","value":"default"}],"expression":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"4658:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"4667:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4655:2:25"},"nodeType":"YulFunctionCall","src":"4655:15:25"},{"arguments":[{"name":"newlength","nodeType":"YulIdentifier","src":"4675:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4686:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4672:2:25"},"nodeType":"YulFunctionCall","src":"4672:17:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4651:3:25"},"nodeType":"YulFunctionCall","src":"4651:39:25"},"nodeType":"YulSwitch","src":"4644:4791:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":5846,"isOffset":false,"isSlot":false,"src":"4315:10:25","valueSize":1},{"declaration":5846,"isOffset":false,"isSlot":false,"src":"5521:10:25","valueSize":1},{"declaration":5846,"isOffset":false,"isSlot":false,"src":"7265:10:25","valueSize":1},{"declaration":5846,"isOffset":false,"isSlot":false,"src":"7316:10:25","valueSize":1},{"declaration":5846,"isOffset":false,"isSlot":false,"src":"8829:10:25","valueSize":1},{"declaration":5846,"isOffset":false,"isSlot":false,"src":"8880:10:25","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"3697:14:25","suffix":"slot","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"4991:14:25","suffix":"slot","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"6429:14:25","suffix":"slot","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"6574:14:25","suffix":"slot","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"8273:14:25","suffix":"slot","valueSize":1},{"declaration":5844,"isOffset":false,"isSlot":true,"src":"8494:14:25","suffix":"slot","valueSize":1}],"id":5849,"nodeType":"InlineAssembly","src":"3446:5999:25"}]},"id":5851,"implemented":true,"kind":"function","modifiers":[],"name":"concatStorage","nameLocation":"3363:13:25","nodeType":"FunctionDefinition","parameters":{"id":5847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5844,"mutability":"mutable","name":"_preBytes","nameLocation":"3391:9:25","nodeType":"VariableDeclaration","scope":5851,"src":"3377:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":5843,"name":"bytes","nodeType":"ElementaryTypeName","src":"3377:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5846,"mutability":"mutable","name":"_postBytes","nameLocation":"3415:10:25","nodeType":"VariableDeclaration","scope":5851,"src":"3402:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5845,"name":"bytes","nodeType":"ElementaryTypeName","src":"3402:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3376:50:25"},"returnParameters":{"id":5848,"nodeType":"ParameterList","parameters":[],"src":"3436:0:25"},"scope":6158,"src":"3354:6097:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5888,"nodeType":"Block","src":"9621:2805:25","statements":[{"id":5871,"nodeType":"UncheckedBlock","src":"9762:85:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5863,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"9794:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":5864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9804:2:25","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"9794:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5866,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"9810:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9794:23:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":5868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9819:16:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":5862,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9786:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9786:50:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5870,"nodeType":"ExpressionStatement","src":"9786:50:25"}]},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5873,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"9864:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9871:6:25","memberName":"length","nodeType":"MemberAccess","src":"9864:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5875,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5855,"src":"9881:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5876,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5857,"src":"9890:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9881:16:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9864:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":5879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9899:19:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":5872,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9856:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9856:63:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5881,"nodeType":"ExpressionStatement","src":"9856:63:25"},{"assignments":[5883],"declarations":[{"constant":false,"id":5883,"mutability":"mutable","name":"tempBytes","nameLocation":"9943:9:25","nodeType":"VariableDeclaration","scope":5888,"src":"9930:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5882,"name":"bytes","nodeType":"ElementaryTypeName","src":"9930:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5884,"nodeType":"VariableDeclarationStatement","src":"9930:22:25"},{"AST":{"nodeType":"YulBlock","src":"9972:2421:25","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"10028:1960:25","statements":[{"nodeType":"YulAssignment","src":"10184:24:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10203:4:25","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10197:5:25"},"nodeType":"YulFunctionCall","src":"10197:11:25"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"10184:9:25"}]},{"nodeType":"YulVariableDeclaration","src":"10832:33:25","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"10853:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"10862:2:25","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10849:3:25"},"nodeType":"YulFunctionCall","src":"10849:16:25"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"10836:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11186:70:25","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11204:9:25"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"11215:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:25"},"nodeType":"YulFunctionCall","src":"11200:25:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11231:4:25","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"11244:9:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11237:6:25"},"nodeType":"YulFunctionCall","src":"11237:17:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11227:3:25"},"nodeType":"YulFunctionCall","src":"11227:28:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11196:3:25"},"nodeType":"YulFunctionCall","src":"11196:60:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"11190:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11273:27:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11288:2:25"},{"name":"_length","nodeType":"YulIdentifier","src":"11292:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11284:3:25"},"nodeType":"YulFunctionCall","src":"11284:16:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"11277:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"11682:61:25","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11711:2:25"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"11721:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11715:5:25"},"nodeType":"YulFunctionCall","src":"11715:9:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11704:6:25"},"nodeType":"YulFunctionCall","src":"11704:21:25"},"nodeType":"YulExpressionStatement","src":"11704:21:25"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11573:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"11577:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11570:2:25"},"nodeType":"YulFunctionCall","src":"11570:11:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11582:99:25","statements":[{"nodeType":"YulAssignment","src":"11604:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11614:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"11618:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11610:3:25"},"nodeType":"YulFunctionCall","src":"11610:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"11604:2:25"}]},{"nodeType":"YulAssignment","src":"11644:19:25","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"11654:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"11658:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11650:3:25"},"nodeType":"YulFunctionCall","src":"11650:13:25"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"11644:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"11322:247:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11471:80:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"11493:6:25"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"11501:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11489:3:25"},"nodeType":"YulFunctionCall","src":"11489:22:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11517:4:25","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"11530:9:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11523:6:25"},"nodeType":"YulFunctionCall","src":"11523:17:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11513:3:25"},"nodeType":"YulFunctionCall","src":"11513:28:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11485:3:25"},"nodeType":"YulFunctionCall","src":"11485:57:25"},{"name":"_start","nodeType":"YulIdentifier","src":"11544:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11481:3:25"},"nodeType":"YulFunctionCall","src":"11481:70:25"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"11475:2:25","type":""}]}]},"src":"11318:425:25"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"11768:9:25"},{"name":"_length","nodeType":"YulIdentifier","src":"11779:7:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11761:6:25"},"nodeType":"YulFunctionCall","src":"11761:26:25"},"nodeType":"YulExpressionStatement","src":"11761:26:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11942:4:25","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"11956:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"11960:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11952:3:25"},"nodeType":"YulFunctionCall","src":"11952:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11969:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11965:3:25"},"nodeType":"YulFunctionCall","src":"11965:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11948:3:25"},"nodeType":"YulFunctionCall","src":"11948:25:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11935:6:25"},"nodeType":"YulFunctionCall","src":"11935:39:25"},"nodeType":"YulExpressionStatement","src":"11935:39:25"}]},"nodeType":"YulCase","src":"10021:1967:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10026:1:25","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"12092:291:25","statements":[{"nodeType":"YulAssignment","src":"12110:24:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12129:4:25","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12123:5:25"},"nodeType":"YulFunctionCall","src":"12123:11:25"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"12110:9:25"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"12304:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12315:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12297:6:25"},"nodeType":"YulFunctionCall","src":"12297:20:25"},"nodeType":"YulExpressionStatement","src":"12297:20:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12342:4:25","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"12352:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12363:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12348:3:25"},"nodeType":"YulFunctionCall","src":"12348:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12335:6:25"},"nodeType":"YulFunctionCall","src":"12335:34:25"},"nodeType":"YulExpressionStatement","src":"12335:34:25"}]},"nodeType":"YulCase","src":"12084:299:25","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"10000:7:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9993:6:25"},"nodeType":"YulFunctionCall","src":"9993:15:25"},"nodeType":"YulSwitch","src":"9986:2397:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":5853,"isOffset":false,"isSlot":false,"src":"11493:6:25","valueSize":1},{"declaration":5857,"isOffset":false,"isSlot":false,"src":"10000:7:25","valueSize":1},{"declaration":5857,"isOffset":false,"isSlot":false,"src":"10853:7:25","valueSize":1},{"declaration":5857,"isOffset":false,"isSlot":false,"src":"11292:7:25","valueSize":1},{"declaration":5857,"isOffset":false,"isSlot":false,"src":"11779:7:25","valueSize":1},{"declaration":5855,"isOffset":false,"isSlot":false,"src":"11544:6:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"10184:9:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"11204:9:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"11768:9:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"12110:9:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"12304:9:25","valueSize":1},{"declaration":5883,"isOffset":false,"isSlot":false,"src":"12352:9:25","valueSize":1}],"id":5885,"nodeType":"InlineAssembly","src":"9963:2430:25"},{"expression":{"id":5886,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5883,"src":"12410:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5861,"id":5887,"nodeType":"Return","src":"12403:16:25"}]},"id":5889,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"9466:5:25","nodeType":"FunctionDefinition","parameters":{"id":5858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5853,"mutability":"mutable","name":"_bytes","nameLocation":"9494:6:25","nodeType":"VariableDeclaration","scope":5889,"src":"9481:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5852,"name":"bytes","nodeType":"ElementaryTypeName","src":"9481:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5855,"mutability":"mutable","name":"_start","nameLocation":"9518:6:25","nodeType":"VariableDeclaration","scope":5889,"src":"9510:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5854,"name":"uint256","nodeType":"ElementaryTypeName","src":"9510:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5857,"mutability":"mutable","name":"_length","nameLocation":"9542:7:25","nodeType":"VariableDeclaration","scope":5889,"src":"9534:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5856,"name":"uint256","nodeType":"ElementaryTypeName","src":"9534:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9471:84:25"},"returnParameters":{"id":5861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5889,"src":"9603:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5859,"name":"bytes","nodeType":"ElementaryTypeName","src":"9603:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9602:14:25"},"scope":6158,"src":"9457:2969:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5914,"nodeType":"Block","src":"12520:266:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5899,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"12538:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12545:6:25","memberName":"length","nodeType":"MemberAccess","src":"12538:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5901,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"12555:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3230","id":5902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12564:2:25","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"12555:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12538:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f416464726573735f6f75744f66426f756e6473","id":5905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12568:23:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""},"value":"toAddress_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f688071e1df0f70b63e3651005878331be1fe9591d6cfb3187cb52a13439e5d","typeString":"literal_string \"toAddress_outOfBounds\""}],"id":5898,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12530:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12530:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5907,"nodeType":"ExpressionStatement","src":"12530:62:25"},{"assignments":[5909],"declarations":[{"constant":false,"id":5909,"mutability":"mutable","name":"tempAddress","nameLocation":"12610:11:25","nodeType":"VariableDeclaration","scope":5914,"src":"12602:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5908,"name":"address","nodeType":"ElementaryTypeName","src":"12602:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5910,"nodeType":"VariableDeclarationStatement","src":"12602:19:25"},{"AST":{"nodeType":"YulBlock","src":"12641:110:25","statements":[{"nodeType":"YulAssignment","src":"12655:86:25","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"12688:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12696:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12684:3:25"},"nodeType":"YulFunctionCall","src":"12684:17:25"},{"name":"_start","nodeType":"YulIdentifier","src":"12703:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12680:3:25"},"nodeType":"YulFunctionCall","src":"12680:30:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12674:5:25"},"nodeType":"YulFunctionCall","src":"12674:37:25"},{"kind":"number","nodeType":"YulLiteral","src":"12713:27:25","type":"","value":"0x1000000000000000000000000"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12670:3:25"},"nodeType":"YulFunctionCall","src":"12670:71:25"},"variableNames":[{"name":"tempAddress","nodeType":"YulIdentifier","src":"12655:11:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5891,"isOffset":false,"isSlot":false,"src":"12688:6:25","valueSize":1},{"declaration":5893,"isOffset":false,"isSlot":false,"src":"12703:6:25","valueSize":1},{"declaration":5909,"isOffset":false,"isSlot":false,"src":"12655:11:25","valueSize":1}],"id":5911,"nodeType":"InlineAssembly","src":"12632:119:25"},{"expression":{"id":5912,"name":"tempAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"12768:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5897,"id":5913,"nodeType":"Return","src":"12761:18:25"}]},"id":5915,"implemented":true,"kind":"function","modifiers":[],"name":"toAddress","nameLocation":"12441:9:25","nodeType":"FunctionDefinition","parameters":{"id":5894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5891,"mutability":"mutable","name":"_bytes","nameLocation":"12464:6:25","nodeType":"VariableDeclaration","scope":5915,"src":"12451:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5890,"name":"bytes","nodeType":"ElementaryTypeName","src":"12451:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5893,"mutability":"mutable","name":"_start","nameLocation":"12480:6:25","nodeType":"VariableDeclaration","scope":5915,"src":"12472:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5892,"name":"uint256","nodeType":"ElementaryTypeName","src":"12472:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12450:37:25"},"returnParameters":{"id":5897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5915,"src":"12511:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5895,"name":"address","nodeType":"ElementaryTypeName","src":"12511:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12510:9:25"},"scope":6158,"src":"12432:354:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5940,"nodeType":"Block","src":"12876:218:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5925,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"12894:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12901:6:25","memberName":"length","nodeType":"MemberAccess","src":"12894:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5927,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5919,"src":"12911:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12920:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12911:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12894:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e74385f6f75744f66426f756e6473","id":5931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12924:21:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""},"value":"toUint8_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ce6d7be00009dd45cc670fb6c2ceee25786f142bcb64e7f1ee73012b26bb6ca1","typeString":"literal_string \"toUint8_outOfBounds\""}],"id":5924,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12886:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12886:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5933,"nodeType":"ExpressionStatement","src":"12886:60:25"},{"assignments":[5935],"declarations":[{"constant":false,"id":5935,"mutability":"mutable","name":"tempUint","nameLocation":"12962:8:25","nodeType":"VariableDeclaration","scope":5940,"src":"12956:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5934,"name":"uint8","nodeType":"ElementaryTypeName","src":"12956:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":5936,"nodeType":"VariableDeclarationStatement","src":"12956:14:25"},{"AST":{"nodeType":"YulBlock","src":"12990:72:25","statements":[{"nodeType":"YulAssignment","src":"13004:48:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13030:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13038:3:25","type":"","value":"0x1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13026:3:25"},"nodeType":"YulFunctionCall","src":"13026:16:25"},{"name":"_start","nodeType":"YulIdentifier","src":"13044:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13022:3:25"},"nodeType":"YulFunctionCall","src":"13022:29:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13016:5:25"},"nodeType":"YulFunctionCall","src":"13016:36:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13004:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5917,"isOffset":false,"isSlot":false,"src":"13030:6:25","valueSize":1},{"declaration":5919,"isOffset":false,"isSlot":false,"src":"13044:6:25","valueSize":1},{"declaration":5935,"isOffset":false,"isSlot":false,"src":"13004:8:25","valueSize":1}],"id":5937,"nodeType":"InlineAssembly","src":"12981:81:25"},{"expression":{"id":5938,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5935,"src":"13079:8:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":5923,"id":5939,"nodeType":"Return","src":"13072:15:25"}]},"id":5941,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"12801:7:25","nodeType":"FunctionDefinition","parameters":{"id":5920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5917,"mutability":"mutable","name":"_bytes","nameLocation":"12822:6:25","nodeType":"VariableDeclaration","scope":5941,"src":"12809:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5916,"name":"bytes","nodeType":"ElementaryTypeName","src":"12809:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5919,"mutability":"mutable","name":"_start","nameLocation":"12838:6:25","nodeType":"VariableDeclaration","scope":5941,"src":"12830:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5918,"name":"uint256","nodeType":"ElementaryTypeName","src":"12830:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12808:37:25"},"returnParameters":{"id":5923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5922,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5941,"src":"12869:5:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5921,"name":"uint8","nodeType":"ElementaryTypeName","src":"12869:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"12868:7:25"},"scope":6158,"src":"12792:302:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5966,"nodeType":"Block","src":"13186:219:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5951,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5943,"src":"13204:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13211:6:25","memberName":"length","nodeType":"MemberAccess","src":"13204:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5953,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5945,"src":"13221:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":5954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13230:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13221:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13204:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7431365f6f75744f66426f756e6473","id":5957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13233:22:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""},"value":"toUint16_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","typeString":"literal_string \"toUint16_outOfBounds\""}],"id":5950,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13196:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13196:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5959,"nodeType":"ExpressionStatement","src":"13196:60:25"},{"assignments":[5961],"declarations":[{"constant":false,"id":5961,"mutability":"mutable","name":"tempUint","nameLocation":"13273:8:25","nodeType":"VariableDeclaration","scope":5966,"src":"13266:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5960,"name":"uint16","nodeType":"ElementaryTypeName","src":"13266:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":5962,"nodeType":"VariableDeclarationStatement","src":"13266:15:25"},{"AST":{"nodeType":"YulBlock","src":"13301:72:25","statements":[{"nodeType":"YulAssignment","src":"13315:48:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13341:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13349:3:25","type":"","value":"0x2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13337:3:25"},"nodeType":"YulFunctionCall","src":"13337:16:25"},{"name":"_start","nodeType":"YulIdentifier","src":"13355:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13333:3:25"},"nodeType":"YulFunctionCall","src":"13333:29:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13327:5:25"},"nodeType":"YulFunctionCall","src":"13327:36:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13315:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5943,"isOffset":false,"isSlot":false,"src":"13341:6:25","valueSize":1},{"declaration":5945,"isOffset":false,"isSlot":false,"src":"13355:6:25","valueSize":1},{"declaration":5961,"isOffset":false,"isSlot":false,"src":"13315:8:25","valueSize":1}],"id":5963,"nodeType":"InlineAssembly","src":"13292:81:25"},{"expression":{"id":5964,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"13390:8:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":5949,"id":5965,"nodeType":"Return","src":"13383:15:25"}]},"id":5967,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"13109:8:25","nodeType":"FunctionDefinition","parameters":{"id":5946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5943,"mutability":"mutable","name":"_bytes","nameLocation":"13131:6:25","nodeType":"VariableDeclaration","scope":5967,"src":"13118:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5942,"name":"bytes","nodeType":"ElementaryTypeName","src":"13118:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5945,"mutability":"mutable","name":"_start","nameLocation":"13147:6:25","nodeType":"VariableDeclaration","scope":5967,"src":"13139:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5944,"name":"uint256","nodeType":"ElementaryTypeName","src":"13139:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13117:37:25"},"returnParameters":{"id":5949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5967,"src":"13178:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5947,"name":"uint16","nodeType":"ElementaryTypeName","src":"13178:6:25","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"13177:8:25"},"scope":6158,"src":"13100:305:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5992,"nodeType":"Block","src":"13497:219:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5977,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5969,"src":"13515:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13522:6:25","memberName":"length","nodeType":"MemberAccess","src":"13515:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5979,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5971,"src":"13532:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"34","id":5980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13541:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"13532:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13515:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7433325f6f75744f66426f756e6473","id":5983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13544:22:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""},"value":"toUint32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0a09853867d05bef4b1d534052126bc72acd3515e1725b9b280e16d988e6ccf","typeString":"literal_string \"toUint32_outOfBounds\""}],"id":5976,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13507:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13507:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5985,"nodeType":"ExpressionStatement","src":"13507:60:25"},{"assignments":[5987],"declarations":[{"constant":false,"id":5987,"mutability":"mutable","name":"tempUint","nameLocation":"13584:8:25","nodeType":"VariableDeclaration","scope":5992,"src":"13577:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5986,"name":"uint32","nodeType":"ElementaryTypeName","src":"13577:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":5988,"nodeType":"VariableDeclarationStatement","src":"13577:15:25"},{"AST":{"nodeType":"YulBlock","src":"13612:72:25","statements":[{"nodeType":"YulAssignment","src":"13626:48:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13652:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13660:3:25","type":"","value":"0x4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13648:3:25"},"nodeType":"YulFunctionCall","src":"13648:16:25"},{"name":"_start","nodeType":"YulIdentifier","src":"13666:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13644:3:25"},"nodeType":"YulFunctionCall","src":"13644:29:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13638:5:25"},"nodeType":"YulFunctionCall","src":"13638:36:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13626:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5969,"isOffset":false,"isSlot":false,"src":"13652:6:25","valueSize":1},{"declaration":5971,"isOffset":false,"isSlot":false,"src":"13666:6:25","valueSize":1},{"declaration":5987,"isOffset":false,"isSlot":false,"src":"13626:8:25","valueSize":1}],"id":5989,"nodeType":"InlineAssembly","src":"13603:81:25"},{"expression":{"id":5990,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5987,"src":"13701:8:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":5975,"id":5991,"nodeType":"Return","src":"13694:15:25"}]},"id":5993,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"13420:8:25","nodeType":"FunctionDefinition","parameters":{"id":5972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5969,"mutability":"mutable","name":"_bytes","nameLocation":"13442:6:25","nodeType":"VariableDeclaration","scope":5993,"src":"13429:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5968,"name":"bytes","nodeType":"ElementaryTypeName","src":"13429:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5971,"mutability":"mutable","name":"_start","nameLocation":"13458:6:25","nodeType":"VariableDeclaration","scope":5993,"src":"13450:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5970,"name":"uint256","nodeType":"ElementaryTypeName","src":"13450:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:37:25"},"returnParameters":{"id":5975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5993,"src":"13489:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5973,"name":"uint32","nodeType":"ElementaryTypeName","src":"13489:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"13488:8:25"},"scope":6158,"src":"13411:305:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6018,"nodeType":"Block","src":"13808:219:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6003,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"13826:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13833:6:25","memberName":"length","nodeType":"MemberAccess","src":"13826:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6005,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5997,"src":"13843:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"38","id":6006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13852:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"13843:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13826:27:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7436345f6f75744f66426f756e6473","id":6009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13855:22:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""},"value":"toUint64_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_55885cc1e15ebd0ff3d9803b39476f6ee2279f42aa3070b40f2de433347c0145","typeString":"literal_string \"toUint64_outOfBounds\""}],"id":6002,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13818:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13818:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6011,"nodeType":"ExpressionStatement","src":"13818:60:25"},{"assignments":[6013],"declarations":[{"constant":false,"id":6013,"mutability":"mutable","name":"tempUint","nameLocation":"13895:8:25","nodeType":"VariableDeclaration","scope":6018,"src":"13888:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6012,"name":"uint64","nodeType":"ElementaryTypeName","src":"13888:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":6014,"nodeType":"VariableDeclarationStatement","src":"13888:15:25"},{"AST":{"nodeType":"YulBlock","src":"13923:72:25","statements":[{"nodeType":"YulAssignment","src":"13937:48:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"13963:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13971:3:25","type":"","value":"0x8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13959:3:25"},"nodeType":"YulFunctionCall","src":"13959:16:25"},{"name":"_start","nodeType":"YulIdentifier","src":"13977:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13955:3:25"},"nodeType":"YulFunctionCall","src":"13955:29:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13949:5:25"},"nodeType":"YulFunctionCall","src":"13949:36:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"13937:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":5995,"isOffset":false,"isSlot":false,"src":"13963:6:25","valueSize":1},{"declaration":5997,"isOffset":false,"isSlot":false,"src":"13977:6:25","valueSize":1},{"declaration":6013,"isOffset":false,"isSlot":false,"src":"13937:8:25","valueSize":1}],"id":6015,"nodeType":"InlineAssembly","src":"13914:81:25"},{"expression":{"id":6016,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6013,"src":"14012:8:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":6001,"id":6017,"nodeType":"Return","src":"14005:15:25"}]},"id":6019,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13731:8:25","nodeType":"FunctionDefinition","parameters":{"id":5998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5995,"mutability":"mutable","name":"_bytes","nameLocation":"13753:6:25","nodeType":"VariableDeclaration","scope":6019,"src":"13740:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5994,"name":"bytes","nodeType":"ElementaryTypeName","src":"13740:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5997,"mutability":"mutable","name":"_start","nameLocation":"13769:6:25","nodeType":"VariableDeclaration","scope":6019,"src":"13761:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5996,"name":"uint256","nodeType":"ElementaryTypeName","src":"13761:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13739:37:25"},"returnParameters":{"id":6001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6019,"src":"13800:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5999,"name":"uint64","nodeType":"ElementaryTypeName","src":"13800:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13799:8:25"},"scope":6158,"src":"13722:305:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6044,"nodeType":"Block","src":"14119:220:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6029,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"14137:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14144:6:25","memberName":"length","nodeType":"MemberAccess","src":"14137:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6031,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6023,"src":"14154:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":6032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14163:2:25","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"14154:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14137:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e7439365f6f75744f66426f756e6473","id":6035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14167:22:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""},"value":"toUint96_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245175b34ac1d95c460f2a4fcb106dbfea12949a3cbb7ae3362c49144bb9feb7","typeString":"literal_string \"toUint96_outOfBounds\""}],"id":6028,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14129:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:61:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6037,"nodeType":"ExpressionStatement","src":"14129:61:25"},{"assignments":[6039],"declarations":[{"constant":false,"id":6039,"mutability":"mutable","name":"tempUint","nameLocation":"14207:8:25","nodeType":"VariableDeclaration","scope":6044,"src":"14200:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":6038,"name":"uint96","nodeType":"ElementaryTypeName","src":"14200:6:25","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":6040,"nodeType":"VariableDeclarationStatement","src":"14200:15:25"},{"AST":{"nodeType":"YulBlock","src":"14235:72:25","statements":[{"nodeType":"YulAssignment","src":"14249:48:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14275:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14283:3:25","type":"","value":"0xc"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14271:3:25"},"nodeType":"YulFunctionCall","src":"14271:16:25"},{"name":"_start","nodeType":"YulIdentifier","src":"14289:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14267:3:25"},"nodeType":"YulFunctionCall","src":"14267:29:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14261:5:25"},"nodeType":"YulFunctionCall","src":"14261:36:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14249:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6021,"isOffset":false,"isSlot":false,"src":"14275:6:25","valueSize":1},{"declaration":6023,"isOffset":false,"isSlot":false,"src":"14289:6:25","valueSize":1},{"declaration":6039,"isOffset":false,"isSlot":false,"src":"14249:8:25","valueSize":1}],"id":6041,"nodeType":"InlineAssembly","src":"14226:81:25"},{"expression":{"id":6042,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6039,"src":"14324:8:25","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":6027,"id":6043,"nodeType":"Return","src":"14317:15:25"}]},"id":6045,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"14042:8:25","nodeType":"FunctionDefinition","parameters":{"id":6024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6021,"mutability":"mutable","name":"_bytes","nameLocation":"14064:6:25","nodeType":"VariableDeclaration","scope":6045,"src":"14051:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6020,"name":"bytes","nodeType":"ElementaryTypeName","src":"14051:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6023,"mutability":"mutable","name":"_start","nameLocation":"14080:6:25","nodeType":"VariableDeclaration","scope":6045,"src":"14072:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6022,"name":"uint256","nodeType":"ElementaryTypeName","src":"14072:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14050:37:25"},"returnParameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6045,"src":"14111:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":6025,"name":"uint96","nodeType":"ElementaryTypeName","src":"14111:6:25","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"14110:8:25"},"scope":6158,"src":"14033:306:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6070,"nodeType":"Block","src":"14433:223:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6055,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6047,"src":"14451:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14458:6:25","memberName":"length","nodeType":"MemberAccess","src":"14451:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6057,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"14468:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3136","id":6058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14477:2:25","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14468:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14451:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743132385f6f75744f66426f756e6473","id":6061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14481:23:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""},"value":"toUint128_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17474b965d7fdba029328487966488b63c32338e60aea74eafb22325bb8d90dc","typeString":"literal_string \"toUint128_outOfBounds\""}],"id":6054,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14443:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14443:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6063,"nodeType":"ExpressionStatement","src":"14443:62:25"},{"assignments":[6065],"declarations":[{"constant":false,"id":6065,"mutability":"mutable","name":"tempUint","nameLocation":"14523:8:25","nodeType":"VariableDeclaration","scope":6070,"src":"14515:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6064,"name":"uint128","nodeType":"ElementaryTypeName","src":"14515:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":6066,"nodeType":"VariableDeclarationStatement","src":"14515:16:25"},{"AST":{"nodeType":"YulBlock","src":"14551:73:25","statements":[{"nodeType":"YulAssignment","src":"14565:49:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14591:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14599:4:25","type":"","value":"0x10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14587:3:25"},"nodeType":"YulFunctionCall","src":"14587:17:25"},{"name":"_start","nodeType":"YulIdentifier","src":"14606:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14583:3:25"},"nodeType":"YulFunctionCall","src":"14583:30:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14577:5:25"},"nodeType":"YulFunctionCall","src":"14577:37:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14565:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6047,"isOffset":false,"isSlot":false,"src":"14591:6:25","valueSize":1},{"declaration":6049,"isOffset":false,"isSlot":false,"src":"14606:6:25","valueSize":1},{"declaration":6065,"isOffset":false,"isSlot":false,"src":"14565:8:25","valueSize":1}],"id":6067,"nodeType":"InlineAssembly","src":"14542:82:25"},{"expression":{"id":6068,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6065,"src":"14641:8:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":6053,"id":6069,"nodeType":"Return","src":"14634:15:25"}]},"id":6071,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"14354:9:25","nodeType":"FunctionDefinition","parameters":{"id":6050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6047,"mutability":"mutable","name":"_bytes","nameLocation":"14377:6:25","nodeType":"VariableDeclaration","scope":6071,"src":"14364:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6046,"name":"bytes","nodeType":"ElementaryTypeName","src":"14364:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6049,"mutability":"mutable","name":"_start","nameLocation":"14393:6:25","nodeType":"VariableDeclaration","scope":6071,"src":"14385:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6048,"name":"uint256","nodeType":"ElementaryTypeName","src":"14385:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14363:37:25"},"returnParameters":{"id":6053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6071,"src":"14424:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6051,"name":"uint128","nodeType":"ElementaryTypeName","src":"14424:7:25","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"14423:9:25"},"scope":6158,"src":"14345:311:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6096,"nodeType":"Block","src":"14750:223:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6081,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6073,"src":"14768:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14775:6:25","memberName":"length","nodeType":"MemberAccess","src":"14768:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6083,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6075,"src":"14785:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":6084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14794:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14785:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14768:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f55696e743235365f6f75744f66426f756e6473","id":6087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14798:23:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""},"value":"toUint256_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87a32b96294a395a4fb365d8b27a23d532fa10419cffd7dc13367cdc71bf4d7b","typeString":"literal_string \"toUint256_outOfBounds\""}],"id":6080,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14760:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14760:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6089,"nodeType":"ExpressionStatement","src":"14760:62:25"},{"assignments":[6091],"declarations":[{"constant":false,"id":6091,"mutability":"mutable","name":"tempUint","nameLocation":"14840:8:25","nodeType":"VariableDeclaration","scope":6096,"src":"14832:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6090,"name":"uint256","nodeType":"ElementaryTypeName","src":"14832:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6092,"nodeType":"VariableDeclarationStatement","src":"14832:16:25"},{"AST":{"nodeType":"YulBlock","src":"14868:73:25","statements":[{"nodeType":"YulAssignment","src":"14882:49:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"14908:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14916:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14904:3:25"},"nodeType":"YulFunctionCall","src":"14904:17:25"},{"name":"_start","nodeType":"YulIdentifier","src":"14923:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14900:3:25"},"nodeType":"YulFunctionCall","src":"14900:30:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14894:5:25"},"nodeType":"YulFunctionCall","src":"14894:37:25"},"variableNames":[{"name":"tempUint","nodeType":"YulIdentifier","src":"14882:8:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6073,"isOffset":false,"isSlot":false,"src":"14908:6:25","valueSize":1},{"declaration":6075,"isOffset":false,"isSlot":false,"src":"14923:6:25","valueSize":1},{"declaration":6091,"isOffset":false,"isSlot":false,"src":"14882:8:25","valueSize":1}],"id":6093,"nodeType":"InlineAssembly","src":"14859:82:25"},{"expression":{"id":6094,"name":"tempUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6091,"src":"14958:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6079,"id":6095,"nodeType":"Return","src":"14951:15:25"}]},"id":6097,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"14671:9:25","nodeType":"FunctionDefinition","parameters":{"id":6076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6073,"mutability":"mutable","name":"_bytes","nameLocation":"14694:6:25","nodeType":"VariableDeclaration","scope":6097,"src":"14681:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6072,"name":"bytes","nodeType":"ElementaryTypeName","src":"14681:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6075,"mutability":"mutable","name":"_start","nameLocation":"14710:6:25","nodeType":"VariableDeclaration","scope":6097,"src":"14702:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6074,"name":"uint256","nodeType":"ElementaryTypeName","src":"14702:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14680:37:25"},"returnParameters":{"id":6079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6097,"src":"14741:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6077,"name":"uint256","nodeType":"ElementaryTypeName","src":"14741:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14740:9:25"},"scope":6158,"src":"14662:311:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6122,"nodeType":"Block","src":"15067:232:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6107,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"15085:6:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":6108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15092:6:25","memberName":"length","nodeType":"MemberAccess","src":"15085:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6109,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"15102:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":6110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15111:2:25","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"15102:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15085:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"746f427974657333325f6f75744f66426f756e6473","id":6113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15115:23:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""},"value":"toBytes32_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95abc635681816f3b423f999d8035c1cc722b70e3d801f56cd1748a4f5810fa2","typeString":"literal_string \"toBytes32_outOfBounds\""}],"id":6106,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15077:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15077:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6115,"nodeType":"ExpressionStatement","src":"15077:62:25"},{"assignments":[6117],"declarations":[{"constant":false,"id":6117,"mutability":"mutable","name":"tempBytes32","nameLocation":"15157:11:25","nodeType":"VariableDeclaration","scope":6122,"src":"15149:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15149:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6118,"nodeType":"VariableDeclarationStatement","src":"15149:19:25"},{"AST":{"nodeType":"YulBlock","src":"15188:76:25","statements":[{"nodeType":"YulAssignment","src":"15202:52:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"15231:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"15239:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15227:3:25"},"nodeType":"YulFunctionCall","src":"15227:17:25"},{"name":"_start","nodeType":"YulIdentifier","src":"15246:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15223:3:25"},"nodeType":"YulFunctionCall","src":"15223:30:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15217:5:25"},"nodeType":"YulFunctionCall","src":"15217:37:25"},"variableNames":[{"name":"tempBytes32","nodeType":"YulIdentifier","src":"15202:11:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6099,"isOffset":false,"isSlot":false,"src":"15231:6:25","valueSize":1},{"declaration":6101,"isOffset":false,"isSlot":false,"src":"15246:6:25","valueSize":1},{"declaration":6117,"isOffset":false,"isSlot":false,"src":"15202:11:25","valueSize":1}],"id":6119,"nodeType":"InlineAssembly","src":"15179:85:25"},{"expression":{"id":6120,"name":"tempBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6117,"src":"15281:11:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6105,"id":6121,"nodeType":"Return","src":"15274:18:25"}]},"id":6123,"implemented":true,"kind":"function","modifiers":[],"name":"toBytes32","nameLocation":"14988:9:25","nodeType":"FunctionDefinition","parameters":{"id":6102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"_bytes","nameLocation":"15011:6:25","nodeType":"VariableDeclaration","scope":6123,"src":"14998:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6098,"name":"bytes","nodeType":"ElementaryTypeName","src":"14998:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6101,"mutability":"mutable","name":"_start","nameLocation":"15027:6:25","nodeType":"VariableDeclaration","scope":6123,"src":"15019:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6100,"name":"uint256","nodeType":"ElementaryTypeName","src":"15019:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14997:37:25"},"returnParameters":{"id":6105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6123,"src":"15058:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15058:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15057:9:25"},"scope":6158,"src":"14979:320:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6139,"nodeType":"Block","src":"15398:1323:25","statements":[{"assignments":[6133],"declarations":[{"constant":false,"id":6133,"mutability":"mutable","name":"success","nameLocation":"15413:7:25","nodeType":"VariableDeclaration","scope":6139,"src":"15408:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6132,"name":"bool","nodeType":"ElementaryTypeName","src":"15408:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6135,"initialValue":{"hexValue":"74727565","id":6134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15423:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"15408:19:25"},{"AST":{"nodeType":"YulBlock","src":"15447:1243:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15461:30:25","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15481:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15475:5:25"},"nodeType":"YulFunctionCall","src":"15475:16:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15465:6:25","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"15624:961:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15853:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"15863:1:25","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"15857:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15882:30:25","value":{"arguments":[{"name":"_preBytes","nodeType":"YulIdentifier","src":"15896:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15907:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15892:3:25"},"nodeType":"YulFunctionCall","src":"15892:20:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"15886:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15929:26:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"15944:2:25"},{"name":"length","nodeType":"YulIdentifier","src":"15948:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15940:3:25"},"nodeType":"YulFunctionCall","src":"15940:15:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"15933:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"16287:284:25","statements":[{"body":{"nodeType":"YulBlock","src":"16423:130:25","statements":[{"nodeType":"YulAssignment","src":"16487:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16498:1:25","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"16487:7:25"}]},{"nodeType":"YulAssignment","src":"16524:7:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16530:1:25","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"16524:2:25"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"16406:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16400:5:25"},"nodeType":"YulFunctionCall","src":"16400:9:25"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"16417:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16411:5:25"},"nodeType":"YulFunctionCall","src":"16411:9:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16397:2:25"},"nodeType":"YulFunctionCall","src":"16397:24:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16390:6:25"},"nodeType":"YulFunctionCall","src":"16390:32:25"},"nodeType":"YulIf","src":"16387:166:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"16169:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"16173:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16166:2:25"},"nodeType":"YulFunctionCall","src":"16166:11:25"},{"name":"cb","nodeType":"YulIdentifier","src":"16179:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16162:3:25"},"nodeType":"YulFunctionCall","src":"16162:20:25"},{"kind":"number","nodeType":"YulLiteral","src":"16184:1:25","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16159:2:25"},"nodeType":"YulFunctionCall","src":"16159:27:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16187:99:25","statements":[{"nodeType":"YulAssignment","src":"16209:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"16219:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"16223:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16215:3:25"},"nodeType":"YulFunctionCall","src":"16215:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"16209:2:25"}]},{"nodeType":"YulAssignment","src":"16249:19:25","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"16259:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"16263:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16255:3:25"},"nodeType":"YulFunctionCall","src":"16255:13:25"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"16249:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"15977:181:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15999:31:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"16013:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"16025:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16009:3:25"},"nodeType":"YulFunctionCall","src":"16009:21:25"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"16003:2:25","type":""}]}]},"src":"15973:598:25"}]},"nodeType":"YulCase","src":"15617:968:25","value":{"kind":"number","nodeType":"YulLiteral","src":"15622:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16606:74:25","statements":[{"nodeType":"YulAssignment","src":"16654:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16665:1:25","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"16654:7:25"}]}]},"nodeType":"YulCase","src":"16598:82:25","value":"default"}],"expression":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15578:6:25"},{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"15592:10:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15586:5:25"},"nodeType":"YulFunctionCall","src":"15586:17:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15575:2:25"},"nodeType":"YulFunctionCall","src":"15575:29:25"},"nodeType":"YulSwitch","src":"15568:1112:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":6127,"isOffset":false,"isSlot":false,"src":"15592:10:25","valueSize":1},{"declaration":6127,"isOffset":false,"isSlot":false,"src":"16013:10:25","valueSize":1},{"declaration":6125,"isOffset":false,"isSlot":false,"src":"15481:9:25","valueSize":1},{"declaration":6125,"isOffset":false,"isSlot":false,"src":"15896:9:25","valueSize":1},{"declaration":6133,"isOffset":false,"isSlot":false,"src":"16487:7:25","valueSize":1},{"declaration":6133,"isOffset":false,"isSlot":false,"src":"16654:7:25","valueSize":1}],"id":6136,"nodeType":"InlineAssembly","src":"15438:1252:25"},{"expression":{"id":6137,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"16707:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6131,"id":6138,"nodeType":"Return","src":"16700:14:25"}]},"id":6140,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"15314:5:25","nodeType":"FunctionDefinition","parameters":{"id":6128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6125,"mutability":"mutable","name":"_preBytes","nameLocation":"15333:9:25","nodeType":"VariableDeclaration","scope":6140,"src":"15320:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6124,"name":"bytes","nodeType":"ElementaryTypeName","src":"15320:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6127,"mutability":"mutable","name":"_postBytes","nameLocation":"15357:10:25","nodeType":"VariableDeclaration","scope":6140,"src":"15344:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6126,"name":"bytes","nodeType":"ElementaryTypeName","src":"15344:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15319:49:25"},"returnParameters":{"id":6131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6140,"src":"15392:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6129,"name":"bool","nodeType":"ElementaryTypeName","src":"15392:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15391:6:25"},"scope":6158,"src":"15305:1416:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6156,"nodeType":"Block","src":"16878:2559:25","statements":[{"assignments":[6150],"declarations":[{"constant":false,"id":6150,"mutability":"mutable","name":"success","nameLocation":"16893:7:25","nodeType":"VariableDeclaration","scope":6156,"src":"16888:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6149,"name":"bool","nodeType":"ElementaryTypeName","src":"16888:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":6152,"initialValue":{"hexValue":"74727565","id":6151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16903:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"16888:19:25"},{"AST":{"nodeType":"YulBlock","src":"16927:2479:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16986:34:25","value":{"arguments":[{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"17005:14:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"16999:5:25"},"nodeType":"YulFunctionCall","src":"16999:21:25"},"variables":[{"name":"fslot","nodeType":"YulTypedName","src":"16990:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17111:76:25","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17134:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17149:5:25","type":"","value":"0x100"},{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17167:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"17174:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17163:3:25"},"nodeType":"YulFunctionCall","src":"17163:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17156:6:25"},"nodeType":"YulFunctionCall","src":"17156:21:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17145:3:25"},"nodeType":"YulFunctionCall","src":"17145:33:25"},{"kind":"number","nodeType":"YulLiteral","src":"17180:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17141:3:25"},"nodeType":"YulFunctionCall","src":"17141:41:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17130:3:25"},"nodeType":"YulFunctionCall","src":"17130:53:25"},{"kind":"number","nodeType":"YulLiteral","src":"17185:1:25","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17126:3:25"},"nodeType":"YulFunctionCall","src":"17126:61:25"},"variables":[{"name":"slength","nodeType":"YulTypedName","src":"17115:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17200:32:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17221:10:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17215:5:25"},"nodeType":"YulFunctionCall","src":"17215:17:25"},"variables":[{"name":"mlength","nodeType":"YulTypedName","src":"17204:7:25","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"17356:1945:25","statements":[{"body":{"nodeType":"YulBlock","src":"17667:1620:25","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"17739:340:25","statements":[{"nodeType":"YulAssignment","src":"17832:38:25","value":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17849:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"17856:5:25","type":"","value":"0x100"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17845:3:25"},"nodeType":"YulFunctionCall","src":"17845:17:25"},{"kind":"number","nodeType":"YulLiteral","src":"17864:5:25","type":"","value":"0x100"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"17841:3:25"},"nodeType":"YulFunctionCall","src":"17841:29:25"},"variableNames":[{"name":"fslot","nodeType":"YulIdentifier","src":"17832:5:25"}]},{"body":{"nodeType":"YulBlock","src":"17947:110:25","statements":[{"nodeType":"YulAssignment","src":"18019:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18030:1:25","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"18019:7:25"}]}]},"condition":{"arguments":[{"arguments":[{"name":"fslot","nodeType":"YulIdentifier","src":"17909:5:25"},{"arguments":[{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"17926:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"17938:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17922:3:25"},"nodeType":"YulFunctionCall","src":"17922:21:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17916:5:25"},"nodeType":"YulFunctionCall","src":"17916:28:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17906:2:25"},"nodeType":"YulFunctionCall","src":"17906:39:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17899:6:25"},"nodeType":"YulFunctionCall","src":"17899:47:25"},"nodeType":"YulIf","src":"17896:161:25"}]},"nodeType":"YulCase","src":"17732:347:25","value":{"kind":"number","nodeType":"YulLiteral","src":"17737:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18108:1161:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18377:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18387:1:25","type":"","value":"1"},"variables":[{"name":"cb","nodeType":"YulTypedName","src":"18381:2:25","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18501:3:25","type":"","value":"0x0"},{"name":"_preBytes.slot","nodeType":"YulIdentifier","src":"18506:14:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18494:6:25"},"nodeType":"YulFunctionCall","src":"18494:27:25"},"nodeType":"YulExpressionStatement","src":"18494:27:25"},{"nodeType":"YulVariableDeclaration","src":"18546:30:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18566:3:25","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"18571:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"18556:9:25"},"nodeType":"YulFunctionCall","src":"18556:20:25"},"variables":[{"name":"sc","nodeType":"YulTypedName","src":"18550:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18602:31:25","value":{"arguments":[{"name":"_postBytes","nodeType":"YulIdentifier","src":"18616:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"18628:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18612:3:25"},"nodeType":"YulFunctionCall","src":"18612:21:25"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"18606:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18658:27:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18673:2:25"},{"name":"mlength","nodeType":"YulIdentifier","src":"18677:7:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18669:3:25"},"nodeType":"YulFunctionCall","src":"18669:16:25"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"18662:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"18993:254:25","statements":[{"body":{"nodeType":"YulBlock","src":"19059:162:25","statements":[{"nodeType":"YulAssignment","src":"19139:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19150:1:25","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"19139:7:25"}]},{"nodeType":"YulAssignment","src":"19184:7:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19190:1:25","type":"","value":"0"},"variableNames":[{"name":"cb","nodeType":"YulIdentifier","src":"19184:2:25"}]}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"19042:2:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"19036:5:25"},"nodeType":"YulFunctionCall","src":"19036:9:25"},{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"19053:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19047:5:25"},"nodeType":"YulFunctionCall","src":"19047:9:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19033:2:25"},"nodeType":"YulFunctionCall","src":"19033:24:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19026:6:25"},"nodeType":"YulFunctionCall","src":"19026:32:25"},"nodeType":"YulIf","src":"19023:198:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18854:2:25"},{"name":"end","nodeType":"YulIdentifier","src":"18858:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18851:2:25"},"nodeType":"YulFunctionCall","src":"18851:11:25"},{"name":"cb","nodeType":"YulIdentifier","src":"18864:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18847:3:25"},"nodeType":"YulFunctionCall","src":"18847:20:25"},{"kind":"number","nodeType":"YulLiteral","src":"18869:1:25","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18844:2:25"},"nodeType":"YulFunctionCall","src":"18844:27:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18872:120:25","statements":[{"nodeType":"YulAssignment","src":"18902:16:25","value":{"arguments":[{"name":"sc","nodeType":"YulIdentifier","src":"18912:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"18916:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:25"},"nodeType":"YulFunctionCall","src":"18908:10:25"},"variableNames":[{"name":"sc","nodeType":"YulIdentifier","src":"18902:2:25"}]},{"nodeType":"YulAssignment","src":"18947:19:25","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"18957:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"18961:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18953:3:25"},"nodeType":"YulFunctionCall","src":"18953:13:25"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"18947:2:25"}]}]},"pre":{"nodeType":"YulBlock","src":"18841:2:25","statements":[]},"src":"18837:410:25"}]},"nodeType":"YulCase","src":"18100:1169:25","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"17699:7:25"},{"kind":"number","nodeType":"YulLiteral","src":"17708:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17696:2:25"},"nodeType":"YulFunctionCall","src":"17696:15:25"},"nodeType":"YulSwitch","src":"17689:1580:25"}]},"condition":{"arguments":[{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"17657:7:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17650:6:25"},"nodeType":"YulFunctionCall","src":"17650:15:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17643:6:25"},"nodeType":"YulFunctionCall","src":"17643:23:25"},"nodeType":"YulIf","src":"17640:1647:25"}]},"nodeType":"YulCase","src":"17349:1952:25","value":{"kind":"number","nodeType":"YulLiteral","src":"17354:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"19322:74:25","statements":[{"nodeType":"YulAssignment","src":"19370:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19381:1:25","type":"","value":"0"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"19370:7:25"}]}]},"nodeType":"YulCase","src":"19314:82:25","value":"default"}],"expression":{"arguments":[{"name":"slength","nodeType":"YulIdentifier","src":"17319:7:25"},{"name":"mlength","nodeType":"YulIdentifier","src":"17328:7:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17316:2:25"},"nodeType":"YulFunctionCall","src":"17316:20:25"},"nodeType":"YulSwitch","src":"17309:2087:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":6144,"isOffset":false,"isSlot":false,"src":"17221:10:25","valueSize":1},{"declaration":6144,"isOffset":false,"isSlot":false,"src":"17926:10:25","valueSize":1},{"declaration":6144,"isOffset":false,"isSlot":false,"src":"18616:10:25","valueSize":1},{"declaration":6142,"isOffset":false,"isSlot":true,"src":"17005:14:25","suffix":"slot","valueSize":1},{"declaration":6142,"isOffset":false,"isSlot":true,"src":"18506:14:25","suffix":"slot","valueSize":1},{"declaration":6150,"isOffset":false,"isSlot":false,"src":"18019:7:25","valueSize":1},{"declaration":6150,"isOffset":false,"isSlot":false,"src":"19139:7:25","valueSize":1},{"declaration":6150,"isOffset":false,"isSlot":false,"src":"19370:7:25","valueSize":1}],"id":6153,"nodeType":"InlineAssembly","src":"16918:2488:25"},{"expression":{"id":6154,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6150,"src":"19423:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":6148,"id":6155,"nodeType":"Return","src":"19416:14:25"}]},"id":6157,"implemented":true,"kind":"function","modifiers":[],"name":"equalStorage","nameLocation":"16736:12:25","nodeType":"FunctionDefinition","parameters":{"id":6145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6142,"mutability":"mutable","name":"_preBytes","nameLocation":"16772:9:25","nodeType":"VariableDeclaration","scope":6157,"src":"16758:23:25","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":6141,"name":"bytes","nodeType":"ElementaryTypeName","src":"16758:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6144,"mutability":"mutable","name":"_postBytes","nameLocation":"16804:10:25","nodeType":"VariableDeclaration","scope":6157,"src":"16791:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6143,"name":"bytes","nodeType":"ElementaryTypeName","src":"16791:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16748:72:25"},"returnParameters":{"id":6148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6157,"src":"16868:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6146,"name":"bool","nodeType":"ElementaryTypeName","src":"16868:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16867:6:25"},"scope":6158,"src":"16727:2710:25","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6159,"src":"370:19069:25","usedErrors":[],"usedEvents":[]}],"src":"336:19104:25"},"id":25}},"contracts":{"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol":{"DVNOptions":{"abi":[{"inputs":[],"name":"DVN_InvalidDVNIdx","type":"error"},{"inputs":[{"internalType":"uint256","name":"cursor","type":"uint256"}],"name":"DVN_InvalidDVNOptions","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d99b25042aefb6aa76f26b34611dd68a0d18f46f1a29bfb1cc40a9ec7fba8e2764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SWAP12 0x25 DIV 0x2A 0xEF 0xB6 0xAA PUSH23 0xF26B34611DD68A0D18F46F1A29BFB1CC40A9EC7FBA8E27 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"345:6975:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d99b25042aefb6aa76f26b34611dd68a0d18f46f1a29bfb1cc40a9ec7fba8e2764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SWAP12 0x25 DIV 0x2A 0xEF 0xB6 0xAA PUSH23 0xF26B34611DD68A0D18F46F1A29BFB1CC40A9EC7FBA8E27 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"345:6975:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_insertDVNOptions(bytes memory[] memory,uint8[] memory,uint8,bytes memory)":"infinite","getNumDVNs(bytes memory)":"infinite","groupDVNOptionsByIdx(bytes memory)":"infinite","nextDVNOption(bytes calldata,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DVN_InvalidDVNIdx\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"}],\"name\":\"DVN_InvalidDVNOptions\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":\"DVNOptions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2beee03cdf59a9bc72e94d08b69cb2e908725f4ceabb48651494938100e21e35\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // We're using the unchecked block below because otherwise execution ends \\n        // with the native overflow error code.\\n        unchecked {\\n            require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        }\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b07e5d8f69407bb43c6db224adfcf6c73b512dd64e85008ac3c222910c3555\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol":{"ILayerZeroEndpointV2":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"}],"name":"ComposeDelivered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"ComposeSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"DefaultReceiveLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"oldLib","type":"address"},{"indexed":false,"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"DefaultReceiveLibraryTimeoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"DefaultSendLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"delegate","type":"address"}],"name":"DelegateSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"InboundNonceSkipped","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"LibraryRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"executor","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"gas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"reason","type":"bytes"}],"name":"LzComposeAlert","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"executor","type":"address"},{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"indexed":false,"internalType":"struct Origin","name":"origin","type":"tuple"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"gas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"reason","type":"bytes"}],"name":"LzReceiveAlert","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"LzTokenSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"name":"PacketBurnt","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"indexed":false,"internalType":"struct Origin","name":"origin","type":"tuple"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"}],"name":"PacketDelivered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"name":"PacketNilified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"encodedPayload","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"options","type":"bytes"},{"indexed":false,"internalType":"address","name":"sendLibrary","type":"address"}],"name":"PacketSent","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"indexed":false,"internalType":"struct Origin","name":"origin","type":"tuple"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"name":"PacketVerified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"ReceiveLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"oldLib","type":"address"},{"indexed":false,"internalType":"uint256","name":"timeout","type":"uint256"}],"name":"ReceiveLibraryTimeoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"SendLibrarySet","type":"event"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"clear","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"}],"name":"composeQueue","outputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultReceiveLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultReceiveLibraryTimeout","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultSendLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eid","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"uint32","name":"_configType","type":"uint32"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"config","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"getReceiveLibrary","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"bool","name":"isDefault","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegisteredLibraries","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSendContext","outputs":[{"internalType":"uint32","name":"dstEid","type":"uint32"},{"internalType":"address","name":"sender","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"getSendLibrary","outputs":[{"internalType":"address","name":"lib","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"inboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"inboundPayloadHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"address","name":"_receiver","type":"address"}],"name":"initializable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"isDefaultSendLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lib","type":"address"}],"name":"isRegisteredLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSendingMessage","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"isSupportedEid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"}],"name":"isValidReceiveLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"lazyInboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzCompose","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"lzToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nativeToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_dstEid","type":"uint32"},{"internalType":"bytes32","name":"_receiver","type":"bytes32"}],"name":"nextGuid","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"nilify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_dstEid","type":"uint32"},{"internalType":"bytes32","name":"_receiver","type":"bytes32"}],"name":"outboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"dstEid","type":"uint32"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bool","name":"payInLzToken","type":"bool"}],"internalType":"struct MessagingParams","name":"_params","type":"tuple"},{"internalType":"address","name":"_sender","type":"address"}],"name":"quote","outputs":[{"components":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"lzTokenFee","type":"uint256"}],"internalType":"struct MessagingFee","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"receiveLibraryTimeout","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lib","type":"address"}],"name":"registerLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"dstEid","type":"uint32"},{"internalType":"bytes32","name":"receiver","type":"bytes32"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"options","type":"bytes"},{"internalType":"bool","name":"payInLzToken","type":"bool"}],"internalType":"struct MessagingParams","name":"_params","type":"tuple"},{"internalType":"address","name":"_refundAddress","type":"address"}],"name":"send","outputs":[{"components":[{"internalType":"bytes32","name":"guid","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"components":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"lzTokenFee","type":"uint256"}],"internalType":"struct MessagingFee","name":"fee","type":"tuple"}],"internalType":"struct MessagingReceipt","name":"","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendCompose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"address","name":"_lib","type":"address"},{"components":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"uint32","name":"configType","type":"uint32"},{"internalType":"bytes","name":"config","type":"bytes"}],"internalType":"struct SetConfigParam[]","name":"_params","type":"tuple[]"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"},{"internalType":"uint256","name":"_gracePeriod","type":"uint256"}],"name":"setDefaultReceiveLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint256","name":"_expiry","type":"uint256"}],"name":"setDefaultReceiveLibraryTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"}],"name":"setDefaultSendLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_lzToken","type":"address"}],"name":"setLzToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"},{"internalType":"uint256","name":"_gracePeriod","type":"uint256"}],"name":"setReceiveLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint256","name":"_expiry","type":"uint256"}],"name":"setReceiveLibraryTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"}],"name":"setSendLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"skip","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"address","name":"_receiver","type":"address"}],"name":"verifiable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"verify","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(address,uint32,bytes32,uint64,bytes32)":"40f80683","clear(address,(uint32,bytes32,uint64),bytes32,bytes)":"2a56c1b0","composeQueue(address,address,bytes32,uint16)":"35d330b0","defaultReceiveLibrary(uint32)":"6f50a803","defaultReceiveLibraryTimeout(uint32)":"6e83f5bb","defaultSendLibrary(uint32)":"f64be4c7","eid()":"416ecebf","getConfig(address,address,uint32,uint32)":"2b3197b9","getReceiveLibrary(address,uint32)":"402f8468","getRegisteredLibraries()":"9132e5c3","getSendContext()":"14f651a9","getSendLibrary(address,uint32)":"b96a277f","inboundNonce(address,uint32,bytes32)":"a0dd43fc","inboundPayloadHash(address,uint32,bytes32,uint64)":"c9fc7bcd","initializable((uint32,bytes32,uint64),address)":"861e1ca5","isDefaultSendLibrary(address,uint32)":"dc93c8a2","isRegisteredLibrary(address)":"dc706a62","isSendingMessage()":"79624ca9","isSupportedEid(uint32)":"6750cd4c","isValidReceiveLibrary(address,uint32,address)":"9d7f9775","lazyInboundNonce(address,uint32,bytes32)":"5b17bb70","lzCompose(address,address,bytes32,uint16,bytes,bytes)":"91d20fa1","lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)":"0c0c389e","lzToken()":"e4fe1d94","nativeToken()":"e1758bd8","nextGuid(address,uint32,bytes32)":"aafe5e07","nilify(address,uint32,bytes32,uint64,bytes32)":"2e80fbf3","outboundNonce(address,uint32,bytes32)":"9c6d7340","quote((uint32,bytes32,bytes,bytes,bool),address)":"ddc28c58","receiveLibraryTimeout(address,uint32)":"ef667aa1","registerLibrary(address)":"e8964e81","send((uint32,bytes32,bytes,bytes,bool),address)":"2637a450","sendCompose(address,bytes32,uint16,bytes)":"7cb59012","setConfig(address,address,(uint32,uint32,bytes)[])":"6dbd9f90","setDefaultReceiveLibrary(uint32,address,uint256)":"a718531b","setDefaultReceiveLibraryTimeout(uint32,address,uint256)":"d4b4ec8f","setDefaultSendLibrary(uint32,address)":"aafea312","setDelegate(address)":"ca5eb5e1","setLzToken(address)":"c28e0eed","setReceiveLibrary(address,uint32,address,uint256)":"6a14d715","setReceiveLibraryTimeout(address,uint32,address,uint256)":"183c834f","setSendLibrary(address,uint32,address)":"9535ff30","skip(address,uint32,bytes32,uint64)":"d70b8902","verifiable((uint32,bytes32,uint64),address)":"c9a54a99","verify((uint32,bytes32,uint64),address,bytes32)":"a825d747"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"ComposeDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ComposeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DefaultReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultSendLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"InboundNonceSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"LibraryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"LzComposeAlert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"LzReceiveAlert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"LzTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PacketDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketNilified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendLibrary\",\"type\":\"address\"}],\"name\":\"PacketSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"ReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"ReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"SendLibrarySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"composeQueue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredLibraries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendContext\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"inboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"inboundPayloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"initializable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isDefaultSendLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"isRegisteredLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"isValidReceiveLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"lazyInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"}],\"name\":\"nextGuid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"nilify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"}],\"name\":\"outboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"internalType\":\"struct MessagingParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"receiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"registerLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"payInLzToken\",\"type\":\"bool\"}],\"internalType\":\"struct MessagingParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendCompose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setDefaultSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzToken\",\"type\":\"address\"}],\"name\":\"setLzToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"skip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"verifiable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setSendLibrary(address,uint32,address)\":{\"notice\":\"------------------- OApp interfaces -------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":\"ILayerZeroEndpointV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setSendLibrary(address,uint32,address)":{"notice":"------------------- OApp interfaces -------------------"}},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol":{"ILayerZeroReceiver":{"abi":[{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"}],"name":"allowInitializePath","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"nextNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowInitializePath((uint32,bytes32,uint64))":"ff7bd03d","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"13137d65","nextNonce(uint32,bytes32)":"7d25a05e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":\"ILayerZeroReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol":{"IMessageLibManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"DefaultReceiveLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"oldLib","type":"address"},{"indexed":false,"internalType":"uint256","name":"expiry","type":"uint256"}],"name":"DefaultReceiveLibraryTimeoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"DefaultSendLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"LibraryRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"ReceiveLibrarySet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"oldLib","type":"address"},{"indexed":false,"internalType":"uint256","name":"timeout","type":"uint256"}],"name":"ReceiveLibraryTimeoutSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"address","name":"newLib","type":"address"}],"name":"SendLibrarySet","type":"event"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultReceiveLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultReceiveLibraryTimeout","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"defaultSendLibrary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"uint32","name":"_configType","type":"uint32"}],"name":"getConfig","outputs":[{"internalType":"bytes","name":"config","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"getReceiveLibrary","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"bool","name":"isDefault","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegisteredLibraries","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"getSendLibrary","outputs":[{"internalType":"address","name":"lib","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"isDefaultSendLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lib","type":"address"}],"name":"isRegisteredLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"isSupportedEid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"}],"name":"isValidReceiveLibrary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"receiveLibraryTimeout","outputs":[{"internalType":"address","name":"lib","type":"address"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_lib","type":"address"}],"name":"registerLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"address","name":"_lib","type":"address"},{"components":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"uint32","name":"configType","type":"uint32"},{"internalType":"bytes","name":"config","type":"bytes"}],"internalType":"struct SetConfigParam[]","name":"_params","type":"tuple[]"}],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"},{"internalType":"uint256","name":"_gracePeriod","type":"uint256"}],"name":"setDefaultReceiveLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint256","name":"_expiry","type":"uint256"}],"name":"setDefaultReceiveLibraryTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"}],"name":"setDefaultSendLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"},{"internalType":"uint256","name":"_gracePeriod","type":"uint256"}],"name":"setReceiveLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_lib","type":"address"},{"internalType":"uint256","name":"_expiry","type":"uint256"}],"name":"setReceiveLibraryTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"address","name":"_newLib","type":"address"}],"name":"setSendLibrary","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"defaultReceiveLibrary(uint32)":"6f50a803","defaultReceiveLibraryTimeout(uint32)":"6e83f5bb","defaultSendLibrary(uint32)":"f64be4c7","getConfig(address,address,uint32,uint32)":"2b3197b9","getReceiveLibrary(address,uint32)":"402f8468","getRegisteredLibraries()":"9132e5c3","getSendLibrary(address,uint32)":"b96a277f","isDefaultSendLibrary(address,uint32)":"dc93c8a2","isRegisteredLibrary(address)":"dc706a62","isSupportedEid(uint32)":"6750cd4c","isValidReceiveLibrary(address,uint32,address)":"9d7f9775","receiveLibraryTimeout(address,uint32)":"ef667aa1","registerLibrary(address)":"e8964e81","setConfig(address,address,(uint32,uint32,bytes)[])":"6dbd9f90","setDefaultReceiveLibrary(uint32,address,uint256)":"a718531b","setDefaultReceiveLibraryTimeout(uint32,address,uint256)":"d4b4ec8f","setDefaultSendLibrary(uint32,address)":"aafea312","setReceiveLibrary(address,uint32,address,uint256)":"6a14d715","setReceiveLibraryTimeout(address,uint32,address,uint256)":"183c834f","setSendLibrary(address,uint32,address)":"9535ff30"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DefaultReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"DefaultSendLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"LibraryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"ReceiveLibrarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"ReceiveLibraryTimeoutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLib\",\"type\":\"address\"}],\"name\":\"SendLibrarySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultReceiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"defaultSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getReceiveLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredLibraries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getSendLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isDefaultSendLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"isRegisteredLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"isValidReceiveLibrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"receiveLibraryTimeout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"name\":\"registerLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setDefaultReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setDefaultSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"setReceiveLibraryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setSendLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setSendLibrary(address,uint32,address)\":{\"notice\":\"------------------- OApp interfaces -------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":\"IMessageLibManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setSendLibrary(address,uint32,address)":{"notice":"------------------- OApp interfaces -------------------"}},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol":{"IMessagingChannel":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"}],"name":"InboundNonceSkipped","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"name":"PacketBurnt","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"srcEid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"name":"PacketNilified","type":"event"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"eid","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"inboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"inboundPayloadHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"lazyInboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_dstEid","type":"uint32"},{"internalType":"bytes32","name":"_receiver","type":"bytes32"}],"name":"nextGuid","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"},{"internalType":"bytes32","name":"_payloadHash","type":"bytes32"}],"name":"nilify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint32","name":"_dstEid","type":"uint32"},{"internalType":"bytes32","name":"_receiver","type":"bytes32"}],"name":"outboundNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oapp","type":"address"},{"internalType":"uint32","name":"_srcEid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"uint64","name":"_nonce","type":"uint64"}],"name":"skip","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(address,uint32,bytes32,uint64,bytes32)":"40f80683","eid()":"416ecebf","inboundNonce(address,uint32,bytes32)":"a0dd43fc","inboundPayloadHash(address,uint32,bytes32,uint64)":"c9fc7bcd","lazyInboundNonce(address,uint32,bytes32)":"5b17bb70","nextGuid(address,uint32,bytes32)":"aafe5e07","nilify(address,uint32,bytes32,uint64,bytes32)":"2e80fbf3","outboundNonce(address,uint32,bytes32)":"9c6d7340","skip(address,uint32,bytes32,uint64)":"d70b8902"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"InboundNonceSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketNilified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"inboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"inboundPayloadHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"lazyInboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"}],\"name\":\"nextGuid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"nilify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"}],\"name\":\"outboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"skip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":\"IMessagingChannel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol":{"IMessagingComposer":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"}],"name":"ComposeDelivered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"ComposeSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"executor","type":"address"},{"indexed":false,"internalType":"bytes32","name":"guid","type":"bytes32"},{"indexed":false,"internalType":"uint16","name":"index","type":"uint16"},{"indexed":false,"internalType":"uint256","name":"gas","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"extraData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"reason","type":"bytes"}],"name":"LzComposeAlert","type":"event"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"}],"name":"composeQueue","outputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzCompose","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"uint16","name":"_index","type":"uint16"},{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendCompose","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"composeQueue(address,address,bytes32,uint16)":"35d330b0","lzCompose(address,address,bytes32,uint16,bytes,bytes)":"91d20fa1","sendCompose(address,bytes32,uint16,bytes)":"7cb59012"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"ComposeDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ComposeSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"LzComposeAlert\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"composeQueue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendCompose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":\"IMessagingComposer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol":{"IMessagingContext":{"abi":[{"inputs":[],"name":"getSendContext","outputs":[{"internalType":"uint32","name":"dstEid","type":"uint32"},{"internalType":"address","name":"sender","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSendingMessage","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getSendContext()":"14f651a9","isSendingMessage()":"79624ca9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getSendContext\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSendingMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":\"IMessagingContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol":{"CalldataBytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055426fa8923a6cd0fa4f8b86fa7db1faf05f3eb597696e8ac7ea91370fa757d064736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE TIMESTAMP PUSH16 0xA8923A6CD0FA4F8B86FA7DB1FAF05F3E 0xB5 SWAP8 PUSH10 0x6E8AC7EA91370FA757D0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"64:1718:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055426fa8923a6cd0fa4f8b86fa7db1faf05f3eb597696e8ac7ea91370fa757d064736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE TIMESTAMP PUSH16 0xA8923A6CD0FA4F8B86FA7DB1FAF05F3E 0xB5 SWAP8 PUSH10 0x6E8AC7EA91370FA757D0 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"64:1718:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toAddr(bytes calldata,uint256)":"infinite","toB32(bytes calldata,uint256)":"infinite","toU128(bytes calldata,uint256)":"infinite","toU16(bytes calldata,uint256)":"infinite","toU256(bytes calldata,uint256)":"infinite","toU32(bytes calldata,uint256)":"infinite","toU64(bytes calldata,uint256)":"infinite","toU8(bytes calldata,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":\"CalldataBytesLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol":{"BitMaps":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cba934c8d60f24a326c871633bd490a4ff69189b53023c0e125afa6c3904b14164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xA9 CALLVALUE 0xC8 0xD6 0xF 0x24 LOG3 0x26 0xC8 PUSH18 0x633BD490A4FF69189B53023C0E125AFA6C39 DIV 0xB1 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"244:506:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cba934c8d60f24a326c871633bd490a4ff69189b53023c0e125afa6c3904b14164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xA9 CALLVALUE 0xC8 0xD6 0xF 0x24 LOG3 0x26 0xC8 PUSH18 0x633BD490A4FF69189B53023C0E125AFA6C39 DIV 0xB1 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"244:506:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"get(BitMap256,uint8)":"infinite","set(BitMap256,uint8)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":\"BitMaps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol":{"ExecutorOptions":{"abi":[{"inputs":[],"name":"Executor_InvalidLzComposeOption","type":"error"},{"inputs":[],"name":"Executor_InvalidLzReceiveOption","type":"error"},{"inputs":[],"name":"Executor_InvalidNativeDropOption","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd70e342cf9623d1d52b8752be11a47784b410eaa484af17d50a90e1513c477964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD PUSH17 0xE342CF9623D1D52B8752BE11A47784B410 0xEA LOG4 DUP5 0xAF OR 0xD5 EXP SWAP1 0xE1 MLOAD EXTCODECOPY SELFBALANCE PUSH26 0x64736F6C63430008140033000000000000000000000000000000 ","sourceMap":"133:3427:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd70e342cf9623d1d52b8752be11a47784b410eaa484af17d50a90e1513c477964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD PUSH17 0xE342CF9623D1D52B8752BE11A47784B410 0xEA LOG4 DUP5 0xAF OR 0xD5 EXP SWAP1 0xE1 MLOAD EXTCODECOPY SELFBALANCE PUSH26 0x64736F6C63430008140033000000000000000000000000000000 ","sourceMap":"133:3427:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"decodeLzComposeOption(bytes calldata)":"infinite","decodeLzReceiveOption(bytes calldata)":"infinite","decodeNativeDropOption(bytes calldata)":"infinite","encodeLzComposeOption(uint16,uint128,uint128)":"infinite","encodeLzReceiveOption(uint128,uint128)":"infinite","encodeNativeDropOption(uint128,bytes32)":"infinite","nextExecutorOption(bytes calldata,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Executor_InvalidLzComposeOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor_InvalidLzReceiveOption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor_InvalidNativeDropOption\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":\"ExecutorOptions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol":{"OApp":{"abi":[{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[],"name":"LzTokenUnavailable","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"uint256","name":"msgValue","type":"uint256"}],"name":"NotEnoughNative","type":"error"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"OnlyEndpoint","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"origin","type":"tuple"}],"name":"allowInitializePath","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"","type":"tuple"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isComposeMsgSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"nextNonce","outputs":[{"internalType":"uint64","name":"nonce","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.","kind":"dev","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"details":"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.","params":{"origin":"The origin information containing the source endpoint and sender address."},"returns":{"_0":"Whether the path has been initialized."}},"constructor":{"details":"Constructor to initialize the OApp with the provided endpoint and owner.","params":{"_delegate":"The delegate capable of making OApp configurations inside of the endpoint.","_endpoint":"The address of the LOCAL LayerZero endpoint."}},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"details":"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.","params":{"_sender":"The sender address."},"returns":{"_0":"isSender Is a valid sender."}},"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":{"details":"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.","params":{"_executor":"The address of the executor for the received message.","_extraData":"Additional arbitrary data provided by the corresponding executor.","_guid":"The unique identifier for the received LayerZero message.","_message":"The payload of the received message.","_origin":"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."}},"nextNonce(uint32,bytes32)":{"details":"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.","returns":{"nonce":"The next nonce."}},"oAppVersion()":{"returns":{"receiverVersion":"The version of the OAppReceiver.sol implementation.","senderVersion":"The version of the OAppSender.sol implementation."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegate(address)":{"details":"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.","params":{"_delegate":"The address of the delegate to be set."}},"setPeer(uint32,bytes32)":{"details":"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.","params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OApp","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowInitializePath((uint32,bytes32,uint64))":"ff7bd03d","endpoint()":"5e280f11","isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":"82413eac","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"13137d65","nextNonce(uint32,bytes32)":"7d25a05e","oAppVersion()":"17442b70","owner()":"8da5cb5b","peers(uint32)":"bb0b6a53","renounceOwnership()":"715018a6","setDelegate(address)":"ca5eb5e1","setPeer(uint32,bytes32)":"3400288b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\",\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"constructor\":{\"details\":\"Constructor to initialize the OApp with the provided endpoint and owner.\",\"params\":{\"_delegate\":\"The delegate capable of making OApp configurations inside of the endpoint.\",\"_endpoint\":\"The address of the LOCAL LayerZero endpoint.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OApp\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":\"OApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol:OApp","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1825,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol:OApp","label":"peers","offset":0,"slot":"1","type":"t_mapping(t_uint32,t_bytes32)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_uint32,t_bytes32)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"notice":"Checks if the path initialization is allowed based on the provided origin."},"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"notice":"Indicates whether an address is an approved composeMsg sender to the Endpoint."},"nextNonce(uint32,bytes32)":{"notice":"Retrieves the next nonce for a given source endpoint and sender address."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol":{"OAppCore":{"abi":[{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Abstract contract implementing the IOAppCore interface with basic OApp configurations.","kind":"dev","methods":{"constructor":{"details":"Constructor to initialize the OAppCore with the provided endpoint and delegate.The delegate typically should be set as the owner of the contract.","params":{"_delegate":"The delegate capable of making OApp configurations inside of the endpoint.","_endpoint":"The address of the LOCAL Layer Zero endpoint."}},"oAppVersion()":{"returns":{"receiverVersion":"The version of the OAppReceiver.sol contract.","senderVersion":"The version of the OAppSender.sol contract."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegate(address)":{"details":"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.","params":{"_delegate":"The address of the delegate to be set."}},"setPeer(uint32,bytes32)":{"details":"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.","params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"endpoint":{"return":"The LayerZero endpoint as an interface.","returns":{"_0":"The LayerZero endpoint as an interface."}},"peers":{"params":{"_eid":"The endpoint ID."},"return":"peer The peer address (OApp instance) associated with the corresponding endpoint.","returns":{"peer":"The peer address (OApp instance) associated with the corresponding endpoint."}}},"title":"OAppCore","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"endpoint()":"5e280f11","oAppVersion()":"17442b70","owner()":"8da5cb5b","peers(uint32)":"bb0b6a53","renounceOwnership()":"715018a6","setDelegate(address)":"ca5eb5e1","setPeer(uint32,bytes32)":"3400288b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract implementing the IOAppCore interface with basic OApp configurations.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor to initialize the OAppCore with the provided endpoint and delegate.The delegate typically should be set as the owner of the contract.\",\"params\":{\"_delegate\":\"The delegate capable of making OApp configurations inside of the endpoint.\",\"_endpoint\":\"The address of the LOCAL Layer Zero endpoint.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol contract.\",\"senderVersion\":\"The version of the OAppSender.sol contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"endpoint\":{\"return\":\"The LayerZero endpoint as an interface.\",\"returns\":{\"_0\":\"The LayerZero endpoint as an interface.\"}},\"peers\":{\"params\":{\"_eid\":\"The endpoint ID.\"},\"return\":\"peer The peer address (OApp instance) associated with the corresponding endpoint.\",\"returns\":{\"peer\":\"The peer address (OApp instance) associated with the corresponding endpoint.\"}}},\"title\":\"OAppCore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":\"OAppCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol:OAppCore","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1825,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol:OAppCore","label":"peers","offset":0,"slot":"1","type":"t_mapping(t_uint32,t_bytes32)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_uint32,t_bytes32)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol":{"OAppReceiver":{"abi":[{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"OnlyEndpoint","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"origin","type":"tuple"}],"name":"allowInitializePath","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"","type":"tuple"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isComposeMsgSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"nextNonce","outputs":[{"internalType":"uint64","name":"nonce","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.","kind":"dev","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"details":"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.","params":{"origin":"The origin information containing the source endpoint and sender address."},"returns":{"_0":"Whether the path has been initialized."}},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"details":"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.","params":{"_sender":"The sender address."},"returns":{"_0":"isSender Is a valid sender."}},"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":{"details":"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.","params":{"_executor":"The address of the executor for the received message.","_extraData":"Additional arbitrary data provided by the corresponding executor.","_guid":"The unique identifier for the received LayerZero message.","_message":"The payload of the received message.","_origin":"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."}},"nextNonce(uint32,bytes32)":{"details":"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.","returns":{"nonce":"The next nonce."}},"oAppVersion()":{"details":"Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented. ie. this is a RECEIVE only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.","returns":{"receiverVersion":"The version of the OAppReceiver.sol contract.","senderVersion":"The version of the OAppSender.sol contract."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegate(address)":{"details":"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.","params":{"_delegate":"The address of the delegate to be set."}},"setPeer(uint32,bytes32)":{"details":"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.","params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OAppReceiver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowInitializePath((uint32,bytes32,uint64))":"ff7bd03d","endpoint()":"5e280f11","isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":"82413eac","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"13137d65","nextNonce(uint32,bytes32)":"7d25a05e","oAppVersion()":"17442b70","owner()":"8da5cb5b","peers(uint32)":"bb0b6a53","renounceOwnership()":"715018a6","setDelegate(address)":"ca5eb5e1","setPeer(uint32,bytes32)":"3400288b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\",\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"details\":\"Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented. ie. this is a RECEIVE only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\",\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol contract.\",\"senderVersion\":\"The version of the OAppSender.sol contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OAppReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":\"OAppReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol:OAppReceiver","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1825,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol:OAppReceiver","label":"peers","offset":0,"slot":"1","type":"t_mapping(t_uint32,t_bytes32)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_uint32,t_bytes32)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"notice":"Checks if the path initialization is allowed based on the provided origin."},"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"notice":"Indicates whether an address is an approved composeMsg sender to the Endpoint."},"nextNonce(uint32,bytes32)":{"notice":"Retrieves the next nonce for a given source endpoint and sender address."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol":{"OAppSender":{"abi":[{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[],"name":"LzTokenUnavailable","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"uint256","name":"msgValue","type":"uint256"}],"name":"NotEnoughNative","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.","kind":"dev","methods":{"oAppVersion()":{"details":"Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented. ie. this is a SEND only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions","returns":{"receiverVersion":"The version of the OAppReceiver.sol contract.","senderVersion":"The version of the OAppSender.sol contract."}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegate(address)":{"details":"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.","params":{"_delegate":"The address of the delegate to be set."}},"setPeer(uint32,bytes32)":{"details":"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.","params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OAppSender","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"endpoint()":"5e280f11","oAppVersion()":"17442b70","owner()":"8da5cb5b","peers(uint32)":"bb0b6a53","renounceOwnership()":"715018a6","setDelegate(address)":"ca5eb5e1","setPeer(uint32,bytes32)":"3400288b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\",\"kind\":\"dev\",\"methods\":{\"oAppVersion()\":{\"details\":\"Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented. ie. this is a SEND only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\",\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol contract.\",\"senderVersion\":\"The version of the OAppSender.sol contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OAppSender\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":\"OAppSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol:OAppSender","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1825,"contract":"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol:OAppSender","label":"peers","offset":0,"slot":"1","type":"t_mapping(t_uint32,t_bytes32)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_uint32,t_bytes32)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol":{"IOAppCore":{"abi":[{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"iEndpoint","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"endpoint()":{"returns":{"iEndpoint":"The LayerZero endpoint as an interface."}},"oAppVersion()":{"returns":{"receiverVersion":"The version of the OAppReceiver.sol contract.","senderVersion":"The version of the OAppSender.sol contract."}},"peers(uint32)":{"params":{"_eid":"The endpoint ID."},"returns":{"peer":"The peer address (OApp instance) associated with the corresponding endpoint."}},"setDelegate(address)":{"params":{"_delegate":"The address of the delegate to be set."}},"setPeer(uint32,bytes32)":{"params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}}},"title":"IOAppCore","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"endpoint()":"5e280f11","oAppVersion()":"17442b70","peers(uint32)":"bb0b6a53","setDelegate(address)":"ca5eb5e1","setPeer(uint32,bytes32)":"3400288b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"iEndpoint\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"endpoint()\":{\"returns\":{\"iEndpoint\":\"The LayerZero endpoint as an interface.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol contract.\",\"senderVersion\":\"The version of the OAppSender.sol contract.\"}},\"peers(uint32)\":{\"params\":{\"_eid\":\"The endpoint ID.\"},\"returns\":{\"peer\":\"The peer address (OApp instance) associated with the corresponding endpoint.\"}},\"setDelegate(address)\":{\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}}},\"title\":\"IOAppCore\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp Core.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":\"IOAppCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp Core."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol":{"IOAppReceiver":{"abi":[{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"}],"name":"allowInitializePath","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isComposeMsgSender","outputs":[{"internalType":"bool","name":"isSender","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"}],"name":"nextNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"details":"Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.The default sender IS the OAppReceiver implementer.","params":{"_message":"The lzReceive payload.","_origin":"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.","_sender":"The sender address."},"returns":{"isSender":"Is a valid sender."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowInitializePath((uint32,bytes32,uint64))":"ff7bd03d","isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":"82413eac","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"13137d65","nextNonce(uint32,bytes32)":"7d25a05e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSender\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_message\":\"The lzReceive payload.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\",\"_sender\":\"The sender address.\"},\"returns\":{\"isSender\":\"Is a valid sender.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":\"IOAppReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"notice":"Indicates whether an address is an approved composeMsg sender to the Endpoint."}},"version":1}}},"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol":{"OptionsBuilder":{"abi":[{"inputs":[{"internalType":"uint16","name":"optionType","type":"uint16"}],"name":"InvalidOptionType","type":"error"},{"inputs":[{"internalType":"uint256","name":"max","type":"uint256"},{"internalType":"uint256","name":"actual","type":"uint256"}],"name":"InvalidSize","type":"error"}],"devdoc":{"details":"Library for building and encoding various message options.","kind":"dev","methods":{},"title":"OptionsBuilder","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcb3ed5561da075549aaefdad3e71bb4699fa8d552098dba3552bb9c2554cf0764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0xB3 0xED SSTORE PUSH2 0xDA07 SSTORE 0x49 0xAA 0xEF 0xDA 0xD3 0xE7 SHL 0xB4 PUSH10 0x9FA8D552098DBA3552BB SWAP13 0x25 SLOAD 0xCF SMOD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"524:7881:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fcb3ed5561da075549aaefdad3e71bb4699fa8d552098dba3552bb9c2554cf0764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0xB3 0xED SSTORE PUSH2 0xDA07 SSTORE 0x49 0xAA 0xEF 0xDA 0xD3 0xE7 SHL 0xB4 PUSH10 0x9FA8D552098DBA3552BB SWAP13 0x25 SLOAD 0xCF SMOD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"524:7881:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"addDVNOption(bytes memory,uint8,uint8,bytes memory)":"infinite","addDVNPreCrimeOption(bytes memory,uint8)":"infinite","addExecutorLzComposeOption(bytes memory,uint16,uint128,uint128)":"infinite","addExecutorLzReceiveOption(bytes memory,uint128,uint128)":"infinite","addExecutorNativeDropOption(bytes memory,uint128,bytes32)":"infinite","addExecutorOption(bytes memory,uint8,bytes memory)":"infinite","addExecutorOrderedExecutionOption(bytes memory)":"infinite","encodeLegacyOptionsType1(uint256)":"infinite","encodeLegacyOptionsType2(uint256,uint256,bytes memory)":"infinite","newOptions()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InvalidSize\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Library for building and encoding various message options.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OptionsBuilder\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\":\"OptionsBuilder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2beee03cdf59a9bc72e94d08b69cb2e908725f4ceabb48651494938100e21e35\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport { DVNOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\\\";\\n\\n/**\\n * @title OptionsBuilder\\n * @dev Library for building and encoding various message options.\\n */\\nlibrary OptionsBuilder {\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    // Constants for options types\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // Custom error message\\n    error InvalidSize(uint256 max, uint256 actual);\\n    error InvalidOptionType(uint16 optionType);\\n\\n    // Modifier to ensure only options of type 3 are used\\n    modifier onlyType3(bytes memory _options) {\\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new options container with type 3.\\n     * @return options The newly created options container.\\n     */\\n    function newOptions() internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_3);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ receive option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor\\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\\n     */\\n    function addExecutorLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor native drop option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n     * @param _receiver The receiver address for the native drop option.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n     */\\n    function addExecutorNativeDropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ compose option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _index The index for the lzCompose() function call.\\n     * @param _gas The gasLimit for the lzCompose() function call.\\n     * @param _value The msg.value for the lzCompose() function call.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\\n     */\\n    function addExecutorLzComposeOption(\\n        bytes memory _options,\\n        uint16 _index,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor ordered execution option to the existing options.\\n     * @param _options The existing options container.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOrderedExecutionOption(\\n        bytes memory _options\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds a DVN pre-crime option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the pre-crime option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNPreCrimeOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds an executor option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _optionType The type of the executor option.\\n     * @param _option The encoded data for the executor option.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOption(\\n        bytes memory _options,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                ExecutorOptions.WORKER_ID,\\n                _option.length.toUint16() + 1, // +1 for optionType\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Adds a DVN option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the DVN option.\\n     * @param _optionType The type of the DVN option.\\n     * @param _option The encoded data for the DVN option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                DVNOptions.WORKER_ID,\\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\\n                _dvnIdx,\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 1.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @return legacyOptions The encoded legacy options.\\n     */\\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 2.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @param _nativeForDst The amount of native air dropped to the receiver.\\n     * @param _receiver The _nativeForDst receiver address.\\n     * @return legacyOptions The encoded legacy options of type 2.\\n     */\\n    function encodeLegacyOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _nativeForDst,\\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\\n    ) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x9ba881395fe0906e40d9222c318b8c74d45cc4035369db4a4c6c7d5de2c42378\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // We're using the unchecked block below because otherwise execution ends \\n        // with the native overflow error code.\\n        unchecked {\\n            require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        }\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b07e5d8f69407bb43c6db224adfcf6c73b512dd64e85008ac3c222910c3555\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220022d0084c9ba718a0ed0f2caf86e9f1bfa259486a270af0e08944857faf1439b64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x2D STOP DUP5 0xC9 0xBA PUSH18 0x8A0ED0F2CAF86E9F1BFA259486A270AF0E08 SWAP5 BASEFEE JUMPI STATICCALL CALL NUMBER SWAP12 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"701:6234:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220022d0084c9ba718a0ed0f2caf86e9f1bfa259486a270af0e08944857faf1439b64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0x2D STOP DUP5 0xC9 0xBA PUSH18 0x8A0ED0F2CAF86E9F1BFA259486A270AF0E08 SWAP5 BASEFEE JUMPI STATICCALL CALL NUMBER SWAP12 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"701:6234:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dccd36f0ab30c0cc09a4b2234e978c3f655a6786fefe4c06228c31b5c85ca3664736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xCC 0xD3 PUSH16 0xAB30C0CC09A4B2234E978C3F655A678 PUSH16 0xEFE4C06228C31B5C85CA3664736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"194:9169:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dccd36f0ab30c0cc09a4b2234e978c3f655a6786fefe4c06228c31b5c85ca3664736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xCC 0xD3 PUSH16 0xAB30C0CC09A4B2234E978C3F655A678 PUSH16 0xEFE4C06228C31B5C85CA3664736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"194:9169:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e432e3b8d7a8b57dd39e24024c67d6a78668d1844f4302084b43c48618837f664736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E NUMBER 0x2E EXTCODESIZE DUP14 PUSH27 0x8B57DD39E24024C67D6A78668D1844F4302084B43C48618837F664 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"927:34153:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e432e3b8d7a8b57dd39e24024c67d6a78668d1844f4302084b43c48618837f664736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E NUMBER 0x2E EXTCODESIZE DUP14 PUSH27 0x8B57DD39E24024C67D6A78668D1844F4302084B43C48618837F664 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"927:34153:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/OmnichainIdentityLinker.sol":{"OmnichainIdentityLinker":{"abi":[{"inputs":[{"internalType":"address","name":"_lzEndpoint","type":"address"},{"internalType":"address","name":"_delegate","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InvalidDelegate","type":"error"},{"inputs":[],"name":"InvalidEndpointCall","type":"error"},{"inputs":[{"internalType":"uint16","name":"optionType","type":"uint16"}],"name":"InvalidOptionType","type":"error"},{"inputs":[],"name":"LzTokenUnavailable","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"NoPeer","type":"error"},{"inputs":[{"internalType":"uint256","name":"msgValue","type":"uint256"}],"name":"NotEnoughNative","type":"error"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"OnlyEndpoint","type":"error"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"}],"name":"OnlyPeer","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"evmAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"solanaAddress","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"IdentityLinked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"eid","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"peer","type":"bytes32"}],"name":"PeerSet","type":"event"},{"inputs":[],"name":"SOLANA_CHAIN_ID","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"origin","type":"tuple"}],"name":"allowInitializePath","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"endpoint","outputs":[{"internalType":"contract ILayerZeroEndpointV2","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_evmAddress","type":"address"}],"name":"getLinkedAddresses","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_evmAddress","type":"address"}],"name":"getLinkedAddressesAsStrings","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"","type":"tuple"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"address","name":"_sender","type":"address"}],"name":"isComposeMsgSender","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_solanaAddress","type":"string"}],"name":"linkAddress","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"linkedSolanaAddresses","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"srcEid","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"uint64","name":"nonce","type":"uint64"}],"internalType":"struct Origin","name":"_origin","type":"tuple"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzReceive","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"nextNonce","outputs":[{"internalType":"uint64","name":"nonce","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oAppVersion","outputs":[{"internalType":"uint64","name":"senderVersion","type":"uint64"},{"internalType":"uint64","name":"receiverVersion","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"eid","type":"uint32"}],"name":"peers","outputs":[{"internalType":"bytes32","name":"peer","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_solanaAddress","type":"string"}],"name":"quoteLinkAddress","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_solanaAddress","type":"string"}],"name":"quoteLinkFee","outputs":[{"components":[{"internalType":"uint256","name":"nativeFee","type":"uint256"},{"internalType":"uint256","name":"lzTokenFee","type":"uint256"}],"internalType":"struct MessagingFee","name":"fee","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegate","type":"address"}],"name":"setDelegate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasLimit","type":"uint256"}],"name":"setGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_eid","type":"uint32"},{"internalType":"bytes32","name":"_peer","type":"bytes32"}],"name":"setPeer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract for linking EVM addresses to Solana addresses via LayerZero V2 This contract sends messages from EVM chains to a Solana OApp","kind":"dev","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"details":"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.","params":{"origin":"The origin information containing the source endpoint and sender address."},"returns":{"_0":"Whether the path has been initialized."}},"getLinkedAddresses(address)":{"details":"Get linked Solana addresses for an EVM address","params":{"_evmAddress":"The EVM address to check"},"returns":{"_0":"Array of linked Solana addresses as bytes"}},"getLinkedAddressesAsStrings(address)":{"details":"Get linked Solana addresses for an EVM address as strings","params":{"_evmAddress":"The EVM address to check"},"returns":{"_0":"Array of linked Solana addresses as strings"}},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"details":"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.","params":{"_sender":"The sender address."},"returns":{"_0":"isSender Is a valid sender."}},"linkAddress(string)":{"details":"Link the sender's EVM address to a Solana address","params":{"_solanaAddress":"Solana address as string"}},"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":{"details":"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.","params":{"_executor":"The address of the executor for the received message.","_extraData":"Additional arbitrary data provided by the corresponding executor.","_guid":"The unique identifier for the received LayerZero message.","_message":"The payload of the received message.","_origin":"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."}},"nextNonce(uint32,bytes32)":{"details":"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.","returns":{"nonce":"The next nonce."}},"oAppVersion()":{"returns":{"receiverVersion":"The version of the OAppReceiver.sol implementation.","senderVersion":"The version of the OAppSender.sol implementation."}},"owner()":{"details":"Returns the address of the current owner."},"quoteLinkAddress(string)":{"details":"Quote the fee for linking an address","params":{"_solanaAddress":"Solana address as string"},"returns":{"_0":"Fee required for the cross-chain message"}},"quoteLinkFee(string)":{"details":"Quote the fee for sending a message to Solana","params":{"_solanaAddress":"The Solana address to link"},"returns":{"fee":"The estimated messaging fee"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDelegate(address)":{"details":"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.","params":{"_delegate":"The address of the delegate to be set."}},"setGasLimit(uint256)":{"details":"Update the gas limit for cross-chain calls","params":{"_gasLimit":"New gas limit"}},"setPeer(uint32,bytes32)":{"details":"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.","params":{"_eid":"The endpoint ID.","_peer":"The address of the peer to be associated with the corresponding endpoint."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdraw()":{"details":"Withdraw any stuck funds (admin function)"}},"title":"OmnichainIdentityLinker","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1789":{"entryPoint":null,"id":1789,"parameterSlots":2,"returnSlots":0},"@_1856":{"entryPoint":null,"id":1856,"parameterSlots":2,"returnSlots":0},"@_2757":{"entryPoint":null,"id":2757,"parameterSlots":0,"returnSlots":0},"@_5278":{"entryPoint":null,"id":5278,"parameterSlots":2,"returnSlots":0},"@_msgSender_3678":{"entryPoint":378,"id":3678,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_2845":{"entryPoint":386,"id":2845,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":665,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":688,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":759,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":776,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":619,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":587,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":582,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":639,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1707:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"379:81:26","statements":[{"nodeType":"YulAssignment","src":"389:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:26"},"nodeType":"YulFunctionCall","src":"400:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:26","type":""}],"src":"334:126:26"},{"body":{"nodeType":"YulBlock","src":"511:51:26","statements":[{"nodeType":"YulAssignment","src":"521:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:26"},"nodeType":"YulFunctionCall","src":"532:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:26","type":""}],"src":"466:96:26"},{"body":{"nodeType":"YulBlock","src":"611:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:26"},"nodeType":"YulFunctionCall","src":"670:12:26"},"nodeType":"YulExpressionStatement","src":"670:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:26"},"nodeType":"YulFunctionCall","src":"641:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:26"},"nodeType":"YulFunctionCall","src":"631:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:26"},"nodeType":"YulFunctionCall","src":"624:43:26"},"nodeType":"YulIf","src":"621:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:26","type":""}],"src":"568:122:26"},{"body":{"nodeType":"YulBlock","src":"759:80:26","statements":[{"nodeType":"YulAssignment","src":"769:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:26"},"nodeType":"YulFunctionCall","src":"778:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:26"},"nodeType":"YulFunctionCall","src":"800:33:26"},"nodeType":"YulExpressionStatement","src":"800:33:26"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:26","type":""}],"src":"696:143:26"},{"body":{"nodeType":"YulBlock","src":"939:413:26","statements":[{"body":{"nodeType":"YulBlock","src":"985:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"987:77:26"},"nodeType":"YulFunctionCall","src":"987:79:26"},"nodeType":"YulExpressionStatement","src":"987:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"960:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"969:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"956:3:26"},"nodeType":"YulFunctionCall","src":"956:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"981:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"952:3:26"},"nodeType":"YulFunctionCall","src":"952:32:26"},"nodeType":"YulIf","src":"949:119:26"},{"nodeType":"YulBlock","src":"1078:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1093:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1107:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1122:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1168:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1179:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1164:3:26"},"nodeType":"YulFunctionCall","src":"1164:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1188:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1132:31:26"},"nodeType":"YulFunctionCall","src":"1132:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1122:6:26"}]}]},{"nodeType":"YulBlock","src":"1216:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1231:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1245:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1235:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1261:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1307:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1318:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1303:3:26"},"nodeType":"YulFunctionCall","src":"1303:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1327:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1271:31:26"},"nodeType":"YulFunctionCall","src":"1271:64:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1261:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"901:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"912:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"924:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"932:6:26","type":""}],"src":"845:507:26"},{"body":{"nodeType":"YulBlock","src":"1423:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1440:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1463:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1445:17:26"},"nodeType":"YulFunctionCall","src":"1445:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1433:6:26"},"nodeType":"YulFunctionCall","src":"1433:37:26"},"nodeType":"YulExpressionStatement","src":"1433:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1411:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1418:3:26","type":""}],"src":"1358:118:26"},{"body":{"nodeType":"YulBlock","src":"1580:124:26","statements":[{"nodeType":"YulAssignment","src":"1590:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1602:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1613:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1598:3:26"},"nodeType":"YulFunctionCall","src":"1598:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1590:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1670:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1694:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1679:3:26"},"nodeType":"YulFunctionCall","src":"1679:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1626:43:26"},"nodeType":"YulFunctionCall","src":"1626:71:26"},"nodeType":"YulExpressionStatement","src":"1626:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1552:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1564:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1575:4:26","type":""}],"src":"1482:222:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH3 0x30D40 PUSH1 0x2 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3EA2 CODESIZE SUB DUP1 PUSH3 0x3EA2 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x3E SWAP2 SWAP1 PUSH3 0x2B0 JUMP JUMPDEST DUP2 DUP2 DUP2 DUP2 PUSH3 0x62 PUSH3 0x56 PUSH3 0x17A PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x182 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xFD JUMPI PUSH1 0x40 MLOAD PUSH32 0xB586360400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCA5EB5E1 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x13A SWAP2 SWAP1 PUSH3 0x308 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x16A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH3 0x325 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x278 DUP3 PUSH3 0x24B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x28A DUP2 PUSH3 0x26B JUMP JUMPDEST DUP2 EQ PUSH3 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2AA DUP2 PUSH3 0x27F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2CA JUMPI PUSH3 0x2C9 PUSH3 0x246 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x2DA DUP6 DUP3 DUP7 ADD PUSH3 0x299 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x2ED DUP6 DUP3 DUP7 ADD PUSH3 0x299 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH3 0x302 DUP2 PUSH3 0x26B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x31F PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x2F7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x3B37 PUSH3 0x36B PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x560 ADD MSTORE DUP2 DUP2 PUSH2 0x96C ADD MSTORE DUP2 DUP2 PUSH2 0xE5D ADD MSTORE DUP2 DUP2 PUSH2 0x157B ADD MSTORE DUP2 DUP2 PUSH2 0x168A ADD MSTORE DUP2 DUP2 PUSH2 0x1AF5 ADD MSTORE PUSH2 0x1BF0 ADD MSTORE PUSH2 0x3B37 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82413EAC GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xBF3F3DE9 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xBF3F3DE9 EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xCA5EB5E1 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0xEE7D72B4 EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0xF68016B7 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0xFF7BD03D EQ PUSH2 0x504 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x82413EAC EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x33F JUMPI DUP1 PUSH4 0x9541618C EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xA6451163 EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xBB0B6A53 EQ PUSH2 0x3E4 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x56368126 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x5E280F11 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x7954C58F EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x7D25A05E EQ PUSH2 0x2C5 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x67BD07A EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x13137D65 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x17442B70 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x306FED73 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x3400288B EQ PUSH2 0x1C9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x541 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x201F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x216B JUMP JUMPDEST PUSH2 0x547 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP3 SWAP2 SWAP1 PUSH2 0x224A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x678 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x818 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x82E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25B PUSH2 0x96A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x252B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH2 0x98E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x2631 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0xA5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x324 SWAP2 SWAP1 PUSH2 0x266E JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x336 SWAP2 SWAP1 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x354 PUSH2 0xA9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x361 SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0x287B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x2A12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xE53 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x2A57 JUMP JUMPDEST PUSH2 0xEE9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xEFB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0x2A84 JUMP JUMPDEST PUSH2 0xF84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x538 SWAP2 SWAP1 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9CE8 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D7 JUMPI CALLER PUSH1 0x40 MLOAD PUSH32 0x91AC5E4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CE SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5F7 DUP9 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH2 0xFC5 JUMP JUMPDEST EQ PUSH2 0x651 JUMPI DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x60F SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST DUP8 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xC26BEBCC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x648 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x660 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x103A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x2 SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x683 CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x690 TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 DUP2 PUSH2 0x730 SWAP2 SWAP1 PUSH2 0x2DAB JUMP JUMPDEST POP PUSH32 0x15B1A221748794744CD2960E23AB851C4E6B2B22FBABE81F3404E15EEBF0AF16 CALLER DUP7 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x764 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x78E PUSH3 0x30D40 PUSH1 0x0 PUSH2 0x77F PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x14D6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7A1 PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0x7EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E1 SWAP1 PUSH2 0x2F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x80E PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP CALLER PUSH2 0x1654 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x820 PUSH2 0x1770 JUMP JUMPDEST PUSH2 0x82A DUP3 DUP3 PUSH2 0x17EE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x836 PUSH2 0x1770 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x840 PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x863 SWAP1 PUSH2 0x2F69 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E0 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FF CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x90C TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x925 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x95E PUSH2 0x9CE8 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x996 PUSH2 0x1770 JUMP JUMPDEST PUSH2 0x9A0 PUSH1 0x0 PUSH2 0x184F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x9BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 SLOAD PUSH2 0x9DA SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA06 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA53 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA28 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA53 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA36 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xBD4 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xB47 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB73 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB95 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xB28 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xCEE JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xC61 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC8D SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCDA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCAF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCDA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCBD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xC42 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD11 JUMPI PUSH2 0xD10 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD44 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD2F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xD9F JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD66 JUMPI PUSH2 0xD65 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD81 JUMPI PUSH2 0xD80 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xD97 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD4A JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDCE CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDDB TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 PUSH2 0xE2C PUSH3 0x30D40 PUSH1 0x0 PUSH2 0xE1D PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x14D6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE3F PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE5B PUSH2 0x1770 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCA5EB5E1 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEB4 SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xEF1 PUSH2 0x1770 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF03 PUSH2 0x1770 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF69 SWAP1 PUSH2 0x3102 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7B DUP2 PUSH2 0x184F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFA2 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 SUB PUSH2 0x1031 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xF6FF4FB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1028 SWAP2 SWAP1 PUSH2 0x201F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x2A PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10BA JUMPI PUSH2 0x10B9 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1188 JUMPI PUSH2 0x1187 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x1342 JUMPI DUP3 PUSH1 0x4 DUP6 PUSH1 0xC DUP5 PUSH2 0x11D4 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x11E5 JUMPI PUSH2 0x11E4 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR PUSH1 0xF8 SHR PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1224 JUMPI PUSH2 0x1223 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 PUSH1 0x2 DUP4 PUSH2 0x123D SWAP2 SWAP1 PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x1249 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x125A JUMPI PUSH2 0x1259 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH1 0xF PUSH1 0xF8 SHL DUP6 PUSH1 0xC DUP5 PUSH2 0x129D SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x12AE JUMPI PUSH2 0x12AD PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL AND PUSH1 0xF8 SHR PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x12CA JUMPI PUSH2 0x12C9 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 PUSH1 0x2 DUP4 PUSH2 0x12E3 SWAP2 SWAP1 PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x12EF SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1300 JUMPI PUSH2 0x12FF PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x133A SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x1395 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x13C7 JUMPI DUP1 DUP1 PUSH2 0x13B0 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x139D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E3 JUMPI PUSH2 0x13E2 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1415 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x14A2 JUMPI PUSH1 0x1 DUP3 PUSH2 0x142E SWAP2 SWAP1 PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x143D SWAP2 SWAP1 PUSH2 0x322C JUMP JUMPDEST PUSH1 0x30 PUSH2 0x1449 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x145F JUMPI PUSH2 0x145E PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x149B SWAP2 SWAP1 PUSH2 0x31C7 JUMP JUMPDEST SWAP5 POP PUSH2 0x1419 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x32A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x3 PUSH2 0xFFFF AND PUSH2 0x14F3 PUSH1 0x0 DUP4 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFFFF AND EQ PUSH2 0x154C JUMPI PUSH2 0x1510 PUSH1 0x0 DUP3 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A51740D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1543 SWAP2 SWAP1 PUSH2 0x32CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1558 DUP6 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP1 POP PUSH2 0x1566 DUP7 PUSH1 0x1 DUP4 PUSH2 0x19E6 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1579 PUSH2 0x1FB2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDDC28C58 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15D5 DUP10 PUSH2 0xFC5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE POP ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x160A SWAP3 SWAP2 SWAP1 PUSH2 0x3390 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1626 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164A SWAP2 SWAP1 PUSH2 0x342A JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165C PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166B DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x1AA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x1688 JUMPI PUSH2 0x1687 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1AF1 JUMP JUMPDEST JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2637A450 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E5 DUP13 PUSH2 0xFC5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP10 PUSH1 0x20 ADD MLOAD GT ISZERO ISZERO DUP2 MSTORE POP DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1721 SWAP3 SWAP2 SWAP1 PUSH2 0x3390 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x173F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1764 SWAP2 SWAP1 PUSH2 0x34FC JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1778 PUSH2 0x1C3B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1796 PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17E3 SWAP1 PUSH2 0x3575 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x238399D427B947898EDB290F5FF0F9109849B1C3BA196A42E35F00C50A54B98B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1843 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 PUSH2 0x1922 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x1965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195C SWAP1 PUSH2 0x35E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 DUP6 ADD ADD MLOAD SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19BD JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19A9 SWAP3 SWAP2 SWAP1 PUSH2 0x3653 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x19DE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19CE SWAP2 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x3 PUSH2 0xFFFF AND PUSH2 0x1A03 PUSH1 0x0 DUP4 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFFFF AND EQ PUSH2 0x1A5C JUMPI PUSH2 0x1A20 PUSH1 0x0 DUP3 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A51740D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A53 SWAP2 SWAP1 PUSH2 0x32CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 DUP1 PUSH2 0x1A6A DUP7 MLOAD PUSH2 0x1C43 JUMP JUMPDEST PUSH2 0x1A74 SWAP2 SWAP1 PUSH2 0x369A JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A8A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3744 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLVALUE EQ PUSH2 0x1AE9 JUMPI CALLVALUE PUSH1 0x40 MLOAD PUSH32 0x9F70412000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE0 SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE4FE1D94 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B82 SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x5373352A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C37 CALLER PUSH32 0x0 DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C94 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 AND DUP3 GT ISZERO PUSH2 0x1C8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C83 SWAP1 PUSH2 0x384F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D17 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D1D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D7F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DE5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1DA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1DA0 SWAP2 SWAP1 PUSH2 0x38D2 JUMP JUMPDEST JUMPDEST PUSH2 0x1DE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD7 SWAP1 PUSH2 0x3971 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DF4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E39 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EA8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EBE DUP8 DUP4 DUP4 DUP8 PUSH2 0x1ECA JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F2C JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F24 JUMPI PUSH2 0x1EE4 DUP6 PUSH2 0x1F3F JUMP JUMPDEST PUSH2 0x1F23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F1A SWAP1 PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F37 JUMP JUMPDEST PUSH2 0x1F36 DUP4 DUP4 PUSH2 0x1F62 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F75 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA9 SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FFA PUSH2 0x1FB2 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2019 DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2034 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2010 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2069 JUMPI PUSH2 0x2068 PUSH2 0x204E JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2085 DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP2 EQ PUSH2 0x2090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20A2 DUP2 PUSH2 0x207C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x20CD JUMPI PUSH2 0x20CC PUSH2 0x20A8 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20EA JUMPI PUSH2 0x20E9 PUSH2 0x20AD JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2106 JUMPI PUSH2 0x2105 PUSH2 0x20B2 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2138 DUP3 PUSH2 0x210D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2148 DUP2 PUSH2 0x212D JUMP JUMPDEST DUP2 EQ PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2165 DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x218A JUMPI PUSH2 0x2189 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2198 DUP11 DUP3 DUP12 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x21A9 DUP11 DUP3 DUP12 ADD PUSH2 0x2093 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21CA JUMPI PUSH2 0x21C9 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x21D6 DUP11 DUP3 DUP12 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0xA0 PUSH2 0x21E9 DUP11 DUP3 DUP12 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x220A JUMPI PUSH2 0x2209 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x2216 DUP11 DUP3 DUP12 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2244 DUP2 PUSH2 0x2227 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x225F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x223B JUMP JUMPDEST PUSH2 0x226C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x223B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x22C1 DUP3 PUSH2 0x2278 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x22E0 JUMPI PUSH2 0x22DF PUSH2 0x2289 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F3 PUSH2 0x203A JUMP JUMPDEST SWAP1 POP PUSH2 0x22FF DUP3 DUP3 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH2 0x2328 DUP3 PUSH2 0x2278 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2357 PUSH2 0x2352 DUP5 PUSH2 0x2304 JUMP JUMPDEST PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2373 JUMPI PUSH2 0x2372 PUSH2 0x2273 JUMP JUMPDEST JUMPDEST PUSH2 0x237E DUP5 DUP3 DUP6 PUSH2 0x2335 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x239B JUMPI PUSH2 0x239A PUSH2 0x20A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x23AB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2344 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23CA JUMPI PUSH2 0x23C9 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23E8 JUMPI PUSH2 0x23E7 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x23F4 DUP5 DUP3 DUP6 ADD PUSH2 0x2386 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2406 DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP2 EQ PUSH2 0x2411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2423 DUP2 PUSH2 0x23FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2440 JUMPI PUSH2 0x243F PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x244E DUP6 DUP3 DUP7 ADD PUSH2 0x2414 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x245F DUP6 DUP3 DUP7 ADD PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2498 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x24AB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24C6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2482 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24F1 PUSH2 0x24EC PUSH2 0x24E7 DUP5 PUSH2 0x210D JUMP JUMPDEST PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x210D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2503 DUP3 PUSH2 0x24D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2515 DUP3 PUSH2 0x24F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2525 DUP2 PUSH2 0x250A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2540 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x251C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254F DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP2 EQ PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x256C DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2589 JUMPI PUSH2 0x2588 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2597 DUP6 DUP3 DUP7 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x25A8 DUP6 DUP3 DUP7 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25EC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2603 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x260D DUP2 DUP6 PUSH2 0x25BD JUMP JUMPDEST SWAP4 POP PUSH2 0x261D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x2626 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x264B DUP2 DUP5 PUSH2 0x25F8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2668 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x223B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2688 JUMPI PUSH2 0x2687 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2696 DUP8 DUP3 DUP9 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B7 JUMPI PUSH2 0x26B6 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x26C3 DUP8 DUP3 DUP9 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x80 PUSH2 0x26D6 DUP8 DUP3 DUP9 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26F7 DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2712 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2721 DUP2 PUSH2 0x212D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x273C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2718 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2758 JUMPI PUSH2 0x2757 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP5 DUP3 DUP6 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B7 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x27C1 DUP2 DUP6 PUSH2 0x279B JUMP JUMPDEST SWAP4 POP PUSH2 0x27D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x27DA DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F1 DUP4 DUP4 PUSH2 0x27AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2811 DUP3 PUSH2 0x276F JUMP JUMPDEST PUSH2 0x281B DUP2 DUP6 PUSH2 0x277A JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x282D DUP6 PUSH2 0x278B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2869 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x284A DUP6 DUP3 PUSH2 0x27E5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2855 DUP4 PUSH2 0x27F9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2831 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2895 DUP2 DUP5 PUSH2 0x2806 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28F0 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x28FA DUP2 DUP6 PUSH2 0x28D4 JUMP JUMPDEST SWAP4 POP PUSH2 0x290A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x2913 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x292A DUP4 DUP4 PUSH2 0x28E5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294A DUP3 PUSH2 0x289D JUMP JUMPDEST PUSH2 0x2954 DUP2 DUP6 PUSH2 0x28A8 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2966 DUP6 PUSH2 0x28B9 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A2 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x2983 DUP6 DUP3 PUSH2 0x291E JUMP JUMPDEST SWAP5 POP PUSH2 0x298E DUP4 PUSH2 0x2932 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x296A JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29CE DUP2 DUP5 PUSH2 0x293F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29EC JUMPI PUSH2 0x29EB PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29FA DUP5 DUP3 DUP6 ADD PUSH2 0x2414 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A0C DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A27 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A36 DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A6D JUMPI PUSH2 0x2A6C PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A7B DUP5 DUP3 DUP6 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A9A JUMPI PUSH2 0x2A99 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AA8 DUP5 DUP3 DUP6 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2AC6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x2AD3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A03 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x2AFA DUP2 DUP6 PUSH2 0x2ADA JUMP JUMPDEST SWAP4 POP PUSH2 0x2B0A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B4C PUSH1 0x1 DUP4 PUSH2 0x2ADA JUMP JUMPDEST SWAP2 POP PUSH2 0x2B57 DUP3 PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B6E DUP3 DUP7 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B79 DUP3 PUSH2 0x2B3F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B85 DUP3 DUP6 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B90 DUP3 PUSH2 0x2B3F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B9C DUP3 DUP5 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2BF0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2C03 JUMPI PUSH2 0x2C02 PUSH2 0x2BA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x2C6B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2C2E JUMP JUMPDEST PUSH2 0x2C75 DUP7 DUP4 PUSH2 0x2C2E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA8 PUSH2 0x2CA3 PUSH2 0x2C9E DUP5 PUSH2 0x2469 JUMP JUMPDEST PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2469 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CC2 DUP4 PUSH2 0x2C8D JUMP JUMPDEST PUSH2 0x2CD6 PUSH2 0x2CCE DUP3 PUSH2 0x2CAF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2C3B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CEB PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0x2CF6 DUP2 DUP5 DUP5 PUSH2 0x2CB9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D1A JUMPI PUSH2 0x2D0F PUSH1 0x0 DUP3 PUSH2 0x2CE3 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2CFC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2D5F JUMPI PUSH2 0x2D30 DUP2 PUSH2 0x2C09 JUMP JUMPDEST PUSH2 0x2D39 DUP5 PUSH2 0x2C1E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2D48 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x2D5C PUSH2 0x2D54 DUP6 PUSH2 0x2C1E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2CFB JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D82 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2D64 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9B DUP4 DUP4 PUSH2 0x2D71 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DB4 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DCD JUMPI PUSH2 0x2DCC PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH2 0x2DD7 DUP3 SLOAD PUSH2 0x2BD8 JUMP JUMPDEST PUSH2 0x2DE2 DUP3 DUP3 DUP6 PUSH2 0x2D1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2E15 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2E03 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2E0D DUP6 DUP3 PUSH2 0x2D8F JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2E75 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2E23 DUP7 PUSH2 0x2C09 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2E4B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2E26 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2E68 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x2E64 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2D71 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2E92 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2718 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EA4 DUP2 DUP6 PUSH2 0x25F8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2EB3 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742066656500000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F02 PUSH1 0x10 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x2F0D DUP3 PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F31 DUP2 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F53 PUSH1 0x0 DUP4 PUSH2 0x2F38 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F5E DUP3 PUSH2 0x2F43 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F74 DUP3 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB4 PUSH1 0xF DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x2FBF DUP3 PUSH2 0x2F7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FE3 DUP2 PUSH2 0x2FA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3053 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3085 JUMPI PUSH2 0x3084 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30EC PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x30F7 DUP3 PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x311B DUP2 PUSH2 0x30DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x312D DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3138 DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3150 JUMPI PUSH2 0x314F PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3161 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x316C DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x317A DUP2 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3191 JUMPI PUSH2 0x3190 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x31D2 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x31DD DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x31ED JUMPI PUSH2 0x31EC PUSH2 0x3198 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3203 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x320E DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3226 JUMPI PUSH2 0x3225 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3237 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3242 DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3252 JUMPI PUSH2 0x3251 PUSH2 0x3198 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3283 DUP3 PUSH2 0x326B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329B PUSH2 0x3296 DUP3 PUSH2 0x325D JUMP JUMPDEST PUSH2 0x3278 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32AD DUP3 DUP5 PUSH2 0x328A JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32C5 DUP2 PUSH2 0x325D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32EF DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x32FE DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x330D DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x332B PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x32E6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x333E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x32F5 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x3356 DUP3 DUP3 PUSH2 0x27AC JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x3370 DUP3 DUP3 PUSH2 0x27AC JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x3385 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x3304 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33AA DUP2 DUP6 PUSH2 0x3313 JUMP JUMPDEST SWAP1 POP PUSH2 0x33B9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x33D4 DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33F0 JUMPI PUSH2 0x33EF PUSH2 0x33C0 JUMP JUMPDEST JUMPDEST PUSH2 0x33FA PUSH1 0x40 PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x340A DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x341E DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3440 JUMPI PUSH2 0x343F PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x344E DUP5 DUP3 DUP6 ADD PUSH2 0x33DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3466 DUP2 PUSH2 0x207C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3475 DUP2 PUSH2 0x2227 JUMP JUMPDEST DUP2 EQ PUSH2 0x3480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3492 DUP2 PUSH2 0x346C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34AE JUMPI PUSH2 0x34AD PUSH2 0x33C0 JUMP JUMPDEST JUMPDEST PUSH2 0x34B8 PUSH1 0x60 PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x34C8 DUP5 DUP3 DUP6 ADD PUSH2 0x3457 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x34DC DUP5 DUP3 DUP6 ADD PUSH2 0x3483 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x34F0 DUP5 DUP3 DUP6 ADD PUSH2 0x33DA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3512 JUMPI PUSH2 0x3511 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3520 DUP5 DUP3 DUP6 ADD PUSH2 0x3498 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x355F PUSH1 0x20 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x356A DUP3 PUSH2 0x3529 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x358E DUP2 PUSH2 0x3552 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F55696E7431365F6F75744F66426F756E6473000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35CB PUSH1 0x14 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x35D6 DUP3 PUSH2 0x3595 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35FA DUP2 PUSH2 0x35BE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3635 DUP3 PUSH2 0x361D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x364D PUSH2 0x3648 DUP3 PUSH2 0x3601 JUMP JUMPDEST PUSH2 0x362A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x365F DUP3 DUP6 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP PUSH2 0x366F DUP3 DUP5 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368B DUP3 DUP5 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A5 DUP3 PUSH2 0x325D JUMP JUMPDEST SWAP2 POP PUSH2 0x36B0 DUP4 PUSH2 0x325D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH2 0xFFFF DUP2 GT ISZERO PUSH2 0x36CA JUMPI PUSH2 0x36C9 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DB DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x36E5 DUP2 DUP6 PUSH2 0x2F38 JUMP JUMPDEST SWAP4 POP PUSH2 0x36F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3726 DUP3 PUSH2 0x370E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x373E PUSH2 0x3739 DUP3 PUSH2 0x3701 JUMP JUMPDEST PUSH2 0x371B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3750 DUP3 DUP9 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x375C DUP3 DUP8 PUSH2 0x372D JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x376C DUP3 DUP7 PUSH2 0x328A JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP2 POP PUSH2 0x377C DUP3 DUP6 PUSH2 0x372D JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x378C DUP3 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x37AA DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C6 JUMPI PUSH2 0x37C5 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D4 DUP5 DUP3 DUP6 ADD PUSH2 0x379B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2031 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3620626974730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3839 PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3844 DUP3 PUSH2 0x37DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3868 DUP2 PUSH2 0x382C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3884 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2718 JUMP JUMPDEST PUSH2 0x3891 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2718 JUMP JUMPDEST PUSH2 0x389E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x38AF DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x38BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38CC DUP2 PUSH2 0x38A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38E8 JUMPI PUSH2 0x38E7 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38F6 DUP5 DUP3 DUP6 ADD PUSH2 0x38BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395B PUSH1 0x2A DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3966 DUP3 PUSH2 0x38FF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x398A DUP2 PUSH2 0x394E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39ED PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x39F8 DUP3 PUSH2 0x3991 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A1C DUP2 PUSH2 0x39E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A2F DUP3 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A70 PUSH1 0x1D DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7B DUP3 PUSH2 0x3A3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9F DUP2 PUSH2 0x3A63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB1 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x3ABB DUP2 DUP6 PUSH2 0x2EBB JUMP JUMPDEST SWAP4 POP PUSH2 0x3ACB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x3AD4 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AF9 DUP2 DUP5 PUSH2 0x3AA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xB6 JUMP XOR PUSH3 0x16A5E3 DIV 0xA5 0xE8 0xE DUP14 0xCE PUSH8 0x1A9F4BD0CAB26FAA 0xD 0x2E 0xC0 PUSH6 0x435915C96C64 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"388:7613:24:-:0;;;669:6;643:32;;936:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;993:11;1006:9;1024::10;1035;936:32:17;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1079:9:11;1047:42;;;;;;;;;;1125:1;1104:23;;:9;:23;;;1100:53;;1136:17;;;;;;;;;;;;;;1100:53;1163:8;;:20;;;1184:9;1163:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:214;;965:83:10;;936::24;;388:7613;;655:96:22;708:7;734:10;727:17;;655:96;:::o;2426:187:17:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;88:117:26:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:118::-;1445:24;1463:5;1445:24;:::i;:::-;1440:3;1433:37;1358:118;;:::o;1482:222::-;1575:4;1613:2;1602:9;1598:18;1590:26;;1626:71;1694:1;1683:9;1679:17;1670:6;1626:71;:::i;:::-;1482:222;;;;:::o;388:7613:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@SOLANA_CHAIN_ID_5250":{"entryPoint":1345,"id":5250,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_3287":{"entryPoint":7453,"id":3287,"parameterSlots":2,"returnSlots":0},"@_checkOwner_2788":{"entryPoint":6000,"id":2788,"parameterSlots":0,"returnSlots":0},"@_getPeerOrRevert_1920":{"entryPoint":4037,"id":1920,"parameterSlots":1,"returnSlots":1},"@_lzReceive_5784":{"entryPoint":4154,"id":5784,"parameterSlots":7,"returnSlots":0},"@_lzSend_2216":{"entryPoint":5716,"id":2216,"parameterSlots":5,"returnSlots":1},"@_msgSender_3678":{"entryPoint":7227,"id":3678,"parameterSlots":0,"returnSlots":1},"@_payLzToken_2273":{"entryPoint":6897,"id":2273,"parameterSlots":1,"returnSlots":0},"@_payNative_2237":{"entryPoint":6819,"id":2237,"parameterSlots":1,"returnSlots":1},"@_quote_2161":{"entryPoint":5489,"id":2161,"parameterSlots":4,"returnSlots":1},"@_revert_3665":{"entryPoint":8034,"id":3665,"parameterSlots":2,"returnSlots":0},"@_setPeer_1892":{"entryPoint":6126,"id":1892,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_2845":{"entryPoint":6223,"id":2845,"parameterSlots":1,"returnSlots":0},"@addExecutorLzReceiveOption_2457":{"entryPoint":5334,"id":2457,"parameterSlots":3,"returnSlots":1},"@addExecutorOption_2600":{"entryPoint":6630,"id":2600,"parameterSlots":3,"returnSlots":1},"@addressToString_5491":{"entryPoint":4163,"id":5491,"parameterSlots":1,"returnSlots":1},"@allowInitializePath_2007":{"entryPoint":3972,"id":2007,"parameterSlots":1,"returnSlots":1},"@encodeLzReceiveOption_1715":{"entryPoint":6522,"id":1715,"parameterSlots":2,"returnSlots":1},"@endpoint_1821":{"entryPoint":2410,"id":1821,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_3490":{"entryPoint":7677,"id":3490,"parameterSlots":4,"returnSlots":1},"@functionCall_3426":{"entryPoint":7653,"id":3426,"parameterSlots":3,"returnSlots":1},"@gasLimit_5253":{"entryPoint":3966,"id":5253,"parameterSlots":0,"returnSlots":0},"@getLinkedAddressesAsStrings_5641":{"entryPoint":3039,"id":5641,"parameterSlots":1,"returnSlots":1},"@getLinkedAddresses_5584":{"entryPoint":2759,"id":5584,"parameterSlots":1,"returnSlots":1},"@isComposeMsgSender_1989":{"entryPoint":2659,"id":1989,"parameterSlots":4,"returnSlots":1},"@isContract_3354":{"entryPoint":7999,"id":3354,"parameterSlots":1,"returnSlots":1},"@linkAddress_5387":{"entryPoint":1656,"id":5387,"parameterSlots":1,"returnSlots":0},"@linkedSolanaAddresses_5258":{"entryPoint":2466,"id":5258,"parameterSlots":0,"returnSlots":0},"@lzReceive_2072":{"entryPoint":1351,"id":2072,"parameterSlots":7,"returnSlots":0},"@newOptions_2426":{"entryPoint":5294,"id":2426,"parameterSlots":0,"returnSlots":1},"@nextNonce_2020":{"entryPoint":2651,"id":2020,"parameterSlots":2,"returnSlots":1},"@oAppVersion_1805":{"entryPoint":1641,"id":1805,"parameterSlots":0,"returnSlots":2},"@owner_2774":{"entryPoint":2718,"id":2774,"parameterSlots":0,"returnSlots":1},"@peers_1825":{"entryPoint":3498,"id":1825,"parameterSlots":0,"returnSlots":0},"@quoteLinkAddress_5767":{"entryPoint":3522,"id":5767,"parameterSlots":1,"returnSlots":1},"@quoteLinkFee_5700":{"entryPoint":2284,"id":5700,"parameterSlots":1,"returnSlots":1},"@renounceOwnership_2802":{"entryPoint":2446,"id":2802,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_3020":{"entryPoint":7316,"id":3020,"parameterSlots":4,"returnSlots":0},"@setDelegate_1935":{"entryPoint":3667,"id":1935,"parameterSlots":1,"returnSlots":0},"@setGasLimit_5797":{"entryPoint":3817,"id":5797,"parameterSlots":1,"returnSlots":0},"@setPeer_1872":{"entryPoint":2072,"id":1872,"parameterSlots":2,"returnSlots":0},"@toUint16_4449":{"entryPoint":7235,"id":4449,"parameterSlots":1,"returnSlots":1},"@toUint16_5967":{"entryPoint":6419,"id":5967,"parameterSlots":2,"returnSlots":1},"@transferOwnership_2825":{"entryPoint":3835,"id":2825,"parameterSlots":1,"returnSlots":0},"@uint256ToString_5570":{"entryPoint":4942,"id":5570,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_3621":{"entryPoint":7882,"id":3621,"parameterSlots":4,"returnSlots":1},"@withdraw_5823":{"entryPoint":2094,"id":5823,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":9028,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":8534,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":14235,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":14525,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":8339,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":13399,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":8375,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_memory_ptr":{"entryPoint":9094,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory":{"entryPoint":13274,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory":{"entryPoint":13464,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_Origin_$515_calldata_ptr":{"entryPoint":8275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":13253,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32":{"entryPoint":9236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":13443,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10050,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":14256,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9586,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":14546,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":9140,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_MessagingFee_$508_memory_ptr_fromMemory":{"entryPoint":13354,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory":{"entryPoint":13564,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptr":{"entryPoint":10884,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes32t_bytes_calldata_ptrt_addresst_bytes_calldata_ptr":{"entryPoint":8555,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes_calldata_ptrt_address":{"entryPoint":9838,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256":{"entryPoint":10839,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32":{"entryPoint":10710,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32t_bytes32":{"entryPoint":9257,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr":{"entryPoint":10213,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":10526,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10008,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10246,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10559,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":13060,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9966,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":13045,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10755,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr":{"entryPoint":10156,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":9720,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14032,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_ILayerZeroEndpointV2_$677_to_t_address_fromStack":{"entryPoint":9500,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr":{"entryPoint":10469,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":15014,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10981,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033_to_t_string_memory_ptr_fromStack":{"entryPoint":14380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":12511,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51_to_t_string_memory_ptr_fromStack":{"entryPoint":12199,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11071,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab_to_t_string_memory_ptr_fromStack":{"entryPoint":13758,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack":{"entryPoint":14816,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af_to_t_string_memory_ptr_fromStack":{"entryPoint":12021,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":13650,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12102,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":14947,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack":{"entryPoint":14670,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_MessagingFee_$508_memory_ptr_to_t_struct$_MessagingFee_$508_memory_ptr_fromStack":{"entryPoint":9346,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_MessagingParams_$495_memory_ptr_to_t_struct$_MessagingParams_$495_memory_ptr_fromStack":{"entryPoint":13075,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack":{"entryPoint":13884,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":12988,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack":{"entryPoint":12938,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":9331,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":10797,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32":{"entryPoint":13030,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":8208,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":8763,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack":{"entryPoint":14125,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14883,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14148,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11106,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12137,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_uint128__to_t_uint128__nonPadded_inplace_fromStack_reversed":{"entryPoint":13951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_uint128_t_uint128__to_t_uint128_t_uint128__nonPadded_inplace_fromStack_reversed":{"entryPoint":13907,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_uint16__to_t_uint16__nonPadded_inplace_fromStack_reversed":{"entryPoint":12961,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":14447,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":11901,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10363,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10676,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9981,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10770,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9777,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ILayerZeroEndpointV2_$677__to_t_address__fromStack_reversed":{"entryPoint":9515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15071,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14415,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12546,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12234,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13793,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14851,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12056,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14982,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14705,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_MessagingFee_$508_memory_ptr__to_t_struct$_MessagingFee_$508_memory_ptr__fromStack_reversed":{"entryPoint":9393,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_MessagingParams_$495_memory_ptr_t_address__to_t_struct$_MessagingParams_$495_memory_ptr_t_address__fromStack_reversed":{"entryPoint":13200,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":13003,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":10812,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":8223,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32_t_bytes32__to_t_uint32_t_bytes32__fromStack_reversed":{"entryPoint":10929,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":9811,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint64__to_t_uint64_t_uint64__fromStack_reversed":{"entryPoint":8778,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":8937,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":8250,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":8964,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":10123,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":10425,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":11273,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":10095,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":10397,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":9650,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":10441,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":10233,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":10546,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10106,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":10408,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr":{"entryPoint":10139,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":9661,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12088,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr":{"entryPoint":10452,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11963,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10970,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint16":{"entryPoint":13978,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12578,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":12743,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12630,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":12792,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":11550,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":8493,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9954,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":8306,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint128":{"entryPoint":13825,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":12893,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8461,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9321,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":8192,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":8743,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":14081,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":11515,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_contract$_ILayerZeroEndpointV2_$677_to_t_address":{"entryPoint":9482,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":9464,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":9430,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":11405,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":11691,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":9013,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9678,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":11294,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":11224,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":11663,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":8888,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":9420,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":12360,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint128":{"entryPoint":13866,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint16":{"entryPoint":12920,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint8":{"entryPoint":14107,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":11633,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":12844,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12313,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":12696,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":11177,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12266,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8841,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":11439,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":8365,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":8360,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":8270,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":13248,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":8370,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":8819,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8265,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8260,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8824,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_128":{"entryPoint":13853,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_240":{"entryPoint":12907,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_248":{"entryPoint":14094,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":11310,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":11620,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":11491,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033":{"entryPoint":14301,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":12432,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51":{"entryPoint":12158,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb":{"entryPoint":11030,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab":{"entryPoint":13717,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c":{"entryPoint":14737,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af":{"entryPoint":11980,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":13609,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":12099,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":14906,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd":{"entryPoint":14591,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":11323,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":11449,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8511,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":14502,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":8316,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9542,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":9213,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":13420,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":11486,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:53965:26","statements":[{"body":{"nodeType":"YulBlock","src":"51:49:26","statements":[{"nodeType":"YulAssignment","src":"61:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"76:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"83:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"72:3:26"},"nodeType":"YulFunctionCall","src":"72:22:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"61:7:26"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"43:7:26","type":""}],"src":"7:93:26"},{"body":{"nodeType":"YulBlock","src":"169:52:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"186:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"208:5:26"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"191:16:26"},"nodeType":"YulFunctionCall","src":"191:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"179:6:26"},"nodeType":"YulFunctionCall","src":"179:36:26"},"nodeType":"YulExpressionStatement","src":"179:36:26"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"157:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"164:3:26","type":""}],"src":"106:115:26"},{"body":{"nodeType":"YulBlock","src":"323:122:26","statements":[{"nodeType":"YulAssignment","src":"333:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"345:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"356:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"341:3:26"},"nodeType":"YulFunctionCall","src":"341:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"333:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"411:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"424:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"435:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"420:3:26"},"nodeType":"YulFunctionCall","src":"420:17:26"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"369:41:26"},"nodeType":"YulFunctionCall","src":"369:69:26"},"nodeType":"YulExpressionStatement","src":"369:69:26"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"295:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"307:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"318:4:26","type":""}],"src":"227:218:26"},{"body":{"nodeType":"YulBlock","src":"491:35:26","statements":[{"nodeType":"YulAssignment","src":"501:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"517:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"511:5:26"},"nodeType":"YulFunctionCall","src":"511:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"501:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"484:6:26","type":""}],"src":"451:75:26"},{"body":{"nodeType":"YulBlock","src":"621:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"631:6:26"},"nodeType":"YulFunctionCall","src":"631:12:26"},"nodeType":"YulExpressionStatement","src":"631:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"532:117:26"},{"body":{"nodeType":"YulBlock","src":"744:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"761:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"764:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"754:6:26"},"nodeType":"YulFunctionCall","src":"754:12:26"},"nodeType":"YulExpressionStatement","src":"754:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"655:117:26"},{"body":{"nodeType":"YulBlock","src":"867:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"884:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"887:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"877:6:26"},"nodeType":"YulFunctionCall","src":"877:12:26"},"nodeType":"YulExpressionStatement","src":"877:12:26"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"778:117:26"},{"body":{"nodeType":"YulBlock","src":"999:152:26","statements":[{"body":{"nodeType":"YulBlock","src":"1038:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"1040:77:26"},"nodeType":"YulFunctionCall","src":"1040:79:26"},"nodeType":"YulExpressionStatement","src":"1040:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"1020:3:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1025:6:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1016:3:26"},"nodeType":"YulFunctionCall","src":"1016:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1034:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1012:3:26"},"nodeType":"YulFunctionCall","src":"1012:25:26"},"nodeType":"YulIf","src":"1009:112:26"},{"nodeType":"YulAssignment","src":"1130:15:26","value":{"name":"offset","nodeType":"YulIdentifier","src":"1139:6:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1130:5:26"}]}]},"name":"abi_decode_t_struct$_Origin_$515_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"977:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"985:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"993:5:26","type":""}],"src":"922:229:26"},{"body":{"nodeType":"YulBlock","src":"1202:32:26","statements":[{"nodeType":"YulAssignment","src":"1212:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1223:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1212:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1184:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1194:7:26","type":""}],"src":"1157:77:26"},{"body":{"nodeType":"YulBlock","src":"1283:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"1340:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1349:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1352:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1342:6:26"},"nodeType":"YulFunctionCall","src":"1342:12:26"},"nodeType":"YulExpressionStatement","src":"1342:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1306:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1331:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1313:17:26"},"nodeType":"YulFunctionCall","src":"1313:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1303:2:26"},"nodeType":"YulFunctionCall","src":"1303:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1296:6:26"},"nodeType":"YulFunctionCall","src":"1296:43:26"},"nodeType":"YulIf","src":"1293:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1276:5:26","type":""}],"src":"1240:122:26"},{"body":{"nodeType":"YulBlock","src":"1420:87:26","statements":[{"nodeType":"YulAssignment","src":"1430:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1452:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1439:12:26"},"nodeType":"YulFunctionCall","src":"1439:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1430:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1495:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1468:26:26"},"nodeType":"YulFunctionCall","src":"1468:33:26"},"nodeType":"YulExpressionStatement","src":"1468:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1398:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1406:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1414:5:26","type":""}],"src":"1368:139:26"},{"body":{"nodeType":"YulBlock","src":"1602:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1619:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1622:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1612:6:26"},"nodeType":"YulFunctionCall","src":"1612:12:26"},"nodeType":"YulExpressionStatement","src":"1612:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1513:117:26"},{"body":{"nodeType":"YulBlock","src":"1725:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1742:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1745:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1735:6:26"},"nodeType":"YulFunctionCall","src":"1735:12:26"},"nodeType":"YulExpressionStatement","src":"1735:12:26"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"1636:117:26"},{"body":{"nodeType":"YulBlock","src":"1848:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1865:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1868:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1858:6:26"},"nodeType":"YulFunctionCall","src":"1858:12:26"},"nodeType":"YulExpressionStatement","src":"1858:12:26"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1759:117:26"},{"body":{"nodeType":"YulBlock","src":"1969:478:26","statements":[{"body":{"nodeType":"YulBlock","src":"2018:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2020:77:26"},"nodeType":"YulFunctionCall","src":"2020:79:26"},"nodeType":"YulExpressionStatement","src":"2020:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1997:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2005:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1993:3:26"},"nodeType":"YulFunctionCall","src":"1993:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2012:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1989:3:26"},"nodeType":"YulFunctionCall","src":"1989:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1982:6:26"},"nodeType":"YulFunctionCall","src":"1982:35:26"},"nodeType":"YulIf","src":"1979:122:26"},{"nodeType":"YulAssignment","src":"2110:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2133:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2120:12:26"},"nodeType":"YulFunctionCall","src":"2120:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2110:6:26"}]},{"body":{"nodeType":"YulBlock","src":"2183:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"2185:77:26"},"nodeType":"YulFunctionCall","src":"2185:79:26"},"nodeType":"YulExpressionStatement","src":"2185:79:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2155:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2163:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2152:2:26"},"nodeType":"YulFunctionCall","src":"2152:30:26"},"nodeType":"YulIf","src":"2149:117:26"},{"nodeType":"YulAssignment","src":"2275:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2291:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2299:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2287:3:26"},"nodeType":"YulFunctionCall","src":"2287:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2275:8:26"}]},{"body":{"nodeType":"YulBlock","src":"2358:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2360:77:26"},"nodeType":"YulFunctionCall","src":"2360:79:26"},"nodeType":"YulExpressionStatement","src":"2360:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2323:8:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2337:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2345:4:26","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:26"},"nodeType":"YulFunctionCall","src":"2333:17:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2319:3:26"},"nodeType":"YulFunctionCall","src":"2319:32:26"},{"name":"end","nodeType":"YulIdentifier","src":"2353:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2316:2:26"},"nodeType":"YulFunctionCall","src":"2316:41:26"},"nodeType":"YulIf","src":"2313:128:26"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1936:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1944:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1952:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1962:6:26","type":""}],"src":"1895:552:26"},{"body":{"nodeType":"YulBlock","src":"2498:81:26","statements":[{"nodeType":"YulAssignment","src":"2508:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2523:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2530:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2519:3:26"},"nodeType":"YulFunctionCall","src":"2519:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2508:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2480:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2490:7:26","type":""}],"src":"2453:126:26"},{"body":{"nodeType":"YulBlock","src":"2630:51:26","statements":[{"nodeType":"YulAssignment","src":"2640:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2669:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2651:17:26"},"nodeType":"YulFunctionCall","src":"2651:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2640:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2612:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2622:7:26","type":""}],"src":"2585:96:26"},{"body":{"nodeType":"YulBlock","src":"2730:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2787:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2796:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2799:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2789:6:26"},"nodeType":"YulFunctionCall","src":"2789:12:26"},"nodeType":"YulExpressionStatement","src":"2789:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2753:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2778:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2760:17:26"},"nodeType":"YulFunctionCall","src":"2760:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2750:2:26"},"nodeType":"YulFunctionCall","src":"2750:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2743:6:26"},"nodeType":"YulFunctionCall","src":"2743:43:26"},"nodeType":"YulIf","src":"2740:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2723:5:26","type":""}],"src":"2687:122:26"},{"body":{"nodeType":"YulBlock","src":"2867:87:26","statements":[{"nodeType":"YulAssignment","src":"2877:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2886:12:26"},"nodeType":"YulFunctionCall","src":"2886:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2877:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2942:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2915:26:26"},"nodeType":"YulFunctionCall","src":"2915:33:26"},"nodeType":"YulExpressionStatement","src":"2915:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2845:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2853:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2861:5:26","type":""}],"src":"2815:139:26"},{"body":{"nodeType":"YulBlock","src":"3157:1162:26","statements":[{"body":{"nodeType":"YulBlock","src":"3204:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3206:77:26"},"nodeType":"YulFunctionCall","src":"3206:79:26"},"nodeType":"YulExpressionStatement","src":"3206:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3178:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3187:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3174:3:26"},"nodeType":"YulFunctionCall","src":"3174:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3199:3:26","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3170:3:26"},"nodeType":"YulFunctionCall","src":"3170:33:26"},"nodeType":"YulIf","src":"3167:120:26"},{"nodeType":"YulBlock","src":"3297:142:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3312:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3326:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3316:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3341:88:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3401:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3412:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3397:3:26"},"nodeType":"YulFunctionCall","src":"3397:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3421:7:26"}],"functionName":{"name":"abi_decode_t_struct$_Origin_$515_calldata_ptr","nodeType":"YulIdentifier","src":"3351:45:26"},"nodeType":"YulFunctionCall","src":"3351:78:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3341:6:26"}]}]},{"nodeType":"YulBlock","src":"3449:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3464:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3478:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3468:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3494:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3529:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3540:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3525:3:26"},"nodeType":"YulFunctionCall","src":"3525:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3549:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3504:20:26"},"nodeType":"YulFunctionCall","src":"3504:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3494:6:26"}]}]},{"nodeType":"YulBlock","src":"3577:298:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3592:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3623:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3634:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3619:3:26"},"nodeType":"YulFunctionCall","src":"3619:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3606:12:26"},"nodeType":"YulFunctionCall","src":"3606:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3596:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3686:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3688:77:26"},"nodeType":"YulFunctionCall","src":"3688:79:26"},"nodeType":"YulExpressionStatement","src":"3688:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3658:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3666:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3655:2:26"},"nodeType":"YulFunctionCall","src":"3655:30:26"},"nodeType":"YulIf","src":"3652:117:26"},{"nodeType":"YulAssignment","src":"3783:82:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3848:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:26"},"nodeType":"YulFunctionCall","src":"3833:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3857:7:26"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"3801:31:26"},"nodeType":"YulFunctionCall","src":"3801:64:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3783:6:26"},{"name":"value3","nodeType":"YulIdentifier","src":"3791:6:26"}]}]},{"nodeType":"YulBlock","src":"3885:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3900:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3914:3:26","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3904:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3931:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3966:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3977:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3962:3:26"},"nodeType":"YulFunctionCall","src":"3962:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3986:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3941:20:26"},"nodeType":"YulFunctionCall","src":"3941:53:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3931:6:26"}]}]},{"nodeType":"YulBlock","src":"4014:298:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4029:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4060:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4071:3:26","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:26"},"nodeType":"YulFunctionCall","src":"4056:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:26"},"nodeType":"YulFunctionCall","src":"4043:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4033:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4123:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4125:77:26"},"nodeType":"YulFunctionCall","src":"4125:79:26"},"nodeType":"YulExpressionStatement","src":"4125:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4095:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4103:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4092:2:26"},"nodeType":"YulFunctionCall","src":"4092:30:26"},"nodeType":"YulIf","src":"4089:117:26"},{"nodeType":"YulAssignment","src":"4220:82:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4274:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4285:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4270:3:26"},"nodeType":"YulFunctionCall","src":"4270:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4294:7:26"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"4238:31:26"},"nodeType":"YulFunctionCall","src":"4238:64:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4220:6:26"},{"name":"value6","nodeType":"YulIdentifier","src":"4228:6:26"}]}]}]},"name":"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes32t_bytes_calldata_ptrt_addresst_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3079:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3090:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3102:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3110:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3118:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3126:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3134:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3142:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3150:6:26","type":""}],"src":"2960:1359:26"},{"body":{"nodeType":"YulBlock","src":"4369:57:26","statements":[{"nodeType":"YulAssignment","src":"4379:41:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4394:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4401:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4390:3:26"},"nodeType":"YulFunctionCall","src":"4390:30:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4379:7:26"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4351:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4361:7:26","type":""}],"src":"4325:101:26"},{"body":{"nodeType":"YulBlock","src":"4495:52:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4512:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4534:5:26"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"4517:16:26"},"nodeType":"YulFunctionCall","src":"4517:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4505:6:26"},"nodeType":"YulFunctionCall","src":"4505:36:26"},"nodeType":"YulExpressionStatement","src":"4505:36:26"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4483:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4490:3:26","type":""}],"src":"4432:115:26"},{"body":{"nodeType":"YulBlock","src":"4675:202:26","statements":[{"nodeType":"YulAssignment","src":"4685:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4697:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4708:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4693:3:26"},"nodeType":"YulFunctionCall","src":"4693:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4685:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4763:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4776:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4787:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4772:3:26"},"nodeType":"YulFunctionCall","src":"4772:17:26"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"4721:41:26"},"nodeType":"YulFunctionCall","src":"4721:69:26"},"nodeType":"YulExpressionStatement","src":"4721:69:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4842:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4855:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4866:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4851:3:26"},"nodeType":"YulFunctionCall","src":"4851:18:26"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"4800:41:26"},"nodeType":"YulFunctionCall","src":"4800:70:26"},"nodeType":"YulExpressionStatement","src":"4800:70:26"}]},"name":"abi_encode_tuple_t_uint64_t_uint64__to_t_uint64_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4639:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4651:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4659:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4670:4:26","type":""}],"src":"4553:324:26"},{"body":{"nodeType":"YulBlock","src":"4972:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4989:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4992:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4982:6:26"},"nodeType":"YulFunctionCall","src":"4982:12:26"},"nodeType":"YulExpressionStatement","src":"4982:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"4883:117:26"},{"body":{"nodeType":"YulBlock","src":"5054:54:26","statements":[{"nodeType":"YulAssignment","src":"5064:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5082:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5089:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5078:3:26"},"nodeType":"YulFunctionCall","src":"5078:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5098:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5094:3:26"},"nodeType":"YulFunctionCall","src":"5094:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5074:3:26"},"nodeType":"YulFunctionCall","src":"5074:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5064:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5037:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5047:6:26","type":""}],"src":"5006:102:26"},{"body":{"nodeType":"YulBlock","src":"5142:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5159:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5162:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5152:6:26"},"nodeType":"YulFunctionCall","src":"5152:88:26"},"nodeType":"YulExpressionStatement","src":"5152:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5256:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5259:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5249:6:26"},"nodeType":"YulFunctionCall","src":"5249:15:26"},"nodeType":"YulExpressionStatement","src":"5249:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5280:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5283:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5273:6:26"},"nodeType":"YulFunctionCall","src":"5273:15:26"},"nodeType":"YulExpressionStatement","src":"5273:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5114:180:26"},{"body":{"nodeType":"YulBlock","src":"5343:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5353:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5375:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5405:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5383:21:26"},"nodeType":"YulFunctionCall","src":"5383:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5371:3:26"},"nodeType":"YulFunctionCall","src":"5371:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5357:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5522:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5524:16:26"},"nodeType":"YulFunctionCall","src":"5524:18:26"},"nodeType":"YulExpressionStatement","src":"5524:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5465:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"5477:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5462:2:26"},"nodeType":"YulFunctionCall","src":"5462:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5501:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5513:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5498:2:26"},"nodeType":"YulFunctionCall","src":"5498:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5459:2:26"},"nodeType":"YulFunctionCall","src":"5459:62:26"},"nodeType":"YulIf","src":"5456:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5560:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5564:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5553:6:26"},"nodeType":"YulFunctionCall","src":"5553:22:26"},"nodeType":"YulExpressionStatement","src":"5553:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5329:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"5337:4:26","type":""}],"src":"5300:281:26"},{"body":{"nodeType":"YulBlock","src":"5628:88:26","statements":[{"nodeType":"YulAssignment","src":"5638:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5648:18:26"},"nodeType":"YulFunctionCall","src":"5648:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5638:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5697:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"5705:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5677:19:26"},"nodeType":"YulFunctionCall","src":"5677:33:26"},"nodeType":"YulExpressionStatement","src":"5677:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5612:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5621:6:26","type":""}],"src":"5587:129:26"},{"body":{"nodeType":"YulBlock","src":"5789:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"5894:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5896:16:26"},"nodeType":"YulFunctionCall","src":"5896:18:26"},"nodeType":"YulExpressionStatement","src":"5896:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5866:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5874:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5863:2:26"},"nodeType":"YulFunctionCall","src":"5863:30:26"},"nodeType":"YulIf","src":"5860:56:26"},{"nodeType":"YulAssignment","src":"5926:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5956:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5934:21:26"},"nodeType":"YulFunctionCall","src":"5934:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5926:4:26"}]},{"nodeType":"YulAssignment","src":"6000:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6012:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"6018:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6008:3:26"},"nodeType":"YulFunctionCall","src":"6008:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6000:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5773:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5784:4:26","type":""}],"src":"5722:308:26"},{"body":{"nodeType":"YulBlock","src":"6100:82:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6123:3:26"},{"name":"src","nodeType":"YulIdentifier","src":"6128:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6133:6:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6110:12:26"},"nodeType":"YulFunctionCall","src":"6110:30:26"},"nodeType":"YulExpressionStatement","src":"6110:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6160:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6165:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6156:3:26"},"nodeType":"YulFunctionCall","src":"6156:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"6174:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6149:6:26"},"nodeType":"YulFunctionCall","src":"6149:27:26"},"nodeType":"YulExpressionStatement","src":"6149:27:26"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6082:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"6087:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"6092:6:26","type":""}],"src":"6036:146:26"},{"body":{"nodeType":"YulBlock","src":"6272:341:26","statements":[{"nodeType":"YulAssignment","src":"6282:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6349:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6307:41:26"},"nodeType":"YulFunctionCall","src":"6307:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6291:15:26"},"nodeType":"YulFunctionCall","src":"6291:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6282:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6373:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"6380:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6366:6:26"},"nodeType":"YulFunctionCall","src":"6366:21:26"},"nodeType":"YulExpressionStatement","src":"6366:21:26"},{"nodeType":"YulVariableDeclaration","src":"6396:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6411:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6418:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6407:3:26"},"nodeType":"YulFunctionCall","src":"6407:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6400:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6461:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"6463:77:26"},"nodeType":"YulFunctionCall","src":"6463:79:26"},"nodeType":"YulExpressionStatement","src":"6463:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6442:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6447:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6438:3:26"},"nodeType":"YulFunctionCall","src":"6438:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"6456:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6435:2:26"},"nodeType":"YulFunctionCall","src":"6435:25:26"},"nodeType":"YulIf","src":"6432:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6590:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"6595:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6600:6:26"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6553:36:26"},"nodeType":"YulFunctionCall","src":"6553:54:26"},"nodeType":"YulExpressionStatement","src":"6553:54:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"6245:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"6250:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"6258:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6266:5:26","type":""}],"src":"6188:425:26"},{"body":{"nodeType":"YulBlock","src":"6695:278:26","statements":[{"body":{"nodeType":"YulBlock","src":"6744:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6746:77:26"},"nodeType":"YulFunctionCall","src":"6746:79:26"},"nodeType":"YulExpressionStatement","src":"6746:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6723:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6731:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6719:3:26"},"nodeType":"YulFunctionCall","src":"6719:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"6738:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6715:3:26"},"nodeType":"YulFunctionCall","src":"6715:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6708:6:26"},"nodeType":"YulFunctionCall","src":"6708:35:26"},"nodeType":"YulIf","src":"6705:122:26"},{"nodeType":"YulVariableDeclaration","src":"6836:34:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6863:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6850:12:26"},"nodeType":"YulFunctionCall","src":"6850:20:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6840:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6879:88:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6940:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6948:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6936:3:26"},"nodeType":"YulFunctionCall","src":"6936:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"6955:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"6963:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6888:47:26"},"nodeType":"YulFunctionCall","src":"6888:79:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6879:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6673:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"6681:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6689:5:26","type":""}],"src":"6633:340:26"},{"body":{"nodeType":"YulBlock","src":"7055:433:26","statements":[{"body":{"nodeType":"YulBlock","src":"7101:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7103:77:26"},"nodeType":"YulFunctionCall","src":"7103:79:26"},"nodeType":"YulExpressionStatement","src":"7103:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7076:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7085:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7072:3:26"},"nodeType":"YulFunctionCall","src":"7072:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7097:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7068:3:26"},"nodeType":"YulFunctionCall","src":"7068:32:26"},"nodeType":"YulIf","src":"7065:119:26"},{"nodeType":"YulBlock","src":"7194:287:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7209:45:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7240:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7251:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7236:3:26"},"nodeType":"YulFunctionCall","src":"7236:17:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7223:12:26"},"nodeType":"YulFunctionCall","src":"7223:31:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7213:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7301:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7303:77:26"},"nodeType":"YulFunctionCall","src":"7303:79:26"},"nodeType":"YulExpressionStatement","src":"7303:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7273:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7281:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7270:2:26"},"nodeType":"YulFunctionCall","src":"7270:30:26"},"nodeType":"YulIf","src":"7267:117:26"},{"nodeType":"YulAssignment","src":"7398:73:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7443:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7454:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7439:3:26"},"nodeType":"YulFunctionCall","src":"7439:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7463:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7408:30:26"},"nodeType":"YulFunctionCall","src":"7408:63:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7398:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7025:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7036:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7048:6:26","type":""}],"src":"6979:509:26"},{"body":{"nodeType":"YulBlock","src":"7536:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"7592:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7601:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7604:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7594:6:26"},"nodeType":"YulFunctionCall","src":"7594:12:26"},"nodeType":"YulExpressionStatement","src":"7594:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7559:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7583:5:26"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"7566:16:26"},"nodeType":"YulFunctionCall","src":"7566:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7556:2:26"},"nodeType":"YulFunctionCall","src":"7556:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7549:6:26"},"nodeType":"YulFunctionCall","src":"7549:42:26"},"nodeType":"YulIf","src":"7546:62:26"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7529:5:26","type":""}],"src":"7494:120:26"},{"body":{"nodeType":"YulBlock","src":"7671:86:26","statements":[{"nodeType":"YulAssignment","src":"7681:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7703:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7690:12:26"},"nodeType":"YulFunctionCall","src":"7690:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7681:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7745:5:26"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"7719:25:26"},"nodeType":"YulFunctionCall","src":"7719:32:26"},"nodeType":"YulExpressionStatement","src":"7719:32:26"}]},"name":"abi_decode_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7649:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"7657:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7665:5:26","type":""}],"src":"7620:137:26"},{"body":{"nodeType":"YulBlock","src":"7845:390:26","statements":[{"body":{"nodeType":"YulBlock","src":"7891:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7893:77:26"},"nodeType":"YulFunctionCall","src":"7893:79:26"},"nodeType":"YulExpressionStatement","src":"7893:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7866:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7875:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7862:3:26"},"nodeType":"YulFunctionCall","src":"7862:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7887:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7858:3:26"},"nodeType":"YulFunctionCall","src":"7858:32:26"},"nodeType":"YulIf","src":"7855:119:26"},{"nodeType":"YulBlock","src":"7984:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7999:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8013:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8003:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8028:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8062:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8073:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8058:3:26"},"nodeType":"YulFunctionCall","src":"8058:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8082:7:26"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"8038:19:26"},"nodeType":"YulFunctionCall","src":"8038:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8028:6:26"}]}]},{"nodeType":"YulBlock","src":"8110:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8125:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8139:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8129:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8155:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8190:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8201:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8186:3:26"},"nodeType":"YulFunctionCall","src":"8186:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8210:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"8165:20:26"},"nodeType":"YulFunctionCall","src":"8165:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8155:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7807:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7818:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7830:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7838:6:26","type":""}],"src":"7763:472:26"},{"body":{"nodeType":"YulBlock","src":"8286:32:26","statements":[{"nodeType":"YulAssignment","src":"8296:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"8307:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8296:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8268:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8278:7:26","type":""}],"src":"8241:77:26"},{"body":{"nodeType":"YulBlock","src":"8379:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8396:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8419:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8401:17:26"},"nodeType":"YulFunctionCall","src":"8401:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8389:6:26"},"nodeType":"YulFunctionCall","src":"8389:37:26"},"nodeType":"YulExpressionStatement","src":"8389:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8367:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8374:3:26","type":""}],"src":"8324:108:26"},{"body":{"nodeType":"YulBlock","src":"8612:402:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8622:26:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8638:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8643:4:26","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8634:3:26"},"nodeType":"YulFunctionCall","src":"8634:14:26"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"8626:4:26","type":""}]},{"nodeType":"YulBlock","src":"8658:169:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8698:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8728:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8735:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8724:3:26"},"nodeType":"YulFunctionCall","src":"8724:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8718:5:26"},"nodeType":"YulFunctionCall","src":"8718:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8702:12:26","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8788:12:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8806:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8811:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8802:3:26"},"nodeType":"YulFunctionCall","src":"8802:14:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8754:33:26"},"nodeType":"YulFunctionCall","src":"8754:63:26"},"nodeType":"YulExpressionStatement","src":"8754:63:26"}]},{"nodeType":"YulBlock","src":"8837:170:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8878:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8908:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8915:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8904:3:26"},"nodeType":"YulFunctionCall","src":"8904:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8898:5:26"},"nodeType":"YulFunctionCall","src":"8898:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"8882:12:26","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"8968:12:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8986:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8991:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8982:3:26"},"nodeType":"YulFunctionCall","src":"8982:14:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8934:33:26"},"nodeType":"YulFunctionCall","src":"8934:63:26"},"nodeType":"YulExpressionStatement","src":"8934:63:26"}]}]},"name":"abi_encode_t_struct$_MessagingFee_$508_memory_ptr_to_t_struct$_MessagingFee_$508_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8599:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8606:3:26","type":""}],"src":"8488:526:26"},{"body":{"nodeType":"YulBlock","src":"9176:182:26","statements":[{"nodeType":"YulAssignment","src":"9186:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9209:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9194:3:26"},"nodeType":"YulFunctionCall","src":"9194:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9186:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9324:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9337:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9348:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9333:3:26"},"nodeType":"YulFunctionCall","src":"9333:17:26"}],"functionName":{"name":"abi_encode_t_struct$_MessagingFee_$508_memory_ptr_to_t_struct$_MessagingFee_$508_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9222:101:26"},"nodeType":"YulFunctionCall","src":"9222:129:26"},"nodeType":"YulExpressionStatement","src":"9222:129:26"}]},"name":"abi_encode_tuple_t_struct$_MessagingFee_$508_memory_ptr__to_t_struct$_MessagingFee_$508_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9148:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9160:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9171:4:26","type":""}],"src":"9020:338:26"},{"body":{"nodeType":"YulBlock","src":"9396:28:26","statements":[{"nodeType":"YulAssignment","src":"9406:12:26","value":{"name":"value","nodeType":"YulIdentifier","src":"9413:5:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9406:3:26"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9382:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9392:3:26","type":""}],"src":"9364:60:26"},{"body":{"nodeType":"YulBlock","src":"9490:82:26","statements":[{"nodeType":"YulAssignment","src":"9500:66:26","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9558:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"9540:17:26"},"nodeType":"YulFunctionCall","src":"9540:24:26"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"9531:8:26"},"nodeType":"YulFunctionCall","src":"9531:34:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"9513:17:26"},"nodeType":"YulFunctionCall","src":"9513:53:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9500:9:26"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9470:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9480:9:26","type":""}],"src":"9430:142:26"},{"body":{"nodeType":"YulBlock","src":"9638:66:26","statements":[{"nodeType":"YulAssignment","src":"9648:50:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9692:5:26"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"9661:30:26"},"nodeType":"YulFunctionCall","src":"9661:37:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9648:9:26"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9618:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9628:9:26","type":""}],"src":"9578:126:26"},{"body":{"nodeType":"YulBlock","src":"9798:66:26","statements":[{"nodeType":"YulAssignment","src":"9808:50:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9852:5:26"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"9821:30:26"},"nodeType":"YulFunctionCall","src":"9821:37:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9808:9:26"}]}]},"name":"convert_t_contract$_ILayerZeroEndpointV2_$677_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9778:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9788:9:26","type":""}],"src":"9710:154:26"},{"body":{"nodeType":"YulBlock","src":"9963:94:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9980:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10044:5:26"}],"functionName":{"name":"convert_t_contract$_ILayerZeroEndpointV2_$677_to_t_address","nodeType":"YulIdentifier","src":"9985:58:26"},"nodeType":"YulFunctionCall","src":"9985:65:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9973:6:26"},"nodeType":"YulFunctionCall","src":"9973:78:26"},"nodeType":"YulExpressionStatement","src":"9973:78:26"}]},"name":"abi_encode_t_contract$_ILayerZeroEndpointV2_$677_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9951:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9958:3:26","type":""}],"src":"9870:187:26"},{"body":{"nodeType":"YulBlock","src":"10189:152:26","statements":[{"nodeType":"YulAssignment","src":"10199:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10211:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10222:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10207:3:26"},"nodeType":"YulFunctionCall","src":"10207:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10199:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10307:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10320:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10331:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10316:3:26"},"nodeType":"YulFunctionCall","src":"10316:17:26"}],"functionName":{"name":"abi_encode_t_contract$_ILayerZeroEndpointV2_$677_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10235:71:26"},"nodeType":"YulFunctionCall","src":"10235:99:26"},"nodeType":"YulExpressionStatement","src":"10235:99:26"}]},"name":"abi_encode_tuple_t_contract$_ILayerZeroEndpointV2_$677__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10161:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10173:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10184:4:26","type":""}],"src":"10063:278:26"},{"body":{"nodeType":"YulBlock","src":"10390:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"10447:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10456:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10459:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10449:6:26"},"nodeType":"YulFunctionCall","src":"10449:12:26"},"nodeType":"YulExpressionStatement","src":"10449:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10413:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10438:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10420:17:26"},"nodeType":"YulFunctionCall","src":"10420:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10410:2:26"},"nodeType":"YulFunctionCall","src":"10410:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10403:6:26"},"nodeType":"YulFunctionCall","src":"10403:43:26"},"nodeType":"YulIf","src":"10400:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10383:5:26","type":""}],"src":"10347:122:26"},{"body":{"nodeType":"YulBlock","src":"10527:87:26","statements":[{"nodeType":"YulAssignment","src":"10537:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10559:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10546:12:26"},"nodeType":"YulFunctionCall","src":"10546:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10537:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10602:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"10575:26:26"},"nodeType":"YulFunctionCall","src":"10575:33:26"},"nodeType":"YulExpressionStatement","src":"10575:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10505:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"10513:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10521:5:26","type":""}],"src":"10475:139:26"},{"body":{"nodeType":"YulBlock","src":"10703:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"10749:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10751:77:26"},"nodeType":"YulFunctionCall","src":"10751:79:26"},"nodeType":"YulExpressionStatement","src":"10751:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10724:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10733:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10720:3:26"},"nodeType":"YulFunctionCall","src":"10720:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10745:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10716:3:26"},"nodeType":"YulFunctionCall","src":"10716:32:26"},"nodeType":"YulIf","src":"10713:119:26"},{"nodeType":"YulBlock","src":"10842:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10857:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10871:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10861:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10886:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10921:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10932:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10917:3:26"},"nodeType":"YulFunctionCall","src":"10917:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10941:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10896:20:26"},"nodeType":"YulFunctionCall","src":"10896:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10886:6:26"}]}]},{"nodeType":"YulBlock","src":"10969:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10984:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10998:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10988:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11014:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11049:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11060:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11045:3:26"},"nodeType":"YulFunctionCall","src":"11045:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11069:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11024:20:26"},"nodeType":"YulFunctionCall","src":"11024:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11014:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10665:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10676:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10688:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10696:6:26","type":""}],"src":"10620:474:26"},{"body":{"nodeType":"YulBlock","src":"11158:40:26","statements":[{"nodeType":"YulAssignment","src":"11169:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11185:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11179:5:26"},"nodeType":"YulFunctionCall","src":"11179:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11169:6:26"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11141:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11151:6:26","type":""}],"src":"11100:98:26"},{"body":{"nodeType":"YulBlock","src":"11299:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11316:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11321:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11309:6:26"},"nodeType":"YulFunctionCall","src":"11309:19:26"},"nodeType":"YulExpressionStatement","src":"11309:19:26"},{"nodeType":"YulAssignment","src":"11337:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11356:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11361:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11352:3:26"},"nodeType":"YulFunctionCall","src":"11352:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11337:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11271:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"11276:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"11287:11:26","type":""}],"src":"11204:168:26"},{"body":{"nodeType":"YulBlock","src":"11440:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11450:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11459:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11454:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"11519:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11544:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"11549:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11540:3:26"},"nodeType":"YulFunctionCall","src":"11540:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11563:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"11568:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11559:3:26"},"nodeType":"YulFunctionCall","src":"11559:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11553:5:26"},"nodeType":"YulFunctionCall","src":"11553:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11533:6:26"},"nodeType":"YulFunctionCall","src":"11533:39:26"},"nodeType":"YulExpressionStatement","src":"11533:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11480:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"11483:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11477:2:26"},"nodeType":"YulFunctionCall","src":"11477:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11491:19:26","statements":[{"nodeType":"YulAssignment","src":"11493:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11502:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"11505:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11498:3:26"},"nodeType":"YulFunctionCall","src":"11498:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11493:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"11473:3:26","statements":[]},"src":"11469:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11602:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11607:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11598:3:26"},"nodeType":"YulFunctionCall","src":"11598:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"11616:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11591:6:26"},"nodeType":"YulFunctionCall","src":"11591:27:26"},"nodeType":"YulExpressionStatement","src":"11591:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11422:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11427:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"11432:6:26","type":""}],"src":"11378:246:26"},{"body":{"nodeType":"YulBlock","src":"11720:283:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11730:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11776:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"11744:31:26"},"nodeType":"YulFunctionCall","src":"11744:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11734:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11791:77:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11856:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11861:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11798:57:26"},"nodeType":"YulFunctionCall","src":"11798:70:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11791:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11916:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"11923:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11912:3:26"},"nodeType":"YulFunctionCall","src":"11912:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"11930:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11935:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11877:34:26"},"nodeType":"YulFunctionCall","src":"11877:65:26"},"nodeType":"YulExpressionStatement","src":"11877:65:26"},{"nodeType":"YulAssignment","src":"11951:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11962:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11989:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"11967:21:26"},"nodeType":"YulFunctionCall","src":"11967:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11958:3:26"},"nodeType":"YulFunctionCall","src":"11958:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11951:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11701:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11708:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11716:3:26","type":""}],"src":"11630:373:26"},{"body":{"nodeType":"YulBlock","src":"12125:193:26","statements":[{"nodeType":"YulAssignment","src":"12135:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12147:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12158:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12143:3:26"},"nodeType":"YulFunctionCall","src":"12143:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12135:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12182:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12193:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12178:3:26"},"nodeType":"YulFunctionCall","src":"12178:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12201:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12207:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12197:3:26"},"nodeType":"YulFunctionCall","src":"12197:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12171:6:26"},"nodeType":"YulFunctionCall","src":"12171:47:26"},"nodeType":"YulExpressionStatement","src":"12171:47:26"},{"nodeType":"YulAssignment","src":"12227:84:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12297:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"12306:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12235:61:26"},"nodeType":"YulFunctionCall","src":"12235:76:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12227:4:26"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12097:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12109:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12120:4:26","type":""}],"src":"12009:309:26"},{"body":{"nodeType":"YulBlock","src":"12420:122:26","statements":[{"nodeType":"YulAssignment","src":"12430:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12442:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12453:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12438:3:26"},"nodeType":"YulFunctionCall","src":"12438:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12430:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12508:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12521:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12532:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12517:3:26"},"nodeType":"YulFunctionCall","src":"12517:17:26"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"12466:41:26"},"nodeType":"YulFunctionCall","src":"12466:69:26"},"nodeType":"YulExpressionStatement","src":"12466:69:26"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12392:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12404:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12415:4:26","type":""}],"src":"12324:218:26"},{"body":{"nodeType":"YulBlock","src":"12692:725:26","statements":[{"body":{"nodeType":"YulBlock","src":"12739:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12741:77:26"},"nodeType":"YulFunctionCall","src":"12741:79:26"},"nodeType":"YulExpressionStatement","src":"12741:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12713:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12722:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12709:3:26"},"nodeType":"YulFunctionCall","src":"12709:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"12734:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12705:3:26"},"nodeType":"YulFunctionCall","src":"12705:33:26"},"nodeType":"YulIf","src":"12702:120:26"},{"nodeType":"YulBlock","src":"12832:142:26","statements":[{"nodeType":"YulVariableDeclaration","src":"12847:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"12861:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12851:6:26","type":""}]},{"nodeType":"YulAssignment","src":"12876:88:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12936:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"12947:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12932:3:26"},"nodeType":"YulFunctionCall","src":"12932:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12956:7:26"}],"functionName":{"name":"abi_decode_t_struct$_Origin_$515_calldata_ptr","nodeType":"YulIdentifier","src":"12886:45:26"},"nodeType":"YulFunctionCall","src":"12886:78:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12876:6:26"}]}]},{"nodeType":"YulBlock","src":"12984:297:26","statements":[{"nodeType":"YulVariableDeclaration","src":"12999:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13030:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13041:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13026:3:26"},"nodeType":"YulFunctionCall","src":"13026:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13013:12:26"},"nodeType":"YulFunctionCall","src":"13013:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13003:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"13092:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"13094:77:26"},"nodeType":"YulFunctionCall","src":"13094:79:26"},"nodeType":"YulExpressionStatement","src":"13094:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13064:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13072:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13061:2:26"},"nodeType":"YulFunctionCall","src":"13061:30:26"},"nodeType":"YulIf","src":"13058:117:26"},{"nodeType":"YulAssignment","src":"13189:82:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13243:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"13254:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13239:3:26"},"nodeType":"YulFunctionCall","src":"13239:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13263:7:26"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"13207:31:26"},"nodeType":"YulFunctionCall","src":"13207:64:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13189:6:26"},{"name":"value2","nodeType":"YulIdentifier","src":"13197:6:26"}]}]},{"nodeType":"YulBlock","src":"13291:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"13306:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"13320:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13310:6:26","type":""}]},{"nodeType":"YulAssignment","src":"13337:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13372:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"13383:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13368:3:26"},"nodeType":"YulFunctionCall","src":"13368:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13392:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13347:20:26"},"nodeType":"YulFunctionCall","src":"13347:53:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"13337:6:26"}]}]}]},"name":"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12638:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12649:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12661:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12669:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12677:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12685:6:26","type":""}],"src":"12548:869:26"},{"body":{"nodeType":"YulBlock","src":"13465:48:26","statements":[{"nodeType":"YulAssignment","src":"13475:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13500:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13493:6:26"},"nodeType":"YulFunctionCall","src":"13493:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13486:6:26"},"nodeType":"YulFunctionCall","src":"13486:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13475:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13447:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13457:7:26","type":""}],"src":"13423:90:26"},{"body":{"nodeType":"YulBlock","src":"13578:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13595:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13615:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13600:14:26"},"nodeType":"YulFunctionCall","src":"13600:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13588:6:26"},"nodeType":"YulFunctionCall","src":"13588:34:26"},"nodeType":"YulExpressionStatement","src":"13588:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13566:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13573:3:26","type":""}],"src":"13519:109:26"},{"body":{"nodeType":"YulBlock","src":"13726:118:26","statements":[{"nodeType":"YulAssignment","src":"13736:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13748:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13759:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13744:3:26"},"nodeType":"YulFunctionCall","src":"13744:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13736:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13810:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13823:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13834:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13819:3:26"},"nodeType":"YulFunctionCall","src":"13819:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"13772:37:26"},"nodeType":"YulFunctionCall","src":"13772:65:26"},"nodeType":"YulExpressionStatement","src":"13772:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13698:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13710:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13721:4:26","type":""}],"src":"13634:210:26"},{"body":{"nodeType":"YulBlock","src":"13915:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13932:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13955:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"13937:17:26"},"nodeType":"YulFunctionCall","src":"13937:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13925:6:26"},"nodeType":"YulFunctionCall","src":"13925:37:26"},"nodeType":"YulExpressionStatement","src":"13925:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13903:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13910:3:26","type":""}],"src":"13850:118:26"},{"body":{"nodeType":"YulBlock","src":"14072:124:26","statements":[{"nodeType":"YulAssignment","src":"14082:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14094:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14105:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14090:3:26"},"nodeType":"YulFunctionCall","src":"14090:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14082:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14162:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14175:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14186:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14171:3:26"},"nodeType":"YulFunctionCall","src":"14171:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"14118:43:26"},"nodeType":"YulFunctionCall","src":"14118:71:26"},"nodeType":"YulExpressionStatement","src":"14118:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14044:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14056:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14067:4:26","type":""}],"src":"13974:222:26"},{"body":{"nodeType":"YulBlock","src":"14268:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"14314:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14316:77:26"},"nodeType":"YulFunctionCall","src":"14316:79:26"},"nodeType":"YulExpressionStatement","src":"14316:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14289:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"14298:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14285:3:26"},"nodeType":"YulFunctionCall","src":"14285:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"14310:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14281:3:26"},"nodeType":"YulFunctionCall","src":"14281:32:26"},"nodeType":"YulIf","src":"14278:119:26"},{"nodeType":"YulBlock","src":"14407:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14422:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14436:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14426:6:26","type":""}]},{"nodeType":"YulAssignment","src":"14451:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14486:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"14497:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14482:3:26"},"nodeType":"YulFunctionCall","src":"14482:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14506:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14461:20:26"},"nodeType":"YulFunctionCall","src":"14461:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14451:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14238:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14249:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14261:6:26","type":""}],"src":"14202:329:26"},{"body":{"nodeType":"YulBlock","src":"14620:40:26","statements":[{"nodeType":"YulAssignment","src":"14631:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14647:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14641:5:26"},"nodeType":"YulFunctionCall","src":"14641:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14631:6:26"}]}]},"name":"array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14603:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14613:6:26","type":""}],"src":"14537:123:26"},{"body":{"nodeType":"YulBlock","src":"14786:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14803:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"14808:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14796:6:26"},"nodeType":"YulFunctionCall","src":"14796:19:26"},"nodeType":"YulExpressionStatement","src":"14796:19:26"},{"nodeType":"YulAssignment","src":"14824:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14843:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14848:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:26"},"nodeType":"YulFunctionCall","src":"14839:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14824:11:26"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14758:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"14763:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14774:11:26","type":""}],"src":"14666:193:26"},{"body":{"nodeType":"YulBlock","src":"14946:60:26","statements":[{"nodeType":"YulAssignment","src":"14956:11:26","value":{"name":"ptr","nodeType":"YulIdentifier","src":"14964:3:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"14956:4:26"}]},{"nodeType":"YulAssignment","src":"14977:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"14989:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14994:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14985:3:26"},"nodeType":"YulFunctionCall","src":"14985:14:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"14977:4:26"}]}]},"name":"array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"14933:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"14941:4:26","type":""}],"src":"14865:141:26"},{"body":{"nodeType":"YulBlock","src":"15097:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15114:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15119:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15107:6:26"},"nodeType":"YulFunctionCall","src":"15107:19:26"},"nodeType":"YulExpressionStatement","src":"15107:19:26"},{"nodeType":"YulAssignment","src":"15135:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15154:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15159:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15150:3:26"},"nodeType":"YulFunctionCall","src":"15150:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15135:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15069:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"15074:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15085:11:26","type":""}],"src":"15012:158:26"},{"body":{"nodeType":"YulBlock","src":"15256:273:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15266:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15312:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15280:31:26"},"nodeType":"YulFunctionCall","src":"15280:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15270:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15327:67:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15382:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15387:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15334:47:26"},"nodeType":"YulFunctionCall","src":"15334:60:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15327:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15442:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"15449:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15438:3:26"},"nodeType":"YulFunctionCall","src":"15438:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"15456:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"15461:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15403:34:26"},"nodeType":"YulFunctionCall","src":"15403:65:26"},"nodeType":"YulExpressionStatement","src":"15403:65:26"},{"nodeType":"YulAssignment","src":"15477:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15488:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15515:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"15493:21:26"},"nodeType":"YulFunctionCall","src":"15493:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15484:3:26"},"nodeType":"YulFunctionCall","src":"15484:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15477:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15237:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15244:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15252:3:26","type":""}],"src":"15176:353:26"},{"body":{"nodeType":"YulBlock","src":"15633:94:26","statements":[{"nodeType":"YulAssignment","src":"15643:78:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15709:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"15717:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15657:51:26"},"nodeType":"YulFunctionCall","src":"15657:64:26"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"15643:10:26"}]}]},"name":"abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"15606:6:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15614:3:26","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"15622:10:26","type":""}],"src":"15535:192:26"},{"body":{"nodeType":"YulBlock","src":"15817:38:26","statements":[{"nodeType":"YulAssignment","src":"15827:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15839:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15844:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15835:3:26"},"nodeType":"YulFunctionCall","src":"15835:14:26"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"15827:4:26"}]}]},"name":"array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15804:3:26","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"15812:4:26","type":""}],"src":"15733:122:26"},{"body":{"nodeType":"YulBlock","src":"16029:841:26","statements":[{"nodeType":"YulVariableDeclaration","src":"16039:77:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16110:5:26"}],"functionName":{"name":"array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16053:56:26"},"nodeType":"YulFunctionCall","src":"16053:63:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16043:6:26","type":""}]},{"nodeType":"YulAssignment","src":"16125:102:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16215:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"16220:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16132:82:26"},"nodeType":"YulFunctionCall","src":"16132:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16125:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"16236:20:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"16253:3:26"},"variables":[{"name":"headStart","nodeType":"YulTypedName","src":"16240:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16265:39:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16281:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16290:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16298:4:26","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16286:3:26"},"nodeType":"YulFunctionCall","src":"16286:17:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16277:3:26"},"nodeType":"YulFunctionCall","src":"16277:27:26"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"16269:4:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16313:80:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16387:5:26"}],"functionName":{"name":"array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16328:58:26"},"nodeType":"YulFunctionCall","src":"16328:65:26"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"16317:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16402:21:26","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"16416:7:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"16406:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"16492:333:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16513:3:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16522:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"16528:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16518:3:26"},"nodeType":"YulFunctionCall","src":"16518:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16506:6:26"},"nodeType":"YulFunctionCall","src":"16506:33:26"},"nodeType":"YulExpressionStatement","src":"16506:33:26"},{"nodeType":"YulVariableDeclaration","src":"16552:34:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16579:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16573:5:26"},"nodeType":"YulFunctionCall","src":"16573:13:26"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"16556:13:26","type":""}]},{"nodeType":"YulAssignment","src":"16599:90:26","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"16669:13:26"},{"name":"tail","nodeType":"YulIdentifier","src":"16684:4:26"}],"functionName":{"name":"abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"16607:61:26"},"nodeType":"YulFunctionCall","src":"16607:82:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16599:4:26"}]},{"nodeType":"YulAssignment","src":"16702:79:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16774:6:26"}],"functionName":{"name":"array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16712:61:26"},"nodeType":"YulFunctionCall","src":"16712:69:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16702:6:26"}]},{"nodeType":"YulAssignment","src":"16794:21:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16805:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16810:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16801:3:26"},"nodeType":"YulFunctionCall","src":"16801:14:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16794:3:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16454:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"16457:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16451:2:26"},"nodeType":"YulFunctionCall","src":"16451:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16465:18:26","statements":[{"nodeType":"YulAssignment","src":"16467:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16476:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"16479:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16472:3:26"},"nodeType":"YulFunctionCall","src":"16472:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16467:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"16436:14:26","statements":[{"nodeType":"YulVariableDeclaration","src":"16438:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"16447:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16442:1:26","type":""}]}]},"src":"16432:393:26"},{"nodeType":"YulAssignment","src":"16834:11:26","value":{"name":"tail","nodeType":"YulIdentifier","src":"16841:4:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16834:3:26"}]},{"nodeType":"YulAssignment","src":"16854:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"16861:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16854:3:26"}]}]},"name":"abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16008:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16015:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16024:3:26","type":""}],"src":"15887:983:26"},{"body":{"nodeType":"YulBlock","src":"17042:243:26","statements":[{"nodeType":"YulAssignment","src":"17052:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17064:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17075:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17060:3:26"},"nodeType":"YulFunctionCall","src":"17060:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17052:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17099:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17110:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17095:3:26"},"nodeType":"YulFunctionCall","src":"17095:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17118:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17124:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17114:3:26"},"nodeType":"YulFunctionCall","src":"17114:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17088:6:26"},"nodeType":"YulFunctionCall","src":"17088:47:26"},"nodeType":"YulExpressionStatement","src":"17088:47:26"},{"nodeType":"YulAssignment","src":"17144:134:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17264:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"17273:4:26"}],"functionName":{"name":"abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17152:111:26"},"nodeType":"YulFunctionCall","src":"17152:126:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17144:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17014:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17026:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17037:4:26","type":""}],"src":"16876:409:26"},{"body":{"nodeType":"YulBlock","src":"17375:40:26","statements":[{"nodeType":"YulAssignment","src":"17386:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17402:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17396:5:26"},"nodeType":"YulFunctionCall","src":"17396:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17386:6:26"}]}]},"name":"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17358:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17368:6:26","type":""}],"src":"17291:124:26"},{"body":{"nodeType":"YulBlock","src":"17542:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17559:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"17564:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17552:6:26"},"nodeType":"YulFunctionCall","src":"17552:19:26"},"nodeType":"YulExpressionStatement","src":"17552:19:26"},{"nodeType":"YulAssignment","src":"17580:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17599:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17604:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17595:3:26"},"nodeType":"YulFunctionCall","src":"17595:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17580:11:26"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17514:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"17519:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17530:11:26","type":""}],"src":"17421:194:26"},{"body":{"nodeType":"YulBlock","src":"17703:60:26","statements":[{"nodeType":"YulAssignment","src":"17713:11:26","value":{"name":"ptr","nodeType":"YulIdentifier","src":"17721:3:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"17713:4:26"}]},{"nodeType":"YulAssignment","src":"17734:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"17746:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17751:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17742:3:26"},"nodeType":"YulFunctionCall","src":"17742:14:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"17734:4:26"}]}]},"name":"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"17690:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"17698:4:26","type":""}],"src":"17621:142:26"},{"body":{"nodeType":"YulBlock","src":"17828:40:26","statements":[{"nodeType":"YulAssignment","src":"17839:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17855:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17849:5:26"},"nodeType":"YulFunctionCall","src":"17849:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17839:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17811:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17821:6:26","type":""}],"src":"17769:99:26"},{"body":{"nodeType":"YulBlock","src":"17960:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17977:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"17982:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17970:6:26"},"nodeType":"YulFunctionCall","src":"17970:19:26"},"nodeType":"YulExpressionStatement","src":"17970:19:26"},{"nodeType":"YulAssignment","src":"17998:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18017:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18022:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18013:3:26"},"nodeType":"YulFunctionCall","src":"18013:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17998:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17932:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"17937:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17948:11:26","type":""}],"src":"17874:159:26"},{"body":{"nodeType":"YulBlock","src":"18121:275:26","statements":[{"nodeType":"YulVariableDeclaration","src":"18131:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18178:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"18145:32:26"},"nodeType":"YulFunctionCall","src":"18145:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18135:6:26","type":""}]},{"nodeType":"YulAssignment","src":"18193:68:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18249:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"18254:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr","nodeType":"YulIdentifier","src":"18200:48:26"},"nodeType":"YulFunctionCall","src":"18200:61:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18193:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18309:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"18316:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18305:3:26"},"nodeType":"YulFunctionCall","src":"18305:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"18323:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"18328:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"18270:34:26"},"nodeType":"YulFunctionCall","src":"18270:65:26"},"nodeType":"YulExpressionStatement","src":"18270:65:26"},{"nodeType":"YulAssignment","src":"18344:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18355:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18382:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"18360:21:26"},"nodeType":"YulFunctionCall","src":"18360:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18351:3:26"},"nodeType":"YulFunctionCall","src":"18351:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18344:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18102:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18109:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18117:3:26","type":""}],"src":"18039:357:26"},{"body":{"nodeType":"YulBlock","src":"18502:96:26","statements":[{"nodeType":"YulAssignment","src":"18512:80:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18580:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"18588:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"18526:53:26"},"nodeType":"YulFunctionCall","src":"18526:66:26"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"18512:10:26"}]}]},"name":"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"18475:6:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18483:3:26","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"18491:10:26","type":""}],"src":"18402:196:26"},{"body":{"nodeType":"YulBlock","src":"18689:38:26","statements":[{"nodeType":"YulAssignment","src":"18699:22:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"18711:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18716:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18707:3:26"},"nodeType":"YulFunctionCall","src":"18707:14:26"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"18699:4:26"}]}]},"name":"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"18676:3:26","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"18684:4:26","type":""}],"src":"18604:123:26"},{"body":{"nodeType":"YulBlock","src":"18905:847:26","statements":[{"nodeType":"YulVariableDeclaration","src":"18915:78:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18987:5:26"}],"functionName":{"name":"array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"18929:57:26"},"nodeType":"YulFunctionCall","src":"18929:64:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18919:6:26","type":""}]},{"nodeType":"YulAssignment","src":"19002:103:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19093:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"19098:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19009:83:26"},"nodeType":"YulFunctionCall","src":"19009:96:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19002:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"19114:20:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"19131:3:26"},"variables":[{"name":"headStart","nodeType":"YulTypedName","src":"19118:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19143:39:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19159:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19168:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19176:4:26","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"19164:3:26"},"nodeType":"YulFunctionCall","src":"19164:17:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19155:3:26"},"nodeType":"YulFunctionCall","src":"19155:27:26"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"19147:4:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19191:81:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19266:5:26"}],"functionName":{"name":"array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"19206:59:26"},"nodeType":"YulFunctionCall","src":"19206:66:26"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"19195:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19281:21:26","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"19295:7:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"19285:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"19371:336:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19392:3:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19401:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19407:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19397:3:26"},"nodeType":"YulFunctionCall","src":"19397:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19385:6:26"},"nodeType":"YulFunctionCall","src":"19385:33:26"},"nodeType":"YulExpressionStatement","src":"19385:33:26"},{"nodeType":"YulVariableDeclaration","src":"19431:34:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19458:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19452:5:26"},"nodeType":"YulFunctionCall","src":"19452:13:26"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"19435:13:26","type":""}]},{"nodeType":"YulAssignment","src":"19478:92:26","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"19550:13:26"},{"name":"tail","nodeType":"YulIdentifier","src":"19565:4:26"}],"functionName":{"name":"abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr","nodeType":"YulIdentifier","src":"19486:63:26"},"nodeType":"YulFunctionCall","src":"19486:84:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19478:4:26"}]},{"nodeType":"YulAssignment","src":"19583:80:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19656:6:26"}],"functionName":{"name":"array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"19593:62:26"},"nodeType":"YulFunctionCall","src":"19593:70:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19583:6:26"}]},{"nodeType":"YulAssignment","src":"19676:21:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19687:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19692:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19683:3:26"},"nodeType":"YulFunctionCall","src":"19683:14:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19676:3:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19333:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"19336:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19330:2:26"},"nodeType":"YulFunctionCall","src":"19330:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19344:18:26","statements":[{"nodeType":"YulAssignment","src":"19346:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19355:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"19358:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19351:3:26"},"nodeType":"YulFunctionCall","src":"19351:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19346:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"19315:14:26","statements":[{"nodeType":"YulVariableDeclaration","src":"19317:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"19326:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19321:1:26","type":""}]}]},"src":"19311:396:26"},{"nodeType":"YulAssignment","src":"19716:11:26","value":{"name":"tail","nodeType":"YulIdentifier","src":"19723:4:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19716:3:26"}]},{"nodeType":"YulAssignment","src":"19736:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"19743:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19736:3:26"}]}]},"name":"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18884:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18891:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18900:3:26","type":""}],"src":"18761:991:26"},{"body":{"nodeType":"YulBlock","src":"19926:245:26","statements":[{"nodeType":"YulAssignment","src":"19936:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19948:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19959:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19944:3:26"},"nodeType":"YulFunctionCall","src":"19944:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19936:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19983:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19994:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19979:3:26"},"nodeType":"YulFunctionCall","src":"19979:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20002:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"20008:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19998:3:26"},"nodeType":"YulFunctionCall","src":"19998:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19972:6:26"},"nodeType":"YulFunctionCall","src":"19972:47:26"},"nodeType":"YulExpressionStatement","src":"19972:47:26"},{"nodeType":"YulAssignment","src":"20028:136:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20150:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"20159:4:26"}],"functionName":{"name":"abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20036:113:26"},"nodeType":"YulFunctionCall","src":"20036:128:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20028:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19898:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19910:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19921:4:26","type":""}],"src":"19758:413:26"},{"body":{"nodeType":"YulBlock","src":"20242:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"20288:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20290:77:26"},"nodeType":"YulFunctionCall","src":"20290:79:26"},"nodeType":"YulExpressionStatement","src":"20290:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20263:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"20272:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20259:3:26"},"nodeType":"YulFunctionCall","src":"20259:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"20284:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20255:3:26"},"nodeType":"YulFunctionCall","src":"20255:32:26"},"nodeType":"YulIf","src":"20252:119:26"},{"nodeType":"YulBlock","src":"20381:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"20396:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"20410:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20400:6:26","type":""}]},{"nodeType":"YulAssignment","src":"20425:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20459:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"20470:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20455:3:26"},"nodeType":"YulFunctionCall","src":"20455:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20479:7:26"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"20435:19:26"},"nodeType":"YulFunctionCall","src":"20435:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20425:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20212:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20223:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20235:6:26","type":""}],"src":"20177:327:26"},{"body":{"nodeType":"YulBlock","src":"20575:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20592:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20615:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"20597:17:26"},"nodeType":"YulFunctionCall","src":"20597:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20585:6:26"},"nodeType":"YulFunctionCall","src":"20585:37:26"},"nodeType":"YulExpressionStatement","src":"20585:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20563:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20570:3:26","type":""}],"src":"20510:118:26"},{"body":{"nodeType":"YulBlock","src":"20732:124:26","statements":[{"nodeType":"YulAssignment","src":"20742:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20754:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20765:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20750:3:26"},"nodeType":"YulFunctionCall","src":"20750:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20742:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20822:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20835:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20846:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20831:3:26"},"nodeType":"YulFunctionCall","src":"20831:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"20778:43:26"},"nodeType":"YulFunctionCall","src":"20778:71:26"},"nodeType":"YulExpressionStatement","src":"20778:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20704:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20716:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20727:4:26","type":""}],"src":"20634:222:26"},{"body":{"nodeType":"YulBlock","src":"20927:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20944:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20967:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"20949:17:26"},"nodeType":"YulFunctionCall","src":"20949:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20937:6:26"},"nodeType":"YulFunctionCall","src":"20937:37:26"},"nodeType":"YulExpressionStatement","src":"20937:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20915:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20922:3:26","type":""}],"src":"20862:118:26"},{"body":{"nodeType":"YulBlock","src":"21084:124:26","statements":[{"nodeType":"YulAssignment","src":"21094:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21106:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21117:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21102:3:26"},"nodeType":"YulFunctionCall","src":"21102:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21094:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21174:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21187:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21198:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21183:3:26"},"nodeType":"YulFunctionCall","src":"21183:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21130:43:26"},"nodeType":"YulFunctionCall","src":"21130:71:26"},"nodeType":"YulExpressionStatement","src":"21130:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21056:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21068:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21079:4:26","type":""}],"src":"20986:222:26"},{"body":{"nodeType":"YulBlock","src":"21280:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"21326:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21328:77:26"},"nodeType":"YulFunctionCall","src":"21328:79:26"},"nodeType":"YulExpressionStatement","src":"21328:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21301:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21310:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21297:3:26"},"nodeType":"YulFunctionCall","src":"21297:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"21322:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21293:3:26"},"nodeType":"YulFunctionCall","src":"21293:32:26"},"nodeType":"YulIf","src":"21290:119:26"},{"nodeType":"YulBlock","src":"21419:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"21434:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"21448:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21438:6:26","type":""}]},{"nodeType":"YulAssignment","src":"21463:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21498:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"21509:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21494:3:26"},"nodeType":"YulFunctionCall","src":"21494:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21518:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21473:20:26"},"nodeType":"YulFunctionCall","src":"21473:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21463:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21250:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21261:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21273:6:26","type":""}],"src":"21214:329:26"},{"body":{"nodeType":"YulBlock","src":"21640:288:26","statements":[{"body":{"nodeType":"YulBlock","src":"21686:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21688:77:26"},"nodeType":"YulFunctionCall","src":"21688:79:26"},"nodeType":"YulExpressionStatement","src":"21688:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21661:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21670:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21657:3:26"},"nodeType":"YulFunctionCall","src":"21657:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"21682:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21653:3:26"},"nodeType":"YulFunctionCall","src":"21653:32:26"},"nodeType":"YulIf","src":"21650:119:26"},{"nodeType":"YulBlock","src":"21779:142:26","statements":[{"nodeType":"YulVariableDeclaration","src":"21794:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"21808:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21798:6:26","type":""}]},{"nodeType":"YulAssignment","src":"21823:88:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21883:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"21894:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21879:3:26"},"nodeType":"YulFunctionCall","src":"21879:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21903:7:26"}],"functionName":{"name":"abi_decode_t_struct$_Origin_$515_calldata_ptr","nodeType":"YulIdentifier","src":"21833:45:26"},"nodeType":"YulFunctionCall","src":"21833:78:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21823:6:26"}]}]}]},"name":"abi_decode_tuple_t_struct$_Origin_$515_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21610:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21621:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21633:6:26","type":""}],"src":"21549:379:26"},{"body":{"nodeType":"YulBlock","src":"22058:204:26","statements":[{"nodeType":"YulAssignment","src":"22068:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22080:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22091:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22076:3:26"},"nodeType":"YulFunctionCall","src":"22076:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22068:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22146:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22159:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22170:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22155:3:26"},"nodeType":"YulFunctionCall","src":"22155:17:26"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"22104:41:26"},"nodeType":"YulFunctionCall","src":"22104:69:26"},"nodeType":"YulExpressionStatement","src":"22104:69:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22227:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22240:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22251:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22236:3:26"},"nodeType":"YulFunctionCall","src":"22236:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"22183:43:26"},"nodeType":"YulFunctionCall","src":"22183:72:26"},"nodeType":"YulExpressionStatement","src":"22183:72:26"}]},"name":"abi_encode_tuple_t_uint32_t_bytes32__to_t_uint32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22022:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22034:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22042:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22053:4:26","type":""}],"src":"21934:328:26"},{"body":{"nodeType":"YulBlock","src":"22382:34:26","statements":[{"nodeType":"YulAssignment","src":"22392:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"22407:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22392:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22354:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"22359:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22370:11:26","type":""}],"src":"22268:148:26"},{"body":{"nodeType":"YulBlock","src":"22532:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"22542:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22589:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"22556:32:26"},"nodeType":"YulFunctionCall","src":"22556:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22546:6:26","type":""}]},{"nodeType":"YulAssignment","src":"22604:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22688:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22693:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22611:76:26"},"nodeType":"YulFunctionCall","src":"22611:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22604:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22748:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"22755:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22744:3:26"},"nodeType":"YulFunctionCall","src":"22744:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"22762:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22767:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22709:34:26"},"nodeType":"YulFunctionCall","src":"22709:65:26"},"nodeType":"YulExpressionStatement","src":"22709:65:26"},{"nodeType":"YulAssignment","src":"22783:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22794:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22799:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22790:3:26"},"nodeType":"YulFunctionCall","src":"22790:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22783:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22513:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22520:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22528:3:26","type":""}],"src":"22422:390:26"},{"body":{"nodeType":"YulBlock","src":"22924:45:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22946:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22954:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22942:3:26"},"nodeType":"YulFunctionCall","src":"22942:14:26"},{"hexValue":"2c","kind":"string","nodeType":"YulLiteral","src":"22958:3:26","type":"","value":","}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22935:6:26"},"nodeType":"YulFunctionCall","src":"22935:27:26"},"nodeType":"YulExpressionStatement","src":"22935:27:26"}]},"name":"store_literal_in_memory_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22916:6:26","type":""}],"src":"22818:151:26"},{"body":{"nodeType":"YulBlock","src":"23139:236:26","statements":[{"nodeType":"YulAssignment","src":"23149:91:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23233:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23238:1:26","type":"","value":"1"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23156:76:26"},"nodeType":"YulFunctionCall","src":"23156:84:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23149:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23338:3:26"}],"functionName":{"name":"store_literal_in_memory_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","nodeType":"YulIdentifier","src":"23249:88:26"},"nodeType":"YulFunctionCall","src":"23249:93:26"},"nodeType":"YulExpressionStatement","src":"23249:93:26"},{"nodeType":"YulAssignment","src":"23351:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23362:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23367:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23358:3:26"},"nodeType":"YulFunctionCall","src":"23358:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23351:3:26"}]}]},"name":"abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23127:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23135:3:26","type":""}],"src":"22975:400:26"},{"body":{"nodeType":"YulBlock","src":"23815:693:26","statements":[{"nodeType":"YulAssignment","src":"23826:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23915:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"23924:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23833:81:26"},"nodeType":"YulFunctionCall","src":"23833:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23826:3:26"}]},{"nodeType":"YulAssignment","src":"23938:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24089:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23945:142:26"},"nodeType":"YulFunctionCall","src":"23945:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23938:3:26"}]},{"nodeType":"YulAssignment","src":"24103:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24192:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"24201:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24110:81:26"},"nodeType":"YulFunctionCall","src":"24110:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24103:3:26"}]},{"nodeType":"YulAssignment","src":"24215:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24366:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24222:142:26"},"nodeType":"YulFunctionCall","src":"24222:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24215:3:26"}]},{"nodeType":"YulAssignment","src":"24380:102:26","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24469:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"24478:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24387:81:26"},"nodeType":"YulFunctionCall","src":"24387:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24380:3:26"}]},{"nodeType":"YulAssignment","src":"24492:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"24499:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24492:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23778:3:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23784:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23792:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23800:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23811:3:26","type":""}],"src":"23381:1127:26"},{"body":{"nodeType":"YulBlock","src":"24542:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24559:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24562:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24552:6:26"},"nodeType":"YulFunctionCall","src":"24552:88:26"},"nodeType":"YulExpressionStatement","src":"24552:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24656:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24659:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24649:6:26"},"nodeType":"YulFunctionCall","src":"24649:15:26"},"nodeType":"YulExpressionStatement","src":"24649:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24680:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24683:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24673:6:26"},"nodeType":"YulFunctionCall","src":"24673:15:26"},"nodeType":"YulExpressionStatement","src":"24673:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"24514:180:26"},{"body":{"nodeType":"YulBlock","src":"24751:269:26","statements":[{"nodeType":"YulAssignment","src":"24761:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24775:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"24781:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"24771:3:26"},"nodeType":"YulFunctionCall","src":"24771:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"24761:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"24792:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24822:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"24828:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24818:3:26"},"nodeType":"YulFunctionCall","src":"24818:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"24796:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"24869:51:26","statements":[{"nodeType":"YulAssignment","src":"24883:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24897:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24905:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24893:3:26"},"nodeType":"YulFunctionCall","src":"24893:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"24883:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"24849:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24842:6:26"},"nodeType":"YulFunctionCall","src":"24842:26:26"},"nodeType":"YulIf","src":"24839:81:26"},{"body":{"nodeType":"YulBlock","src":"24972:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"24986:16:26"},"nodeType":"YulFunctionCall","src":"24986:18:26"},"nodeType":"YulExpressionStatement","src":"24986:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"24936:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24959:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24967:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24956:2:26"},"nodeType":"YulFunctionCall","src":"24956:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24933:2:26"},"nodeType":"YulFunctionCall","src":"24933:38:26"},"nodeType":"YulIf","src":"24930:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"24735:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"24744:6:26","type":""}],"src":"24700:320:26"},{"body":{"nodeType":"YulBlock","src":"25079:87:26","statements":[{"nodeType":"YulAssignment","src":"25089:11:26","value":{"name":"ptr","nodeType":"YulIdentifier","src":"25097:3:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25089:4:26"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25117:1:26","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"25120:3:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25110:6:26"},"nodeType":"YulFunctionCall","src":"25110:14:26"},"nodeType":"YulExpressionStatement","src":"25110:14:26"},{"nodeType":"YulAssignment","src":"25133:26:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25151:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25154:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"25141:9:26"},"nodeType":"YulFunctionCall","src":"25141:18:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25133:4:26"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"25066:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"25074:4:26","type":""}],"src":"25026:140:26"},{"body":{"nodeType":"YulBlock","src":"25216:49:26","statements":[{"nodeType":"YulAssignment","src":"25226:33:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25244:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"25251:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25240:3:26"},"nodeType":"YulFunctionCall","src":"25240:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"25256:2:26","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25236:3:26"},"nodeType":"YulFunctionCall","src":"25236:23:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"25226:6:26"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25199:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"25209:6:26","type":""}],"src":"25172:93:26"},{"body":{"nodeType":"YulBlock","src":"25324:54:26","statements":[{"nodeType":"YulAssignment","src":"25334:37:26","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"25359:4:26"},{"name":"value","nodeType":"YulIdentifier","src":"25365:5:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"25355:3:26"},"nodeType":"YulFunctionCall","src":"25355:16:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"25334:8:26"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"25299:4:26","type":""},{"name":"value","nodeType":"YulTypedName","src":"25305:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"25315:8:26","type":""}],"src":"25271:107:26"},{"body":{"nodeType":"YulBlock","src":"25460:317:26","statements":[{"nodeType":"YulVariableDeclaration","src":"25470:35:26","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"25491:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"25503:1:26","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"25487:3:26"},"nodeType":"YulFunctionCall","src":"25487:18:26"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"25474:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25514:109:26","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"25545:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25556:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"25526:18:26"},"nodeType":"YulFunctionCall","src":"25526:97:26"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"25518:4:26","type":""}]},{"nodeType":"YulAssignment","src":"25632:51:26","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"25663:9:26"},{"name":"toInsert","nodeType":"YulIdentifier","src":"25674:8:26"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"25644:18:26"},"nodeType":"YulFunctionCall","src":"25644:39:26"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"25632:8:26"}]},{"nodeType":"YulAssignment","src":"25692:30:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25705:5:26"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"25716:4:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25712:3:26"},"nodeType":"YulFunctionCall","src":"25712:9:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25701:3:26"},"nodeType":"YulFunctionCall","src":"25701:21:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25692:5:26"}]},{"nodeType":"YulAssignment","src":"25731:40:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25744:5:26"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"25755:8:26"},{"name":"mask","nodeType":"YulIdentifier","src":"25765:4:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25751:3:26"},"nodeType":"YulFunctionCall","src":"25751:19:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25741:2:26"},"nodeType":"YulFunctionCall","src":"25741:30:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"25731:6:26"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25421:5:26","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"25428:10:26","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"25440:8:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"25453:6:26","type":""}],"src":"25384:393:26"},{"body":{"nodeType":"YulBlock","src":"25843:82:26","statements":[{"nodeType":"YulAssignment","src":"25853:66:26","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25911:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25893:17:26"},"nodeType":"YulFunctionCall","src":"25893:24:26"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"25884:8:26"},"nodeType":"YulFunctionCall","src":"25884:34:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25866:17:26"},"nodeType":"YulFunctionCall","src":"25866:53:26"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"25853:9:26"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25823:5:26","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"25833:9:26","type":""}],"src":"25783:142:26"},{"body":{"nodeType":"YulBlock","src":"25978:28:26","statements":[{"nodeType":"YulAssignment","src":"25988:12:26","value":{"name":"value","nodeType":"YulIdentifier","src":"25995:5:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25988:3:26"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25964:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25974:3:26","type":""}],"src":"25931:75:26"},{"body":{"nodeType":"YulBlock","src":"26088:193:26","statements":[{"nodeType":"YulVariableDeclaration","src":"26098:63:26","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"26153:7:26"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"26122:30:26"},"nodeType":"YulFunctionCall","src":"26122:39:26"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"26102:16:26","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26177:4:26"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26217:4:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26211:5:26"},"nodeType":"YulFunctionCall","src":"26211:11:26"},{"name":"offset","nodeType":"YulIdentifier","src":"26224:6:26"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"26256:16:26"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"26232:23:26"},"nodeType":"YulFunctionCall","src":"26232:41:26"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"26183:27:26"},"nodeType":"YulFunctionCall","src":"26183:91:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"26170:6:26"},"nodeType":"YulFunctionCall","src":"26170:105:26"},"nodeType":"YulExpressionStatement","src":"26170:105:26"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"26065:4:26","type":""},{"name":"offset","nodeType":"YulTypedName","src":"26071:6:26","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"26079:7:26","type":""}],"src":"26012:269:26"},{"body":{"nodeType":"YulBlock","src":"26336:24:26","statements":[{"nodeType":"YulAssignment","src":"26346:8:26","value":{"kind":"number","nodeType":"YulLiteral","src":"26353:1:26","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26346:3:26"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26332:3:26","type":""}],"src":"26287:73:26"},{"body":{"nodeType":"YulBlock","src":"26419:136:26","statements":[{"nodeType":"YulVariableDeclaration","src":"26429:46:26","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"26443:30:26"},"nodeType":"YulFunctionCall","src":"26443:32:26"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"26433:6:26","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26528:4:26"},{"name":"offset","nodeType":"YulIdentifier","src":"26534:6:26"},{"name":"zero_0","nodeType":"YulIdentifier","src":"26542:6:26"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"26484:43:26"},"nodeType":"YulFunctionCall","src":"26484:65:26"},"nodeType":"YulExpressionStatement","src":"26484:65:26"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"26405:4:26","type":""},{"name":"offset","nodeType":"YulTypedName","src":"26411:6:26","type":""}],"src":"26366:189:26"},{"body":{"nodeType":"YulBlock","src":"26611:136:26","statements":[{"body":{"nodeType":"YulBlock","src":"26678:63:26","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"26722:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"26729:1:26","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"26692:29:26"},"nodeType":"YulFunctionCall","src":"26692:39:26"},"nodeType":"YulExpressionStatement","src":"26692:39:26"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"26631:5:26"},{"name":"end","nodeType":"YulIdentifier","src":"26638:3:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"26628:2:26"},"nodeType":"YulFunctionCall","src":"26628:14:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"26643:26:26","statements":[{"nodeType":"YulAssignment","src":"26645:22:26","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"26658:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"26665:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26654:3:26"},"nodeType":"YulFunctionCall","src":"26654:13:26"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"26645:5:26"}]}]},"pre":{"nodeType":"YulBlock","src":"26625:2:26","statements":[]},"src":"26621:120:26"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"26599:5:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"26606:3:26","type":""}],"src":"26561:186:26"},{"body":{"nodeType":"YulBlock","src":"26831:463:26","statements":[{"body":{"nodeType":"YulBlock","src":"26857:430:26","statements":[{"nodeType":"YulVariableDeclaration","src":"26871:53:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"26918:5:26"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"26887:30:26"},"nodeType":"YulFunctionCall","src":"26887:37:26"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"26875:8:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26937:63:26","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"26960:8:26"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"26988:10:26"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"26970:17:26"},"nodeType":"YulFunctionCall","src":"26970:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26956:3:26"},"nodeType":"YulFunctionCall","src":"26956:44:26"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"26941:11:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"27157:27:26","statements":[{"nodeType":"YulAssignment","src":"27159:23:26","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"27174:8:26"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"27159:11:26"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"27141:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"27153:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27138:2:26"},"nodeType":"YulFunctionCall","src":"27138:18:26"},"nodeType":"YulIf","src":"27135:49:26"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"27226:11:26"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"27243:8:26"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"27271:3:26"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"27253:17:26"},"nodeType":"YulFunctionCall","src":"27253:22:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27239:3:26"},"nodeType":"YulFunctionCall","src":"27239:37:26"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"27197:28:26"},"nodeType":"YulFunctionCall","src":"27197:80:26"},"nodeType":"YulExpressionStatement","src":"27197:80:26"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"26848:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"26853:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26845:2:26"},"nodeType":"YulFunctionCall","src":"26845:11:26"},"nodeType":"YulIf","src":"26842:445:26"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"26807:5:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"26814:3:26","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"26819:10:26","type":""}],"src":"26753:541:26"},{"body":{"nodeType":"YulBlock","src":"27363:54:26","statements":[{"nodeType":"YulAssignment","src":"27373:37:26","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"27398:4:26"},{"name":"value","nodeType":"YulIdentifier","src":"27404:5:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"27394:3:26"},"nodeType":"YulFunctionCall","src":"27394:16:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"27373:8:26"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"27338:4:26","type":""},{"name":"value","nodeType":"YulTypedName","src":"27344:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"27354:8:26","type":""}],"src":"27300:117:26"},{"body":{"nodeType":"YulBlock","src":"27474:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"27484:68:26","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27533:1:26","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"27536:5:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"27529:3:26"},"nodeType":"YulFunctionCall","src":"27529:13:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27548:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27544:3:26"},"nodeType":"YulFunctionCall","src":"27544:6:26"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"27500:28:26"},"nodeType":"YulFunctionCall","src":"27500:51:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27496:3:26"},"nodeType":"YulFunctionCall","src":"27496:56:26"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"27488:4:26","type":""}]},{"nodeType":"YulAssignment","src":"27561:25:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27575:4:26"},{"name":"mask","nodeType":"YulIdentifier","src":"27581:4:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27571:3:26"},"nodeType":"YulFunctionCall","src":"27571:15:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"27561:6:26"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"27451:4:26","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"27457:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"27467:6:26","type":""}],"src":"27423:169:26"},{"body":{"nodeType":"YulBlock","src":"27678:214:26","statements":[{"nodeType":"YulAssignment","src":"27811:37:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27838:4:26"},{"name":"len","nodeType":"YulIdentifier","src":"27844:3:26"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"27819:18:26"},"nodeType":"YulFunctionCall","src":"27819:29:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"27811:4:26"}]},{"nodeType":"YulAssignment","src":"27857:29:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27868:4:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27878:1:26","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"27881:3:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"27874:3:26"},"nodeType":"YulFunctionCall","src":"27874:11:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"27865:2:26"},"nodeType":"YulFunctionCall","src":"27865:21:26"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"27857:4:26"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"27659:4:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"27665:3:26","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"27673:4:26","type":""}],"src":"27597:295:26"},{"body":{"nodeType":"YulBlock","src":"27987:1300:26","statements":[{"nodeType":"YulVariableDeclaration","src":"27998:50:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"28044:3:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"28012:31:26"},"nodeType":"YulFunctionCall","src":"28012:36:26"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"28002:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"28133:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"28135:16:26"},"nodeType":"YulFunctionCall","src":"28135:18:26"},"nodeType":"YulExpressionStatement","src":"28135:18:26"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"28105:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28113:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28102:2:26"},"nodeType":"YulFunctionCall","src":"28102:30:26"},"nodeType":"YulIf","src":"28099:56:26"},{"nodeType":"YulVariableDeclaration","src":"28165:52:26","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"28211:4:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"28205:5:26"},"nodeType":"YulFunctionCall","src":"28205:11:26"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"28179:25:26"},"nodeType":"YulFunctionCall","src":"28179:38:26"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"28169:6:26","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"28309:4:26"},{"name":"oldLen","nodeType":"YulIdentifier","src":"28315:6:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"28323:6:26"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"28264:44:26"},"nodeType":"YulFunctionCall","src":"28264:66:26"},"nodeType":"YulExpressionStatement","src":"28264:66:26"},{"nodeType":"YulVariableDeclaration","src":"28340:18:26","value":{"kind":"number","nodeType":"YulLiteral","src":"28357:1:26","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"28344:9:26","type":""}]},{"nodeType":"YulAssignment","src":"28368:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"28381:4:26","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"28368:9:26"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"28432:610:26","statements":[{"nodeType":"YulVariableDeclaration","src":"28446:37:26","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"28465:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28477:4:26","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"28473:3:26"},"nodeType":"YulFunctionCall","src":"28473:9:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28461:3:26"},"nodeType":"YulFunctionCall","src":"28461:22:26"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"28450:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28497:50:26","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"28542:4:26"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"28511:30:26"},"nodeType":"YulFunctionCall","src":"28511:36:26"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"28501:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"28560:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"28569:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"28564:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"28628:163:26","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"28653:6:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"28671:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"28676:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28667:3:26"},"nodeType":"YulFunctionCall","src":"28667:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28661:5:26"},"nodeType":"YulFunctionCall","src":"28661:26:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"28646:6:26"},"nodeType":"YulFunctionCall","src":"28646:42:26"},"nodeType":"YulExpressionStatement","src":"28646:42:26"},{"nodeType":"YulAssignment","src":"28705:24:26","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"28719:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28727:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28715:3:26"},"nodeType":"YulFunctionCall","src":"28715:14:26"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"28705:6:26"}]},{"nodeType":"YulAssignment","src":"28746:31:26","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"28763:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28774:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28759:3:26"},"nodeType":"YulFunctionCall","src":"28759:18:26"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"28746:9:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"28594:1:26"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"28597:7:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28591:2:26"},"nodeType":"YulFunctionCall","src":"28591:14:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"28606:21:26","statements":[{"nodeType":"YulAssignment","src":"28608:17:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"28617:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"28620:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28613:3:26"},"nodeType":"YulFunctionCall","src":"28613:12:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"28608:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"28587:3:26","statements":[]},"src":"28583:208:26"},{"body":{"nodeType":"YulBlock","src":"28827:156:26","statements":[{"nodeType":"YulVariableDeclaration","src":"28845:43:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"28872:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"28877:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28868:3:26"},"nodeType":"YulFunctionCall","src":"28868:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28862:5:26"},"nodeType":"YulFunctionCall","src":"28862:26:26"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"28849:9:26","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"28912:6:26"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"28939:9:26"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"28954:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28962:4:26","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28950:3:26"},"nodeType":"YulFunctionCall","src":"28950:17:26"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"28920:18:26"},"nodeType":"YulFunctionCall","src":"28920:48:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"28905:6:26"},"nodeType":"YulFunctionCall","src":"28905:64:26"},"nodeType":"YulExpressionStatement","src":"28905:64:26"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"28810:7:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"28819:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"28807:2:26"},"nodeType":"YulFunctionCall","src":"28807:19:26"},"nodeType":"YulIf","src":"28804:179:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"29003:4:26"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"29017:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"29025:1:26","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"29013:3:26"},"nodeType":"YulFunctionCall","src":"29013:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"29029:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29009:3:26"},"nodeType":"YulFunctionCall","src":"29009:22:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"28996:6:26"},"nodeType":"YulFunctionCall","src":"28996:36:26"},"nodeType":"YulExpressionStatement","src":"28996:36:26"}]},"nodeType":"YulCase","src":"28425:617:26","value":{"kind":"number","nodeType":"YulLiteral","src":"28430:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"29059:222:26","statements":[{"nodeType":"YulVariableDeclaration","src":"29073:14:26","value":{"kind":"number","nodeType":"YulLiteral","src":"29086:1:26","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"29077:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"29110:67:26","statements":[{"nodeType":"YulAssignment","src":"29128:35:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"29147:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"29152:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29143:3:26"},"nodeType":"YulFunctionCall","src":"29143:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29137:5:26"},"nodeType":"YulFunctionCall","src":"29137:26:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"29128:5:26"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"29103:6:26"},"nodeType":"YulIf","src":"29100:77:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"29197:4:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29256:5:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"29263:6:26"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"29203:52:26"},"nodeType":"YulFunctionCall","src":"29203:67:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"29190:6:26"},"nodeType":"YulFunctionCall","src":"29190:81:26"},"nodeType":"YulExpressionStatement","src":"29190:81:26"}]},"nodeType":"YulCase","src":"29051:230:26","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"28405:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28413:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28402:2:26"},"nodeType":"YulFunctionCall","src":"28402:14:26"},"nodeType":"YulSwitch","src":"28395:886:26"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"27976:4:26","type":""},{"name":"src","nodeType":"YulTypedName","src":"27982:3:26","type":""}],"src":"27897:1390:26"},{"body":{"nodeType":"YulBlock","src":"29465:357:26","statements":[{"nodeType":"YulAssignment","src":"29475:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29487:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29498:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29483:3:26"},"nodeType":"YulFunctionCall","src":"29483:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29475:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29555:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29568:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29579:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29564:3:26"},"nodeType":"YulFunctionCall","src":"29564:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"29511:43:26"},"nodeType":"YulFunctionCall","src":"29511:71:26"},"nodeType":"YulExpressionStatement","src":"29511:71:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29603:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29614:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29599:3:26"},"nodeType":"YulFunctionCall","src":"29599:18:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29623:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"29629:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29619:3:26"},"nodeType":"YulFunctionCall","src":"29619:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29592:6:26"},"nodeType":"YulFunctionCall","src":"29592:48:26"},"nodeType":"YulExpressionStatement","src":"29592:48:26"},{"nodeType":"YulAssignment","src":"29649:84:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29719:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"29728:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29657:61:26"},"nodeType":"YulFunctionCall","src":"29657:76:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29649:4:26"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29787:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29800:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29811:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29796:3:26"},"nodeType":"YulFunctionCall","src":"29796:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29743:43:26"},"nodeType":"YulFunctionCall","src":"29743:72:26"},"nodeType":"YulExpressionStatement","src":"29743:72:26"}]},"name":"abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29421:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29433:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29441:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29449:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29460:4:26","type":""}],"src":"29293:529:26"},{"body":{"nodeType":"YulBlock","src":"29924:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29941:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"29946:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29934:6:26"},"nodeType":"YulFunctionCall","src":"29934:19:26"},"nodeType":"YulExpressionStatement","src":"29934:19:26"},{"nodeType":"YulAssignment","src":"29962:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29981:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"29986:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29977:3:26"},"nodeType":"YulFunctionCall","src":"29977:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29962:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29896:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"29901:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29912:11:26","type":""}],"src":"29828:169:26"},{"body":{"nodeType":"YulBlock","src":"30109:60:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30131:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"30139:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30127:3:26"},"nodeType":"YulFunctionCall","src":"30127:14:26"},{"hexValue":"496e73756666696369656e7420666565","kind":"string","nodeType":"YulLiteral","src":"30143:18:26","type":"","value":"Insufficient fee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30120:6:26"},"nodeType":"YulFunctionCall","src":"30120:42:26"},"nodeType":"YulExpressionStatement","src":"30120:42:26"}]},"name":"store_literal_in_memory_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30101:6:26","type":""}],"src":"30003:166:26"},{"body":{"nodeType":"YulBlock","src":"30321:220:26","statements":[{"nodeType":"YulAssignment","src":"30331:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30397:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30402:2:26","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30338:58:26"},"nodeType":"YulFunctionCall","src":"30338:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30331:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30503:3:26"}],"functionName":{"name":"store_literal_in_memory_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af","nodeType":"YulIdentifier","src":"30414:88:26"},"nodeType":"YulFunctionCall","src":"30414:93:26"},"nodeType":"YulExpressionStatement","src":"30414:93:26"},{"nodeType":"YulAssignment","src":"30516:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30527:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30532:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30523:3:26"},"nodeType":"YulFunctionCall","src":"30523:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30516:3:26"}]}]},"name":"abi_encode_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30309:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30317:3:26","type":""}],"src":"30175:366:26"},{"body":{"nodeType":"YulBlock","src":"30718:248:26","statements":[{"nodeType":"YulAssignment","src":"30728:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30740:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30751:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30736:3:26"},"nodeType":"YulFunctionCall","src":"30736:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30728:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30775:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30786:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30771:3:26"},"nodeType":"YulFunctionCall","src":"30771:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30794:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"30800:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30790:3:26"},"nodeType":"YulFunctionCall","src":"30790:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30764:6:26"},"nodeType":"YulFunctionCall","src":"30764:47:26"},"nodeType":"YulExpressionStatement","src":"30764:47:26"},{"nodeType":"YulAssignment","src":"30820:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30954:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30828:124:26"},"nodeType":"YulFunctionCall","src":"30828:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30820:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30698:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30713:4:26","type":""}],"src":"30547:419:26"},{"body":{"nodeType":"YulBlock","src":"31085:34:26","statements":[{"nodeType":"YulAssignment","src":"31095:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"31110:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"31095:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31057:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"31062:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"31073:11:26","type":""}],"src":"30972:147:26"},{"body":{"nodeType":"YulBlock","src":"31231:8:26","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31223:6:26","type":""}],"src":"31125:114:26"},{"body":{"nodeType":"YulBlock","src":"31408:235:26","statements":[{"nodeType":"YulAssignment","src":"31418:90:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31501:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"31506:1:26","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31425:75:26"},"nodeType":"YulFunctionCall","src":"31425:83:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31418:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31606:3:26"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"31517:88:26"},"nodeType":"YulFunctionCall","src":"31517:93:26"},"nodeType":"YulExpressionStatement","src":"31517:93:26"},{"nodeType":"YulAssignment","src":"31619:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31630:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"31635:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31626:3:26"},"nodeType":"YulFunctionCall","src":"31626:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31619:3:26"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31396:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31404:3:26","type":""}],"src":"31245:398:26"},{"body":{"nodeType":"YulBlock","src":"31837:191:26","statements":[{"nodeType":"YulAssignment","src":"31848:154:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31998:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"31855:141:26"},"nodeType":"YulFunctionCall","src":"31855:147:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31848:3:26"}]},{"nodeType":"YulAssignment","src":"32012:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"32019:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32012:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31824:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31833:3:26","type":""}],"src":"31649:379:26"},{"body":{"nodeType":"YulBlock","src":"32140:59:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32162:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"32170:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32158:3:26"},"nodeType":"YulFunctionCall","src":"32158:14:26"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"32174:17:26","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32151:6:26"},"nodeType":"YulFunctionCall","src":"32151:41:26"},"nodeType":"YulExpressionStatement","src":"32151:41:26"}]},"name":"store_literal_in_memory_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32132:6:26","type":""}],"src":"32034:165:26"},{"body":{"nodeType":"YulBlock","src":"32351:220:26","statements":[{"nodeType":"YulAssignment","src":"32361:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32427:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32432:2:26","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32368:58:26"},"nodeType":"YulFunctionCall","src":"32368:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32361:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32533:3:26"}],"functionName":{"name":"store_literal_in_memory_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","nodeType":"YulIdentifier","src":"32444:88:26"},"nodeType":"YulFunctionCall","src":"32444:93:26"},"nodeType":"YulExpressionStatement","src":"32444:93:26"},{"nodeType":"YulAssignment","src":"32546:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32557:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32562:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32553:3:26"},"nodeType":"YulFunctionCall","src":"32553:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32546:3:26"}]}]},"name":"abi_encode_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32339:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32347:3:26","type":""}],"src":"32205:366:26"},{"body":{"nodeType":"YulBlock","src":"32748:248:26","statements":[{"nodeType":"YulAssignment","src":"32758:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32770:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32781:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32766:3:26"},"nodeType":"YulFunctionCall","src":"32766:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32758:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32805:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32816:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32801:3:26"},"nodeType":"YulFunctionCall","src":"32801:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32824:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"32830:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32820:3:26"},"nodeType":"YulFunctionCall","src":"32820:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32794:6:26"},"nodeType":"YulFunctionCall","src":"32794:47:26"},"nodeType":"YulExpressionStatement","src":"32794:47:26"},{"nodeType":"YulAssignment","src":"32850:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32984:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32858:124:26"},"nodeType":"YulFunctionCall","src":"32858:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32850:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32728:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32743:4:26","type":""}],"src":"32577:419:26"},{"body":{"nodeType":"YulBlock","src":"33030:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33047:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33050:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33040:6:26"},"nodeType":"YulFunctionCall","src":"33040:88:26"},"nodeType":"YulExpressionStatement","src":"33040:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33144:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33147:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33137:6:26"},"nodeType":"YulFunctionCall","src":"33137:15:26"},"nodeType":"YulExpressionStatement","src":"33137:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33168:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33171:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33161:6:26"},"nodeType":"YulFunctionCall","src":"33161:15:26"},"nodeType":"YulExpressionStatement","src":"33161:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"33002:180:26"},{"body":{"nodeType":"YulBlock","src":"33216:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33233:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33236:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33226:6:26"},"nodeType":"YulFunctionCall","src":"33226:88:26"},"nodeType":"YulExpressionStatement","src":"33226:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33330:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33333:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33323:6:26"},"nodeType":"YulFunctionCall","src":"33323:15:26"},"nodeType":"YulExpressionStatement","src":"33323:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33354:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33357:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33347:6:26"},"nodeType":"YulFunctionCall","src":"33347:15:26"},"nodeType":"YulExpressionStatement","src":"33347:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"33188:180:26"},{"body":{"nodeType":"YulBlock","src":"33417:190:26","statements":[{"nodeType":"YulAssignment","src":"33427:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33454:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33436:17:26"},"nodeType":"YulFunctionCall","src":"33436:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"33427:5:26"}]},{"body":{"nodeType":"YulBlock","src":"33550:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"33552:16:26"},"nodeType":"YulFunctionCall","src":"33552:18:26"},"nodeType":"YulExpressionStatement","src":"33552:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33475:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"33482:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33472:2:26"},"nodeType":"YulFunctionCall","src":"33472:77:26"},"nodeType":"YulIf","src":"33469:103:26"},{"nodeType":"YulAssignment","src":"33581:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33592:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"33599:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33588:3:26"},"nodeType":"YulFunctionCall","src":"33588:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33581:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33403:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33413:3:26","type":""}],"src":"33374:233:26"},{"body":{"nodeType":"YulBlock","src":"33719:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33741:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"33749:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33737:3:26"},"nodeType":"YulFunctionCall","src":"33737:14:26"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"33753:34:26","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33730:6:26"},"nodeType":"YulFunctionCall","src":"33730:58:26"},"nodeType":"YulExpressionStatement","src":"33730:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33809:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"33817:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33805:3:26"},"nodeType":"YulFunctionCall","src":"33805:15:26"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"33822:8:26","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33798:6:26"},"nodeType":"YulFunctionCall","src":"33798:33:26"},"nodeType":"YulExpressionStatement","src":"33798:33:26"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33711:6:26","type":""}],"src":"33613:225:26"},{"body":{"nodeType":"YulBlock","src":"33990:220:26","statements":[{"nodeType":"YulAssignment","src":"34000:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34066:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"34071:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34007:58:26"},"nodeType":"YulFunctionCall","src":"34007:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34000:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34172:3:26"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"34083:88:26"},"nodeType":"YulFunctionCall","src":"34083:93:26"},"nodeType":"YulExpressionStatement","src":"34083:93:26"},{"nodeType":"YulAssignment","src":"34185:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34196:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"34201:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34192:3:26"},"nodeType":"YulFunctionCall","src":"34192:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34185:3:26"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33978:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33986:3:26","type":""}],"src":"33844:366:26"},{"body":{"nodeType":"YulBlock","src":"34387:248:26","statements":[{"nodeType":"YulAssignment","src":"34397:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34409:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"34420:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34405:3:26"},"nodeType":"YulFunctionCall","src":"34405:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34397:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34444:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"34455:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34440:3:26"},"nodeType":"YulFunctionCall","src":"34440:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34463:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"34469:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34459:3:26"},"nodeType":"YulFunctionCall","src":"34459:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34433:6:26"},"nodeType":"YulFunctionCall","src":"34433:47:26"},"nodeType":"YulExpressionStatement","src":"34433:47:26"},{"nodeType":"YulAssignment","src":"34489:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34623:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34497:124:26"},"nodeType":"YulFunctionCall","src":"34497:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34489:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34367:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34382:4:26","type":""}],"src":"34216:419:26"},{"body":{"nodeType":"YulBlock","src":"34685:147:26","statements":[{"nodeType":"YulAssignment","src":"34695:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34718:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34700:17:26"},"nodeType":"YulFunctionCall","src":"34700:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"34695:1:26"}]},{"nodeType":"YulAssignment","src":"34729:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34752:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34734:17:26"},"nodeType":"YulFunctionCall","src":"34734:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"34729:1:26"}]},{"nodeType":"YulAssignment","src":"34763:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34774:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"34777:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34770:3:26"},"nodeType":"YulFunctionCall","src":"34770:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"34763:3:26"}]},{"body":{"nodeType":"YulBlock","src":"34803:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"34805:16:26"},"nodeType":"YulFunctionCall","src":"34805:18:26"},"nodeType":"YulExpressionStatement","src":"34805:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34795:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"34798:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34792:2:26"},"nodeType":"YulFunctionCall","src":"34792:10:26"},"nodeType":"YulIf","src":"34789:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"34672:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"34675:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"34681:3:26","type":""}],"src":"34641:191:26"},{"body":{"nodeType":"YulBlock","src":"34886:362:26","statements":[{"nodeType":"YulAssignment","src":"34896:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34919:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34901:17:26"},"nodeType":"YulFunctionCall","src":"34901:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"34896:1:26"}]},{"nodeType":"YulAssignment","src":"34930:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"34953:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"34935:17:26"},"nodeType":"YulFunctionCall","src":"34935:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"34930:1:26"}]},{"nodeType":"YulVariableDeclaration","src":"34964:28:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"34987:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"34990:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34983:3:26"},"nodeType":"YulFunctionCall","src":"34983:9:26"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"34968:11:26","type":""}]},{"nodeType":"YulAssignment","src":"35001:41:26","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"35030:11:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35012:17:26"},"nodeType":"YulFunctionCall","src":"35012:30:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"35001:7:26"}]},{"body":{"nodeType":"YulBlock","src":"35219:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"35221:16:26"},"nodeType":"YulFunctionCall","src":"35221:18:26"},"nodeType":"YulExpressionStatement","src":"35221:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35152:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35145:6:26"},"nodeType":"YulFunctionCall","src":"35145:9:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35175:1:26"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"35182:7:26"},{"name":"x","nodeType":"YulIdentifier","src":"35191:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"35178:3:26"},"nodeType":"YulFunctionCall","src":"35178:15:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"35172:2:26"},"nodeType":"YulFunctionCall","src":"35172:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"35125:2:26"},"nodeType":"YulFunctionCall","src":"35125:83:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35105:6:26"},"nodeType":"YulFunctionCall","src":"35105:113:26"},"nodeType":"YulIf","src":"35102:139:26"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"34869:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"34872:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"34878:7:26","type":""}],"src":"34838:410:26"},{"body":{"nodeType":"YulBlock","src":"35282:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35299:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35302:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35292:6:26"},"nodeType":"YulFunctionCall","src":"35292:88:26"},"nodeType":"YulExpressionStatement","src":"35292:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35396:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"35399:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35389:6:26"},"nodeType":"YulFunctionCall","src":"35389:15:26"},"nodeType":"YulExpressionStatement","src":"35389:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35420:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"35423:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"35413:6:26"},"nodeType":"YulFunctionCall","src":"35413:15:26"},"nodeType":"YulExpressionStatement","src":"35413:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"35254:180:26"},{"body":{"nodeType":"YulBlock","src":"35482:143:26","statements":[{"nodeType":"YulAssignment","src":"35492:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35515:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35497:17:26"},"nodeType":"YulFunctionCall","src":"35497:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"35492:1:26"}]},{"nodeType":"YulAssignment","src":"35526:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35549:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35531:17:26"},"nodeType":"YulFunctionCall","src":"35531:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"35526:1:26"}]},{"body":{"nodeType":"YulBlock","src":"35573:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"35575:16:26"},"nodeType":"YulFunctionCall","src":"35575:18:26"},"nodeType":"YulExpressionStatement","src":"35575:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35570:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35563:6:26"},"nodeType":"YulFunctionCall","src":"35563:9:26"},"nodeType":"YulIf","src":"35560:35:26"},{"nodeType":"YulAssignment","src":"35605:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35614:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"35617:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"35610:3:26"},"nodeType":"YulFunctionCall","src":"35610:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"35605:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"35471:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"35474:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"35480:1:26","type":""}],"src":"35440:185:26"},{"body":{"nodeType":"YulBlock","src":"35676:149:26","statements":[{"nodeType":"YulAssignment","src":"35686:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35709:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35691:17:26"},"nodeType":"YulFunctionCall","src":"35691:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"35686:1:26"}]},{"nodeType":"YulAssignment","src":"35720:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35743:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35725:17:26"},"nodeType":"YulFunctionCall","src":"35725:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"35720:1:26"}]},{"nodeType":"YulAssignment","src":"35754:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35766:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"35769:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35762:3:26"},"nodeType":"YulFunctionCall","src":"35762:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"35754:4:26"}]},{"body":{"nodeType":"YulBlock","src":"35796:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"35798:16:26"},"nodeType":"YulFunctionCall","src":"35798:18:26"},"nodeType":"YulExpressionStatement","src":"35798:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"35787:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"35793:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35784:2:26"},"nodeType":"YulFunctionCall","src":"35784:11:26"},"nodeType":"YulIf","src":"35781:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"35662:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"35665:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"35671:4:26","type":""}],"src":"35631:194:26"},{"body":{"nodeType":"YulBlock","src":"35865:142:26","statements":[{"nodeType":"YulAssignment","src":"35875:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35898:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35880:17:26"},"nodeType":"YulFunctionCall","src":"35880:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"35875:1:26"}]},{"nodeType":"YulAssignment","src":"35909:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35932:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"35914:17:26"},"nodeType":"YulFunctionCall","src":"35914:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"35909:1:26"}]},{"body":{"nodeType":"YulBlock","src":"35956:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"35958:16:26"},"nodeType":"YulFunctionCall","src":"35958:18:26"},"nodeType":"YulExpressionStatement","src":"35958:18:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"35953:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"35946:6:26"},"nodeType":"YulFunctionCall","src":"35946:9:26"},"nodeType":"YulIf","src":"35943:35:26"},{"nodeType":"YulAssignment","src":"35987:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"35996:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"35999:1:26"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"35992:3:26"},"nodeType":"YulFunctionCall","src":"35992:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"35987:1:26"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"35854:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"35857:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"35863:1:26","type":""}],"src":"35831:176:26"},{"body":{"nodeType":"YulBlock","src":"36057:45:26","statements":[{"nodeType":"YulAssignment","src":"36067:29:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36082:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"36089:6:26","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36078:3:26"},"nodeType":"YulFunctionCall","src":"36078:18:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"36067:7:26"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36039:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"36049:7:26","type":""}],"src":"36013:89:26"},{"body":{"nodeType":"YulBlock","src":"36151:53:26","statements":[{"nodeType":"YulAssignment","src":"36161:36:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36186:3:26","type":"","value":"240"},{"name":"value","nodeType":"YulIdentifier","src":"36191:5:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"36182:3:26"},"nodeType":"YulFunctionCall","src":"36182:15:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"36161:8:26"}]}]},"name":"shift_left_240","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36132:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"36142:8:26","type":""}],"src":"36108:96:26"},{"body":{"nodeType":"YulBlock","src":"36256:48:26","statements":[{"nodeType":"YulAssignment","src":"36266:32:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36292:5:26"}],"functionName":{"name":"shift_left_240","nodeType":"YulIdentifier","src":"36277:14:26"},"nodeType":"YulFunctionCall","src":"36277:21:26"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"36266:7:26"}]}]},"name":"leftAlign_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36238:5:26","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"36248:7:26","type":""}],"src":"36210:94:26"},{"body":{"nodeType":"YulBlock","src":"36391:72:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36408:3:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36449:5:26"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"36432:16:26"},"nodeType":"YulFunctionCall","src":"36432:23:26"}],"functionName":{"name":"leftAlign_t_uint16","nodeType":"YulIdentifier","src":"36413:18:26"},"nodeType":"YulFunctionCall","src":"36413:43:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36401:6:26"},"nodeType":"YulFunctionCall","src":"36401:56:26"},"nodeType":"YulExpressionStatement","src":"36401:56:26"}]},"name":"abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36379:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"36386:3:26","type":""}],"src":"36310:153:26"},{"body":{"nodeType":"YulBlock","src":"36583:137:26","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36654:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"36663:3:26"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"36594:59:26"},"nodeType":"YulFunctionCall","src":"36594:73:26"},"nodeType":"YulExpressionStatement","src":"36594:73:26"},{"nodeType":"YulAssignment","src":"36676:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36687:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"36692:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36683:3:26"},"nodeType":"YulFunctionCall","src":"36683:11:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36676:3:26"}]},{"nodeType":"YulAssignment","src":"36704:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"36711:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36704:3:26"}]}]},"name":"abi_encode_tuple_packed_t_uint16__to_t_uint16__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36562:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36568:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36579:3:26","type":""}],"src":"36469:251:26"},{"body":{"nodeType":"YulBlock","src":"36789:52:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36806:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36828:5:26"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"36811:16:26"},"nodeType":"YulFunctionCall","src":"36811:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36799:6:26"},"nodeType":"YulFunctionCall","src":"36799:36:26"},"nodeType":"YulExpressionStatement","src":"36799:36:26"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36777:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"36784:3:26","type":""}],"src":"36726:115:26"},{"body":{"nodeType":"YulBlock","src":"36943:122:26","statements":[{"nodeType":"YulAssignment","src":"36953:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36965:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"36976:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36961:3:26"},"nodeType":"YulFunctionCall","src":"36961:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36953:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"37031:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37044:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"37055:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37040:3:26"},"nodeType":"YulFunctionCall","src":"37040:17:26"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"36989:41:26"},"nodeType":"YulFunctionCall","src":"36989:69:26"},"nodeType":"YulExpressionStatement","src":"36989:69:26"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36915:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36927:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36938:4:26","type":""}],"src":"36847:218:26"},{"body":{"nodeType":"YulBlock","src":"37124:52:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37141:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37163:5:26"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"37146:16:26"},"nodeType":"YulFunctionCall","src":"37146:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37134:6:26"},"nodeType":"YulFunctionCall","src":"37134:36:26"},"nodeType":"YulExpressionStatement","src":"37134:36:26"}]},"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37112:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37119:3:26","type":""}],"src":"37071:105:26"},{"body":{"nodeType":"YulBlock","src":"37237:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37254:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37277:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"37259:17:26"},"nodeType":"YulFunctionCall","src":"37259:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37247:6:26"},"nodeType":"YulFunctionCall","src":"37247:37:26"},"nodeType":"YulExpressionStatement","src":"37247:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37225:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37232:3:26","type":""}],"src":"37182:108:26"},{"body":{"nodeType":"YulBlock","src":"37345:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37362:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37382:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"37367:14:26"},"nodeType":"YulFunctionCall","src":"37367:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37355:6:26"},"nodeType":"YulFunctionCall","src":"37355:34:26"},"nodeType":"YulExpressionStatement","src":"37355:34:26"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37333:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37340:3:26","type":""}],"src":"37296:99:26"},{"body":{"nodeType":"YulBlock","src":"37595:1083:26","statements":[{"nodeType":"YulVariableDeclaration","src":"37605:26:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37621:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"37626:4:26","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37617:3:26"},"nodeType":"YulFunctionCall","src":"37617:14:26"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"37609:4:26","type":""}]},{"nodeType":"YulBlock","src":"37641:164:26","statements":[{"nodeType":"YulVariableDeclaration","src":"37678:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37708:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"37715:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37704:3:26"},"nodeType":"YulFunctionCall","src":"37704:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37698:5:26"},"nodeType":"YulFunctionCall","src":"37698:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"37682:12:26","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"37766:12:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37784:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"37789:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37780:3:26"},"nodeType":"YulFunctionCall","src":"37780:14:26"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32","nodeType":"YulIdentifier","src":"37734:31:26"},"nodeType":"YulFunctionCall","src":"37734:61:26"},"nodeType":"YulExpressionStatement","src":"37734:61:26"}]},{"nodeType":"YulBlock","src":"37815:168:26","statements":[{"nodeType":"YulVariableDeclaration","src":"37854:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37884:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"37891:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37880:3:26"},"nodeType":"YulFunctionCall","src":"37880:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37874:5:26"},"nodeType":"YulFunctionCall","src":"37874:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"37858:12:26","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"37944:12:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37962:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"37967:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37958:3:26"},"nodeType":"YulFunctionCall","src":"37958:14:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"37910:33:26"},"nodeType":"YulFunctionCall","src":"37910:63:26"},"nodeType":"YulExpressionStatement","src":"37910:63:26"}]},{"nodeType":"YulBlock","src":"37993:236:26","statements":[{"nodeType":"YulVariableDeclaration","src":"38031:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38061:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"38068:4:26","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38057:3:26"},"nodeType":"YulFunctionCall","src":"38057:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38051:5:26"},"nodeType":"YulFunctionCall","src":"38051:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"38035:12:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38099:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"38104:4:26","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38095:3:26"},"nodeType":"YulFunctionCall","src":"38095:14:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38115:4:26"},{"name":"pos","nodeType":"YulIdentifier","src":"38121:3:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38111:3:26"},"nodeType":"YulFunctionCall","src":"38111:14:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38088:6:26"},"nodeType":"YulFunctionCall","src":"38088:38:26"},"nodeType":"YulExpressionStatement","src":"38088:38:26"},{"nodeType":"YulAssignment","src":"38139:79:26","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"38199:12:26"},{"name":"tail","nodeType":"YulIdentifier","src":"38213:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"38147:51:26"},"nodeType":"YulFunctionCall","src":"38147:71:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38139:4:26"}]}]},{"nodeType":"YulBlock","src":"38239:236:26","statements":[{"nodeType":"YulVariableDeclaration","src":"38277:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38307:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"38314:4:26","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38303:3:26"},"nodeType":"YulFunctionCall","src":"38303:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38297:5:26"},"nodeType":"YulFunctionCall","src":"38297:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"38281:12:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38345:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"38350:4:26","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38341:3:26"},"nodeType":"YulFunctionCall","src":"38341:14:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38361:4:26"},{"name":"pos","nodeType":"YulIdentifier","src":"38367:3:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38357:3:26"},"nodeType":"YulFunctionCall","src":"38357:14:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38334:6:26"},"nodeType":"YulFunctionCall","src":"38334:38:26"},"nodeType":"YulExpressionStatement","src":"38334:38:26"},{"nodeType":"YulAssignment","src":"38385:79:26","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"38445:12:26"},{"name":"tail","nodeType":"YulIdentifier","src":"38459:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"38393:51:26"},"nodeType":"YulFunctionCall","src":"38393:71:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38385:4:26"}]}]},{"nodeType":"YulBlock","src":"38485:166:26","statements":[{"nodeType":"YulVariableDeclaration","src":"38528:43:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38558:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"38565:4:26","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38554:3:26"},"nodeType":"YulFunctionCall","src":"38554:16:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38548:5:26"},"nodeType":"YulFunctionCall","src":"38548:23:26"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"38532:12:26","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"38612:12:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38630:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"38635:4:26","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38626:3:26"},"nodeType":"YulFunctionCall","src":"38626:14:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"38584:27:26"},"nodeType":"YulFunctionCall","src":"38584:57:26"},"nodeType":"YulExpressionStatement","src":"38584:57:26"}]},{"nodeType":"YulAssignment","src":"38661:11:26","value":{"name":"tail","nodeType":"YulIdentifier","src":"38668:4:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38661:3:26"}]}]},"name":"abi_encode_t_struct$_MessagingParams_$495_memory_ptr_to_t_struct$_MessagingParams_$495_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37574:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37581:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37590:3:26","type":""}],"src":"37457:1221:26"},{"body":{"nodeType":"YulBlock","src":"38874:321:26","statements":[{"nodeType":"YulAssignment","src":"38884:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38896:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"38907:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38892:3:26"},"nodeType":"YulFunctionCall","src":"38892:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38884:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38931:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"38942:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38927:3:26"},"nodeType":"YulFunctionCall","src":"38927:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38950:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"38956:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38946:3:26"},"nodeType":"YulFunctionCall","src":"38946:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38920:6:26"},"nodeType":"YulFunctionCall","src":"38920:47:26"},"nodeType":"YulExpressionStatement","src":"38920:47:26"},{"nodeType":"YulAssignment","src":"38976:130:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39092:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"39101:4:26"}],"functionName":{"name":"abi_encode_t_struct$_MessagingParams_$495_memory_ptr_to_t_struct$_MessagingParams_$495_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38984:107:26"},"nodeType":"YulFunctionCall","src":"38984:122:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38976:4:26"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"39160:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39173:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"39184:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39169:3:26"},"nodeType":"YulFunctionCall","src":"39169:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"39116:43:26"},"nodeType":"YulFunctionCall","src":"39116:72:26"},"nodeType":"YulExpressionStatement","src":"39116:72:26"}]},"name":"abi_encode_tuple_t_struct$_MessagingParams_$495_memory_ptr_t_address__to_t_struct$_MessagingParams_$495_memory_ptr_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38838:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38850:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38858:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38869:4:26","type":""}],"src":"38684:511:26"},{"body":{"nodeType":"YulBlock","src":"39290:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39307:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"39310:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"39300:6:26"},"nodeType":"YulFunctionCall","src":"39300:12:26"},"nodeType":"YulExpressionStatement","src":"39300:12:26"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"39201:117:26"},{"body":{"nodeType":"YulBlock","src":"39413:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39430:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"39433:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"39423:6:26"},"nodeType":"YulFunctionCall","src":"39423:12:26"},"nodeType":"YulExpressionStatement","src":"39423:12:26"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"39324:117:26"},{"body":{"nodeType":"YulBlock","src":"39510:80:26","statements":[{"nodeType":"YulAssignment","src":"39520:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"39535:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"39529:5:26"},"nodeType":"YulFunctionCall","src":"39529:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"39520:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39578:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"39551:26:26"},"nodeType":"YulFunctionCall","src":"39551:33:26"},"nodeType":"YulExpressionStatement","src":"39551:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"39488:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"39496:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"39504:5:26","type":""}],"src":"39447:143:26"},{"body":{"nodeType":"YulBlock","src":"39718:527:26","statements":[{"body":{"nodeType":"YulBlock","src":"39762:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"39764:77:26"},"nodeType":"YulFunctionCall","src":"39764:79:26"},"nodeType":"YulExpressionStatement","src":"39764:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"39739:3:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"39744:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39735:3:26"},"nodeType":"YulFunctionCall","src":"39735:19:26"},{"kind":"number","nodeType":"YulLiteral","src":"39756:4:26","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"39731:3:26"},"nodeType":"YulFunctionCall","src":"39731:30:26"},"nodeType":"YulIf","src":"39728:117:26"},{"nodeType":"YulAssignment","src":"39854:30:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"39879:4:26","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"39863:15:26"},"nodeType":"YulFunctionCall","src":"39863:21:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"39854:5:26"}]},{"nodeType":"YulBlock","src":"39894:166:26","statements":[{"nodeType":"YulVariableDeclaration","src":"39934:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"39948:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"39938:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39974:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"39981:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39970:3:26"},"nodeType":"YulFunctionCall","src":"39970:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40024:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"40035:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40020:3:26"},"nodeType":"YulFunctionCall","src":"40020:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"40044:3:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"39988:31:26"},"nodeType":"YulFunctionCall","src":"39988:60:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39963:6:26"},"nodeType":"YulFunctionCall","src":"39963:86:26"},"nodeType":"YulExpressionStatement","src":"39963:86:26"}]},{"nodeType":"YulBlock","src":"40070:168:26","statements":[{"nodeType":"YulVariableDeclaration","src":"40111:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"40125:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"40115:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40152:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"40159:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40148:3:26"},"nodeType":"YulFunctionCall","src":"40148:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40202:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"40213:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40198:3:26"},"nodeType":"YulFunctionCall","src":"40198:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"40222:3:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"40166:31:26"},"nodeType":"YulFunctionCall","src":"40166:60:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40141:6:26"},"nodeType":"YulFunctionCall","src":"40141:86:26"},"nodeType":"YulExpressionStatement","src":"40141:86:26"}]}]},"name":"abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39693:9:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"39704:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"39712:5:26","type":""}],"src":"39623:622:26"},{"body":{"nodeType":"YulBlock","src":"40357:303:26","statements":[{"body":{"nodeType":"YulBlock","src":"40403:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"40405:77:26"},"nodeType":"YulFunctionCall","src":"40405:79:26"},"nodeType":"YulExpressionStatement","src":"40405:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"40378:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"40387:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40374:3:26"},"nodeType":"YulFunctionCall","src":"40374:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"40399:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"40370:3:26"},"nodeType":"YulFunctionCall","src":"40370:32:26"},"nodeType":"YulIf","src":"40367:119:26"},{"nodeType":"YulBlock","src":"40496:157:26","statements":[{"nodeType":"YulVariableDeclaration","src":"40511:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"40525:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"40515:6:26","type":""}]},{"nodeType":"YulAssignment","src":"40540:103:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40615:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"40626:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40611:3:26"},"nodeType":"YulFunctionCall","src":"40611:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"40635:7:26"}],"functionName":{"name":"abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"40550:60:26"},"nodeType":"YulFunctionCall","src":"40550:93:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"40540:6:26"}]}]}]},"name":"abi_decode_tuple_t_struct$_MessagingFee_$508_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40327:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"40338:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"40350:6:26","type":""}],"src":"40251:409:26"},{"body":{"nodeType":"YulBlock","src":"40729:80:26","statements":[{"nodeType":"YulAssignment","src":"40739:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"40754:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40748:5:26"},"nodeType":"YulFunctionCall","src":"40748:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"40739:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40797:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"40770:26:26"},"nodeType":"YulFunctionCall","src":"40770:33:26"},"nodeType":"YulExpressionStatement","src":"40770:33:26"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40707:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"40715:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40723:5:26","type":""}],"src":"40666:143:26"},{"body":{"nodeType":"YulBlock","src":"40857:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"40913:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40922:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"40925:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"40915:6:26"},"nodeType":"YulFunctionCall","src":"40915:12:26"},"nodeType":"YulExpressionStatement","src":"40915:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40880:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40904:5:26"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"40887:16:26"},"nodeType":"YulFunctionCall","src":"40887:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"40877:2:26"},"nodeType":"YulFunctionCall","src":"40877:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"40870:6:26"},"nodeType":"YulFunctionCall","src":"40870:42:26"},"nodeType":"YulIf","src":"40867:62:26"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40850:5:26","type":""}],"src":"40815:120:26"},{"body":{"nodeType":"YulBlock","src":"41003:79:26","statements":[{"nodeType":"YulAssignment","src":"41013:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"41028:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"41022:5:26"},"nodeType":"YulFunctionCall","src":"41022:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"41013:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41070:5:26"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"41044:25:26"},"nodeType":"YulFunctionCall","src":"41044:32:26"},"nodeType":"YulExpressionStatement","src":"41044:32:26"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"40981:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"40989:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"40997:5:26","type":""}],"src":"40941:141:26"},{"body":{"nodeType":"YulBlock","src":"41218:716:26","statements":[{"body":{"nodeType":"YulBlock","src":"41262:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"41264:77:26"},"nodeType":"YulFunctionCall","src":"41264:79:26"},"nodeType":"YulExpressionStatement","src":"41264:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"41239:3:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"41244:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41235:3:26"},"nodeType":"YulFunctionCall","src":"41235:19:26"},{"kind":"number","nodeType":"YulLiteral","src":"41256:4:26","type":"","value":"0x80"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"41231:3:26"},"nodeType":"YulFunctionCall","src":"41231:30:26"},"nodeType":"YulIf","src":"41228:117:26"},{"nodeType":"YulAssignment","src":"41354:30:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41379:4:26","type":"","value":"0x60"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"41363:15:26"},"nodeType":"YulFunctionCall","src":"41363:21:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"41354:5:26"}]},{"nodeType":"YulBlock","src":"41394:161:26","statements":[{"nodeType":"YulVariableDeclaration","src":"41429:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"41443:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41433:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41469:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"41476:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41465:3:26"},"nodeType":"YulFunctionCall","src":"41465:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41519:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"41530:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41515:3:26"},"nodeType":"YulFunctionCall","src":"41515:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"41539:3:26"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"41483:31:26"},"nodeType":"YulFunctionCall","src":"41483:60:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41458:6:26"},"nodeType":"YulFunctionCall","src":"41458:86:26"},"nodeType":"YulExpressionStatement","src":"41458:86:26"}]},{"nodeType":"YulBlock","src":"41565:162:26","statements":[{"nodeType":"YulVariableDeclaration","src":"41601:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"41615:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41605:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41642:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"41649:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41638:3:26"},"nodeType":"YulFunctionCall","src":"41638:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41691:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"41702:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41687:3:26"},"nodeType":"YulFunctionCall","src":"41687:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"41711:3:26"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"41656:30:26"},"nodeType":"YulFunctionCall","src":"41656:59:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41631:6:26"},"nodeType":"YulFunctionCall","src":"41631:85:26"},"nodeType":"YulExpressionStatement","src":"41631:85:26"}]},{"nodeType":"YulBlock","src":"41737:190:26","statements":[{"nodeType":"YulVariableDeclaration","src":"41771:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"41785:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"41775:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41812:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"41819:4:26","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41808:3:26"},"nodeType":"YulFunctionCall","src":"41808:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41891:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"41902:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41887:3:26"},"nodeType":"YulFunctionCall","src":"41887:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"41911:3:26"}],"functionName":{"name":"abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"41826:60:26"},"nodeType":"YulFunctionCall","src":"41826:89:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41801:6:26"},"nodeType":"YulFunctionCall","src":"41801:115:26"},"nodeType":"YulExpressionStatement","src":"41801:115:26"}]}]},"name":"abi_decode_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41193:9:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"41204:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"41212:5:26","type":""}],"src":"41119:815:26"},{"body":{"nodeType":"YulBlock","src":"42050:308:26","statements":[{"body":{"nodeType":"YulBlock","src":"42097:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"42099:77:26"},"nodeType":"YulFunctionCall","src":"42099:79:26"},"nodeType":"YulExpressionStatement","src":"42099:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"42071:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"42080:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42067:3:26"},"nodeType":"YulFunctionCall","src":"42067:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"42092:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"42063:3:26"},"nodeType":"YulFunctionCall","src":"42063:33:26"},"nodeType":"YulIf","src":"42060:120:26"},{"nodeType":"YulBlock","src":"42190:161:26","statements":[{"nodeType":"YulVariableDeclaration","src":"42205:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"42219:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"42209:6:26","type":""}]},{"nodeType":"YulAssignment","src":"42234:107:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42313:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"42324:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42309:3:26"},"nodeType":"YulFunctionCall","src":"42309:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"42333:7:26"}],"functionName":{"name":"abi_decode_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"42244:64:26"},"nodeType":"YulFunctionCall","src":"42244:97:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"42234:6:26"}]}]}]},"name":"abi_decode_tuple_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42020:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"42031:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"42043:6:26","type":""}],"src":"41940:418:26"},{"body":{"nodeType":"YulBlock","src":"42470:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"42492:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"42500:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42488:3:26"},"nodeType":"YulFunctionCall","src":"42488:14:26"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"42504:34:26","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42481:6:26"},"nodeType":"YulFunctionCall","src":"42481:58:26"},"nodeType":"YulExpressionStatement","src":"42481:58:26"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"42462:6:26","type":""}],"src":"42364:182:26"},{"body":{"nodeType":"YulBlock","src":"42698:220:26","statements":[{"nodeType":"YulAssignment","src":"42708:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42774:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"42779:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42715:58:26"},"nodeType":"YulFunctionCall","src":"42715:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42708:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42880:3:26"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"42791:88:26"},"nodeType":"YulFunctionCall","src":"42791:93:26"},"nodeType":"YulExpressionStatement","src":"42791:93:26"},{"nodeType":"YulAssignment","src":"42893:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42904:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"42909:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42900:3:26"},"nodeType":"YulFunctionCall","src":"42900:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42893:3:26"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"42686:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42694:3:26","type":""}],"src":"42552:366:26"},{"body":{"nodeType":"YulBlock","src":"43095:248:26","statements":[{"nodeType":"YulAssignment","src":"43105:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43117:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"43128:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43113:3:26"},"nodeType":"YulFunctionCall","src":"43113:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43105:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43152:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"43163:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43148:3:26"},"nodeType":"YulFunctionCall","src":"43148:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43171:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"43177:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43167:3:26"},"nodeType":"YulFunctionCall","src":"43167:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43141:6:26"},"nodeType":"YulFunctionCall","src":"43141:47:26"},"nodeType":"YulExpressionStatement","src":"43141:47:26"},{"nodeType":"YulAssignment","src":"43197:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43331:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43205:124:26"},"nodeType":"YulFunctionCall","src":"43205:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43197:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43075:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43090:4:26","type":""}],"src":"42924:419:26"},{"body":{"nodeType":"YulBlock","src":"43455:64:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43477:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"43485:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43473:3:26"},"nodeType":"YulFunctionCall","src":"43473:14:26"},{"hexValue":"746f55696e7431365f6f75744f66426f756e6473","kind":"string","nodeType":"YulLiteral","src":"43489:22:26","type":"","value":"toUint16_outOfBounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43466:6:26"},"nodeType":"YulFunctionCall","src":"43466:46:26"},"nodeType":"YulExpressionStatement","src":"43466:46:26"}]},"name":"store_literal_in_memory_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43447:6:26","type":""}],"src":"43349:170:26"},{"body":{"nodeType":"YulBlock","src":"43671:220:26","statements":[{"nodeType":"YulAssignment","src":"43681:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43747:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"43752:2:26","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43688:58:26"},"nodeType":"YulFunctionCall","src":"43688:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43681:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43853:3:26"}],"functionName":{"name":"store_literal_in_memory_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab","nodeType":"YulIdentifier","src":"43764:88:26"},"nodeType":"YulFunctionCall","src":"43764:93:26"},"nodeType":"YulExpressionStatement","src":"43764:93:26"},{"nodeType":"YulAssignment","src":"43866:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43877:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"43882:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43873:3:26"},"nodeType":"YulFunctionCall","src":"43873:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43866:3:26"}]}]},"name":"abi_encode_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43659:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43667:3:26","type":""}],"src":"43525:366:26"},{"body":{"nodeType":"YulBlock","src":"44068:248:26","statements":[{"nodeType":"YulAssignment","src":"44078:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44090:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"44101:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44086:3:26"},"nodeType":"YulFunctionCall","src":"44086:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44078:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"44125:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"44136:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44121:3:26"},"nodeType":"YulFunctionCall","src":"44121:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44144:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"44150:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44140:3:26"},"nodeType":"YulFunctionCall","src":"44140:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44114:6:26"},"nodeType":"YulFunctionCall","src":"44114:47:26"},"nodeType":"YulExpressionStatement","src":"44114:47:26"},{"nodeType":"YulAssignment","src":"44170:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"44304:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44178:124:26"},"nodeType":"YulFunctionCall","src":"44178:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"44170:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"44048:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"44063:4:26","type":""}],"src":"43897:419:26"},{"body":{"nodeType":"YulBlock","src":"44367:73:26","statements":[{"nodeType":"YulAssignment","src":"44377:57:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44392:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"44399:34:26","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"44388:3:26"},"nodeType":"YulFunctionCall","src":"44388:46:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"44377:7:26"}]}]},"name":"cleanup_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44349:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44359:7:26","type":""}],"src":"44322:118:26"},{"body":{"nodeType":"YulBlock","src":"44489:53:26","statements":[{"nodeType":"YulAssignment","src":"44499:36:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"44524:3:26","type":"","value":"128"},{"name":"value","nodeType":"YulIdentifier","src":"44529:5:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"44520:3:26"},"nodeType":"YulFunctionCall","src":"44520:15:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"44499:8:26"}]}]},"name":"shift_left_128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44470:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"44480:8:26","type":""}],"src":"44446:96:26"},{"body":{"nodeType":"YulBlock","src":"44595:48:26","statements":[{"nodeType":"YulAssignment","src":"44605:32:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44631:5:26"}],"functionName":{"name":"shift_left_128","nodeType":"YulIdentifier","src":"44616:14:26"},"nodeType":"YulFunctionCall","src":"44616:21:26"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"44605:7:26"}]}]},"name":"leftAlign_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44577:5:26","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"44587:7:26","type":""}],"src":"44548:95:26"},{"body":{"nodeType":"YulBlock","src":"44732:74:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44749:3:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"44792:5:26"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"44774:17:26"},"nodeType":"YulFunctionCall","src":"44774:24:26"}],"functionName":{"name":"leftAlign_t_uint128","nodeType":"YulIdentifier","src":"44754:19:26"},"nodeType":"YulFunctionCall","src":"44754:45:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44742:6:26"},"nodeType":"YulFunctionCall","src":"44742:58:26"},"nodeType":"YulExpressionStatement","src":"44742:58:26"}]},"name":"abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"44720:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"44727:3:26","type":""}],"src":"44649:157:26"},{"body":{"nodeType":"YulBlock","src":"44956:253:26","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"45029:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"45038:3:26"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"44967:61:26"},"nodeType":"YulFunctionCall","src":"44967:75:26"},"nodeType":"YulExpressionStatement","src":"44967:75:26"},{"nodeType":"YulAssignment","src":"45051:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45062:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"45067:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45058:3:26"},"nodeType":"YulFunctionCall","src":"45058:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45051:3:26"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"45142:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"45151:3:26"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"45080:61:26"},"nodeType":"YulFunctionCall","src":"45080:75:26"},"nodeType":"YulExpressionStatement","src":"45080:75:26"},{"nodeType":"YulAssignment","src":"45164:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45175:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"45180:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45171:3:26"},"nodeType":"YulFunctionCall","src":"45171:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45164:3:26"}]},{"nodeType":"YulAssignment","src":"45193:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"45200:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45193:3:26"}]}]},"name":"abi_encode_tuple_packed_t_uint128_t_uint128__to_t_uint128_t_uint128__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44927:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"44933:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"44941:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44952:3:26","type":""}],"src":"44812:397:26"},{"body":{"nodeType":"YulBlock","src":"45331:140:26","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"45404:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"45413:3:26"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"45342:61:26"},"nodeType":"YulFunctionCall","src":"45342:75:26"},"nodeType":"YulExpressionStatement","src":"45342:75:26"},{"nodeType":"YulAssignment","src":"45426:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45437:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"45442:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45433:3:26"},"nodeType":"YulFunctionCall","src":"45433:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45426:3:26"}]},{"nodeType":"YulAssignment","src":"45455:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"45462:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45455:3:26"}]}]},"name":"abi_encode_tuple_packed_t_uint128__to_t_uint128__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45310:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"45316:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45327:3:26","type":""}],"src":"45215:256:26"},{"body":{"nodeType":"YulBlock","src":"45520:150:26","statements":[{"nodeType":"YulAssignment","src":"45530:24:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"45552:1:26"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"45535:16:26"},"nodeType":"YulFunctionCall","src":"45535:19:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"45530:1:26"}]},{"nodeType":"YulAssignment","src":"45563:24:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"45585:1:26"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"45568:16:26"},"nodeType":"YulFunctionCall","src":"45568:19:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"45563:1:26"}]},{"nodeType":"YulAssignment","src":"45596:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"45607:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"45610:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45603:3:26"},"nodeType":"YulFunctionCall","src":"45603:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"45596:3:26"}]},{"body":{"nodeType":"YulBlock","src":"45641:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"45643:16:26"},"nodeType":"YulFunctionCall","src":"45643:18:26"},"nodeType":"YulExpressionStatement","src":"45643:18:26"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"45628:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"45633:6:26","type":"","value":"0xffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"45625:2:26"},"nodeType":"YulFunctionCall","src":"45625:15:26"},"nodeType":"YulIf","src":"45622:41:26"}]},"name":"checked_add_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"45507:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"45510:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"45516:3:26","type":""}],"src":"45477:193:26"},{"body":{"nodeType":"YulBlock","src":"45784:278:26","statements":[{"nodeType":"YulVariableDeclaration","src":"45794:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45840:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"45808:31:26"},"nodeType":"YulFunctionCall","src":"45808:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"45798:6:26","type":""}]},{"nodeType":"YulAssignment","src":"45855:95:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45938:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"45943:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"45862:75:26"},"nodeType":"YulFunctionCall","src":"45862:88:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45855:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"45998:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"46005:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45994:3:26"},"nodeType":"YulFunctionCall","src":"45994:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"46012:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"46017:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"45959:34:26"},"nodeType":"YulFunctionCall","src":"45959:65:26"},"nodeType":"YulExpressionStatement","src":"45959:65:26"},{"nodeType":"YulAssignment","src":"46033:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46044:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"46049:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46040:3:26"},"nodeType":"YulFunctionCall","src":"46040:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46033:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"45765:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"45772:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45780:3:26","type":""}],"src":"45676:386:26"},{"body":{"nodeType":"YulBlock","src":"46111:43:26","statements":[{"nodeType":"YulAssignment","src":"46121:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46136:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"46143:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"46132:3:26"},"nodeType":"YulFunctionCall","src":"46132:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"46121:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"46093:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"46103:7:26","type":""}],"src":"46068:86:26"},{"body":{"nodeType":"YulBlock","src":"46203:53:26","statements":[{"nodeType":"YulAssignment","src":"46213:36:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"46238:3:26","type":"","value":"248"},{"name":"value","nodeType":"YulIdentifier","src":"46243:5:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"46234:3:26"},"nodeType":"YulFunctionCall","src":"46234:15:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"46213:8:26"}]}]},"name":"shift_left_248","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"46184:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"46194:8:26","type":""}],"src":"46160:96:26"},{"body":{"nodeType":"YulBlock","src":"46307:48:26","statements":[{"nodeType":"YulAssignment","src":"46317:32:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46343:5:26"}],"functionName":{"name":"shift_left_248","nodeType":"YulIdentifier","src":"46328:14:26"},"nodeType":"YulFunctionCall","src":"46328:21:26"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"46317:7:26"}]}]},"name":"leftAlign_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"46289:5:26","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"46299:7:26","type":""}],"src":"46262:93:26"},{"body":{"nodeType":"YulBlock","src":"46440:70:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46457:3:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"46496:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"46480:15:26"},"nodeType":"YulFunctionCall","src":"46480:22:26"}],"functionName":{"name":"leftAlign_t_uint8","nodeType":"YulIdentifier","src":"46462:17:26"},"nodeType":"YulFunctionCall","src":"46462:41:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46450:6:26"},"nodeType":"YulFunctionCall","src":"46450:54:26"},"nodeType":"YulExpressionStatement","src":"46450:54:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"46428:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"46435:3:26","type":""}],"src":"46361:149:26"},{"body":{"nodeType":"YulBlock","src":"46770:573:26","statements":[{"nodeType":"YulAssignment","src":"46781:100:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"46868:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"46877:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"46788:79:26"},"nodeType":"YulFunctionCall","src":"46788:93:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46781:3:26"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"46949:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"46958:3:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"46891:57:26"},"nodeType":"YulFunctionCall","src":"46891:71:26"},"nodeType":"YulExpressionStatement","src":"46891:71:26"},{"nodeType":"YulAssignment","src":"46971:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46982:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"46987:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46978:3:26"},"nodeType":"YulFunctionCall","src":"46978:11:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46971:3:26"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"47059:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"47068:3:26"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"46999:59:26"},"nodeType":"YulFunctionCall","src":"46999:73:26"},"nodeType":"YulExpressionStatement","src":"46999:73:26"},{"nodeType":"YulAssignment","src":"47081:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47092:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"47097:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47088:3:26"},"nodeType":"YulFunctionCall","src":"47088:11:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47081:3:26"}]},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"47167:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"47176:3:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"47109:57:26"},"nodeType":"YulFunctionCall","src":"47109:71:26"},"nodeType":"YulExpressionStatement","src":"47109:71:26"},{"nodeType":"YulAssignment","src":"47189:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47200:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"47205:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47196:3:26"},"nodeType":"YulFunctionCall","src":"47196:11:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47189:3:26"}]},{"nodeType":"YulAssignment","src":"47217:100:26","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"47304:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"47313:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"47224:79:26"},"nodeType":"YulFunctionCall","src":"47224:93:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47217:3:26"}]},{"nodeType":"YulAssignment","src":"47327:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"47334:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47327:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46717:3:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"46723:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"46731:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"46739:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"46747:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"46755:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46766:3:26","type":""}],"src":"46516:827:26"},{"body":{"nodeType":"YulBlock","src":"47412:80:26","statements":[{"nodeType":"YulAssignment","src":"47422:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"47437:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"47431:5:26"},"nodeType":"YulFunctionCall","src":"47431:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"47422:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"47480:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"47453:26:26"},"nodeType":"YulFunctionCall","src":"47453:33:26"},"nodeType":"YulExpressionStatement","src":"47453:33:26"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"47390:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"47398:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"47406:5:26","type":""}],"src":"47349:143:26"},{"body":{"nodeType":"YulBlock","src":"47575:274:26","statements":[{"body":{"nodeType":"YulBlock","src":"47621:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"47623:77:26"},"nodeType":"YulFunctionCall","src":"47623:79:26"},"nodeType":"YulExpressionStatement","src":"47623:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"47596:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"47605:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47592:3:26"},"nodeType":"YulFunctionCall","src":"47592:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"47617:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"47588:3:26"},"nodeType":"YulFunctionCall","src":"47588:32:26"},"nodeType":"YulIf","src":"47585:119:26"},{"nodeType":"YulBlock","src":"47714:128:26","statements":[{"nodeType":"YulVariableDeclaration","src":"47729:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"47743:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"47733:6:26","type":""}]},{"nodeType":"YulAssignment","src":"47758:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47804:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"47815:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47800:3:26"},"nodeType":"YulFunctionCall","src":"47800:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"47824:7:26"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"47768:31:26"},"nodeType":"YulFunctionCall","src":"47768:64:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"47758:6:26"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47545:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"47556:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"47568:6:26","type":""}],"src":"47498:351:26"},{"body":{"nodeType":"YulBlock","src":"47961:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47983:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"47991:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47979:3:26"},"nodeType":"YulFunctionCall","src":"47979:14:26"},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031","kind":"string","nodeType":"YulLiteral","src":"47995:34:26","type":"","value":"SafeCast: value doesn't fit in 1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47972:6:26"},"nodeType":"YulFunctionCall","src":"47972:58:26"},"nodeType":"YulExpressionStatement","src":"47972:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48051:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"48059:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48047:3:26"},"nodeType":"YulFunctionCall","src":"48047:15:26"},{"hexValue":"362062697473","kind":"string","nodeType":"YulLiteral","src":"48064:8:26","type":"","value":"6 bits"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48040:6:26"},"nodeType":"YulFunctionCall","src":"48040:33:26"},"nodeType":"YulExpressionStatement","src":"48040:33:26"}]},"name":"store_literal_in_memory_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47953:6:26","type":""}],"src":"47855:225:26"},{"body":{"nodeType":"YulBlock","src":"48232:220:26","statements":[{"nodeType":"YulAssignment","src":"48242:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48308:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"48313:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48249:58:26"},"nodeType":"YulFunctionCall","src":"48249:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48242:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48414:3:26"}],"functionName":{"name":"store_literal_in_memory_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","nodeType":"YulIdentifier","src":"48325:88:26"},"nodeType":"YulFunctionCall","src":"48325:93:26"},"nodeType":"YulExpressionStatement","src":"48325:93:26"},{"nodeType":"YulAssignment","src":"48427:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48438:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"48443:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48434:3:26"},"nodeType":"YulFunctionCall","src":"48434:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"48427:3:26"}]}]},"name":"abi_encode_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48220:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48228:3:26","type":""}],"src":"48086:366:26"},{"body":{"nodeType":"YulBlock","src":"48629:248:26","statements":[{"nodeType":"YulAssignment","src":"48639:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48651:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"48662:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48647:3:26"},"nodeType":"YulFunctionCall","src":"48647:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48639:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48686:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"48697:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48682:3:26"},"nodeType":"YulFunctionCall","src":"48682:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48705:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"48711:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48701:3:26"},"nodeType":"YulFunctionCall","src":"48701:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48675:6:26"},"nodeType":"YulFunctionCall","src":"48675:47:26"},"nodeType":"YulExpressionStatement","src":"48675:47:26"},{"nodeType":"YulAssignment","src":"48731:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48865:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48739:124:26"},"nodeType":"YulFunctionCall","src":"48739:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48731:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48609:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48624:4:26","type":""}],"src":"48458:419:26"},{"body":{"nodeType":"YulBlock","src":"49037:288:26","statements":[{"nodeType":"YulAssignment","src":"49047:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49059:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"49070:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49055:3:26"},"nodeType":"YulFunctionCall","src":"49055:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49047:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"49127:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49140:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"49151:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49136:3:26"},"nodeType":"YulFunctionCall","src":"49136:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"49083:43:26"},"nodeType":"YulFunctionCall","src":"49083:71:26"},"nodeType":"YulExpressionStatement","src":"49083:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"49208:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49221:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"49232:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49217:3:26"},"nodeType":"YulFunctionCall","src":"49217:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"49164:43:26"},"nodeType":"YulFunctionCall","src":"49164:72:26"},"nodeType":"YulExpressionStatement","src":"49164:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"49290:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49303:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"49314:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49299:3:26"},"nodeType":"YulFunctionCall","src":"49299:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"49246:43:26"},"nodeType":"YulFunctionCall","src":"49246:72:26"},"nodeType":"YulExpressionStatement","src":"49246:72:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48993:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"49005:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"49013:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"49021:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49032:4:26","type":""}],"src":"48883:442:26"},{"body":{"nodeType":"YulBlock","src":"49371:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"49425:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"49434:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"49437:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"49427:6:26"},"nodeType":"YulFunctionCall","src":"49427:12:26"},"nodeType":"YulExpressionStatement","src":"49427:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"49394:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"49416:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"49401:14:26"},"nodeType":"YulFunctionCall","src":"49401:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"49391:2:26"},"nodeType":"YulFunctionCall","src":"49391:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"49384:6:26"},"nodeType":"YulFunctionCall","src":"49384:40:26"},"nodeType":"YulIf","src":"49381:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49364:5:26","type":""}],"src":"49331:116:26"},{"body":{"nodeType":"YulBlock","src":"49513:77:26","statements":[{"nodeType":"YulAssignment","src":"49523:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"49538:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"49532:5:26"},"nodeType":"YulFunctionCall","src":"49532:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"49523:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"49578:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"49554:23:26"},"nodeType":"YulFunctionCall","src":"49554:30:26"},"nodeType":"YulExpressionStatement","src":"49554:30:26"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"49491:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"49499:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"49507:5:26","type":""}],"src":"49453:137:26"},{"body":{"nodeType":"YulBlock","src":"49670:271:26","statements":[{"body":{"nodeType":"YulBlock","src":"49716:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"49718:77:26"},"nodeType":"YulFunctionCall","src":"49718:79:26"},"nodeType":"YulExpressionStatement","src":"49718:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"49691:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"49700:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49687:3:26"},"nodeType":"YulFunctionCall","src":"49687:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"49712:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"49683:3:26"},"nodeType":"YulFunctionCall","src":"49683:32:26"},"nodeType":"YulIf","src":"49680:119:26"},{"nodeType":"YulBlock","src":"49809:125:26","statements":[{"nodeType":"YulVariableDeclaration","src":"49824:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"49838:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"49828:6:26","type":""}]},{"nodeType":"YulAssignment","src":"49853:71:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49896:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"49907:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49892:3:26"},"nodeType":"YulFunctionCall","src":"49892:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"49916:7:26"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"49863:28:26"},"nodeType":"YulFunctionCall","src":"49863:61:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"49853:6:26"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49640:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"49651:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"49663:6:26","type":""}],"src":"49596:345:26"},{"body":{"nodeType":"YulBlock","src":"50053:123:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50075:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"50083:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50071:3:26"},"nodeType":"YulFunctionCall","src":"50071:14:26"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"50087:34:26","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50064:6:26"},"nodeType":"YulFunctionCall","src":"50064:58:26"},"nodeType":"YulExpressionStatement","src":"50064:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"50143:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"50151:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50139:3:26"},"nodeType":"YulFunctionCall","src":"50139:15:26"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"50156:12:26","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50132:6:26"},"nodeType":"YulFunctionCall","src":"50132:37:26"},"nodeType":"YulExpressionStatement","src":"50132:37:26"}]},"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"50045:6:26","type":""}],"src":"49947:229:26"},{"body":{"nodeType":"YulBlock","src":"50328:220:26","statements":[{"nodeType":"YulAssignment","src":"50338:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50404:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"50409:2:26","type":"","value":"42"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50345:58:26"},"nodeType":"YulFunctionCall","src":"50345:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"50338:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50510:3:26"}],"functionName":{"name":"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","nodeType":"YulIdentifier","src":"50421:88:26"},"nodeType":"YulFunctionCall","src":"50421:93:26"},"nodeType":"YulExpressionStatement","src":"50421:93:26"},{"nodeType":"YulAssignment","src":"50523:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"50534:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"50539:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50530:3:26"},"nodeType":"YulFunctionCall","src":"50530:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"50523:3:26"}]}]},"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"50316:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"50324:3:26","type":""}],"src":"50182:366:26"},{"body":{"nodeType":"YulBlock","src":"50725:248:26","statements":[{"nodeType":"YulAssignment","src":"50735:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50747:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"50758:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50743:3:26"},"nodeType":"YulFunctionCall","src":"50743:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50735:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50782:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"50793:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50778:3:26"},"nodeType":"YulFunctionCall","src":"50778:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50801:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"50807:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50797:3:26"},"nodeType":"YulFunctionCall","src":"50797:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50771:6:26"},"nodeType":"YulFunctionCall","src":"50771:47:26"},"nodeType":"YulExpressionStatement","src":"50771:47:26"},{"nodeType":"YulAssignment","src":"50827:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50961:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50835:124:26"},"nodeType":"YulFunctionCall","src":"50835:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50827:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50705:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"50720:4:26","type":""}],"src":"50554:419:26"},{"body":{"nodeType":"YulBlock","src":"51085:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51107:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"51115:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51103:3:26"},"nodeType":"YulFunctionCall","src":"51103:14:26"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"51119:34:26","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51096:6:26"},"nodeType":"YulFunctionCall","src":"51096:58:26"},"nodeType":"YulExpressionStatement","src":"51096:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"51175:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"51183:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51171:3:26"},"nodeType":"YulFunctionCall","src":"51171:15:26"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"51188:8:26","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51164:6:26"},"nodeType":"YulFunctionCall","src":"51164:33:26"},"nodeType":"YulExpressionStatement","src":"51164:33:26"}]},"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"51077:6:26","type":""}],"src":"50979:225:26"},{"body":{"nodeType":"YulBlock","src":"51356:220:26","statements":[{"nodeType":"YulAssignment","src":"51366:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51432:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"51437:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51373:58:26"},"nodeType":"YulFunctionCall","src":"51373:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"51366:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51538:3:26"}],"functionName":{"name":"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","nodeType":"YulIdentifier","src":"51449:88:26"},"nodeType":"YulFunctionCall","src":"51449:93:26"},"nodeType":"YulExpressionStatement","src":"51449:93:26"},{"nodeType":"YulAssignment","src":"51551:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"51562:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"51567:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51558:3:26"},"nodeType":"YulFunctionCall","src":"51558:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"51551:3:26"}]}]},"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"51344:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"51352:3:26","type":""}],"src":"51210:366:26"},{"body":{"nodeType":"YulBlock","src":"51753:248:26","statements":[{"nodeType":"YulAssignment","src":"51763:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51775:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"51786:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51771:3:26"},"nodeType":"YulFunctionCall","src":"51771:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51763:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"51810:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"51821:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"51806:3:26"},"nodeType":"YulFunctionCall","src":"51806:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51829:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"51835:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"51825:3:26"},"nodeType":"YulFunctionCall","src":"51825:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"51799:6:26"},"nodeType":"YulFunctionCall","src":"51799:47:26"},"nodeType":"YulExpressionStatement","src":"51799:47:26"},{"nodeType":"YulAssignment","src":"51855:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"51989:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"51863:124:26"},"nodeType":"YulFunctionCall","src":"51863:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"51855:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"51733:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"51748:4:26","type":""}],"src":"51582:419:26"},{"body":{"nodeType":"YulBlock","src":"52141:137:26","statements":[{"nodeType":"YulAssignment","src":"52152:100:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"52239:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"52248:3:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"52159:79:26"},"nodeType":"YulFunctionCall","src":"52159:93:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"52152:3:26"}]},{"nodeType":"YulAssignment","src":"52262:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"52269:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"52262:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"52120:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"52126:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"52137:3:26","type":""}],"src":"52007:271:26"},{"body":{"nodeType":"YulBlock","src":"52390:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"52412:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"52420:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52408:3:26"},"nodeType":"YulFunctionCall","src":"52408:14:26"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"52424:31:26","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"52401:6:26"},"nodeType":"YulFunctionCall","src":"52401:55:26"},"nodeType":"YulExpressionStatement","src":"52401:55:26"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"52382:6:26","type":""}],"src":"52284:179:26"},{"body":{"nodeType":"YulBlock","src":"52615:220:26","statements":[{"nodeType":"YulAssignment","src":"52625:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52691:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"52696:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"52632:58:26"},"nodeType":"YulFunctionCall","src":"52632:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"52625:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52797:3:26"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"52708:88:26"},"nodeType":"YulFunctionCall","src":"52708:93:26"},"nodeType":"YulExpressionStatement","src":"52708:93:26"},{"nodeType":"YulAssignment","src":"52810:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"52821:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"52826:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"52817:3:26"},"nodeType":"YulFunctionCall","src":"52817:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"52810:3:26"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"52603:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"52611:3:26","type":""}],"src":"52469:366:26"},{"body":{"nodeType":"YulBlock","src":"53012:248:26","statements":[{"nodeType":"YulAssignment","src":"53022:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53034:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"53045:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53030:3:26"},"nodeType":"YulFunctionCall","src":"53030:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"53022:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53069:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"53080:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53065:3:26"},"nodeType":"YulFunctionCall","src":"53065:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"53088:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"53094:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"53084:3:26"},"nodeType":"YulFunctionCall","src":"53084:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53058:6:26"},"nodeType":"YulFunctionCall","src":"53058:47:26"},"nodeType":"YulExpressionStatement","src":"53058:47:26"},{"nodeType":"YulAssignment","src":"53114:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"53248:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"53122:124:26"},"nodeType":"YulFunctionCall","src":"53122:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"53114:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"52992:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"53007:4:26","type":""}],"src":"52841:419:26"},{"body":{"nodeType":"YulBlock","src":"53358:285:26","statements":[{"nodeType":"YulVariableDeclaration","src":"53368:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53415:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"53382:32:26"},"nodeType":"YulFunctionCall","src":"53382:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"53372:6:26","type":""}]},{"nodeType":"YulAssignment","src":"53430:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53496:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"53501:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"53437:58:26"},"nodeType":"YulFunctionCall","src":"53437:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"53430:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"53556:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"53563:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53552:3:26"},"nodeType":"YulFunctionCall","src":"53552:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"53570:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"53575:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"53517:34:26"},"nodeType":"YulFunctionCall","src":"53517:65:26"},"nodeType":"YulExpressionStatement","src":"53517:65:26"},{"nodeType":"YulAssignment","src":"53591:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"53602:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"53629:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"53607:21:26"},"nodeType":"YulFunctionCall","src":"53607:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53598:3:26"},"nodeType":"YulFunctionCall","src":"53598:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"53591:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"53339:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"53346:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"53354:3:26","type":""}],"src":"53266:377:26"},{"body":{"nodeType":"YulBlock","src":"53767:195:26","statements":[{"nodeType":"YulAssignment","src":"53777:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53789:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"53800:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53785:3:26"},"nodeType":"YulFunctionCall","src":"53785:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"53777:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"53824:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"53835:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"53820:3:26"},"nodeType":"YulFunctionCall","src":"53820:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"53843:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"53849:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"53839:3:26"},"nodeType":"YulFunctionCall","src":"53839:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"53813:6:26"},"nodeType":"YulFunctionCall","src":"53813:47:26"},"nodeType":"YulExpressionStatement","src":"53813:47:26"},{"nodeType":"YulAssignment","src":"53869:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"53941:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"53950:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"53877:63:26"},"nodeType":"YulFunctionCall","src":"53877:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"53869:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"53739:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"53751:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"53762:4:26","type":""}],"src":"53649:313:26"}]},"contents":"{\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct Origin\n    function abi_decode_t_struct$_Origin_$515_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 96) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes32t_bytes_calldata_ptrt_addresst_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_Origin_$515_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 192))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value5, value6 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint64__to_t_uint64_t_uint64__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_uint32t_bytes32(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct MessagingFee -> struct MessagingFee\n    function abi_encode_t_struct$_MessagingFee_$508_memory_ptr_to_t_struct$_MessagingFee_$508_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // nativeFee\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // lzTokenFee\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_MessagingFee_$508_memory_ptr__to_t_struct$_MessagingFee_$508_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_MessagingFee_$508_memory_ptr_to_t_struct$_MessagingFee_$508_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ILayerZeroEndpointV2_$677_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ILayerZeroEndpointV2_$677_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ILayerZeroEndpointV2_$677_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ILayerZeroEndpointV2_$677__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ILayerZeroEndpointV2_$677_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_struct$_Origin_$515_calldata_ptrt_bytes_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_Origin_$515_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1, value2 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value0, pos)\n    }\n\n    function array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // bytes[] -> bytes[]\n    function abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_bytes_memory_ptr_to_t_bytes_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value0, pos)\n    }\n\n    function array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // string[] -> string[]\n    function abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_string_memory_ptr_to_t_string_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_string_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_string_memory_ptr_$dyn_memory_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_Origin_$515_calldata_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_Origin_$515_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint32_t_bytes32__to_t_uint32_t_bytes32__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb(memPtr) {\n\n        mstore(add(memPtr, 0), \",\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 1)\n        store_literal_in_memory_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb(pos)\n        end := add(pos, 1)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value2, value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src) {\n\n        let newLen := array_length_t_bytes_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient fee\")\n\n    }\n\n    function abi_encode_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7d4281b3c746fd818dd98635f57c54464f30641c177dcb423a4f8d1eb24128af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51(memPtr) {\n\n        mstore(add(memPtr, 0), \"Transfer failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function shift_left_240(value) -> newValue {\n        newValue :=\n\n        shl(240, value)\n\n    }\n\n    function leftAlign_t_uint16(value) -> aligned {\n        aligned := shift_left_240(value)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint16(cleanup_t_uint16(value)))\n    }\n\n    function abi_encode_tuple_packed_t_uint16__to_t_uint16__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 2)\n\n        end := pos\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint32_to_t_uint32(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct MessagingParams -> struct MessagingParams\n    function abi_encode_t_struct$_MessagingParams_$495_memory_ptr_to_t_struct$_MessagingParams_$495_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // dstEid\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint32_to_t_uint32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // receiver\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // message\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // options\n\n            let memberValue0 := mload(add(value, 0x60))\n\n            mstore(add(pos, 0x60), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // payInLzToken\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x80))\n        }\n\n        end := tail\n    }\n\n    function abi_encode_tuple_t_struct$_MessagingParams_$495_memory_ptr_t_address__to_t_struct$_MessagingParams_$495_memory_ptr_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_struct$_MessagingParams_$495_memory_ptr_to_t_struct$_MessagingParams_$495_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // struct MessagingFee\n    function abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // nativeFee\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // lzTokenFee\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_MessagingFee_$508_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    // struct MessagingReceipt\n    function abi_decode_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x80) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x60)\n\n        {\n            // guid\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // nonce\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint64_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // fee\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_struct$_MessagingFee_$508_memory_ptr_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_MessagingReceipt_$503_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab(memPtr) {\n\n        mstore(add(memPtr, 0), \"toUint16_outOfBounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_414233483a71244a4f2700455a9733e71511b5279e381bdd2af6d44b1b09ecab_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function shift_left_128(value) -> newValue {\n        newValue :=\n\n        shl(128, value)\n\n    }\n\n    function leftAlign_t_uint128(value) -> aligned {\n        aligned := shift_left_128(value)\n    }\n\n    function abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint128(cleanup_t_uint128(value)))\n    }\n\n    function abi_encode_tuple_packed_t_uint128_t_uint128__to_t_uint128_t_uint128__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 16)\n\n        abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 16)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_uint128__to_t_uint128__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        abi_encode_t_uint128_to_t_uint128_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 16)\n\n        end := pos\n    }\n\n    function checked_add_t_uint16(x, y) -> sum {\n        x := cleanup_t_uint16(x)\n        y := cleanup_t_uint16(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xffff) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function shift_left_248(value) -> newValue {\n        newValue :=\n\n        shl(248, value)\n\n    }\n\n    function leftAlign_t_uint8(value) -> aligned {\n        aligned := shift_left_248(value)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint8(cleanup_t_uint8(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_uint8_t_uint16_t_uint8_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value4, value3, value2, value1, value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 1)\n\n        abi_encode_t_uint16_to_t_uint16_nonPadded_inplace_fromStack(value2,  pos)\n        pos := add(pos, 2)\n\n        abi_encode_t_uint8_to_t_uint8_nonPadded_inplace_fromStack(value3,  pos)\n        pos := add(pos, 1)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value4,  pos)\n\n        end := pos\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeCast: value doesn't fit in 1\")\n\n        mstore(add(memPtr, 32), \"6 bits\")\n\n    }\n\n    function abi_encode_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1821":[{"length":32,"start":1376},{"length":32,"start":2412},{"length":32,"start":3677},{"length":32,"start":5499},{"length":32,"start":5770},{"length":32,"start":6901},{"length":32,"start":7152}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x135 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x82413EAC GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xBF3F3DE9 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xBF3F3DE9 EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0xCA5EB5E1 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0xEE7D72B4 EQ PUSH2 0x487 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B0 JUMPI DUP1 PUSH4 0xF68016B7 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0xFF7BD03D EQ PUSH2 0x504 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x82413EAC EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x33F JUMPI DUP1 PUSH4 0x9541618C EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xA6451163 EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xBB0B6A53 EQ PUSH2 0x3E4 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0xFD JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x56368126 EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x5E280F11 EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x7954C58F EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x7D25A05E EQ PUSH2 0x2C5 JUMPI PUSH2 0x135 JUMP JUMPDEST DUP1 PUSH4 0x67BD07A EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x13137D65 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x17442B70 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x306FED73 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x3400288B EQ PUSH2 0x1C9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x541 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x201F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x216B JUMP JUMPDEST PUSH2 0x547 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x196 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP3 SWAP2 SWAP1 PUSH2 0x224A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x678 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0x818 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x207 PUSH2 0x82E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0x24B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25B PUSH2 0x96A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x252B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x286 PUSH2 0x98E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x2572 JUMP JUMPDEST PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x2631 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x2429 JUMP JUMPDEST PUSH2 0xA5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x2653 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x329 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x324 SWAP2 SWAP1 PUSH2 0x266E JUMP JUMPDEST PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x336 SWAP2 SWAP1 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x354 PUSH2 0xA9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x361 SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x391 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38C SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xAC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39E SWAP2 SWAP1 PUSH2 0x287B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xBDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x29B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x2A12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x455 SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xE53 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x2A57 JUMP JUMPDEST PUSH2 0xEE9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x2742 JUMP JUMPDEST PUSH2 0xEFB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0xF7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x526 SWAP2 SWAP1 PUSH2 0x2A84 JUMP JUMPDEST PUSH2 0xF84 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x538 SWAP2 SWAP1 PUSH2 0x26FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9CE8 DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D7 JUMPI CALLER PUSH1 0x40 MLOAD PUSH32 0x91AC5E4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CE SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5F7 DUP9 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH2 0xFC5 JUMP JUMPDEST EQ PUSH2 0x651 JUMPI DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x60F SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST DUP8 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x40 MLOAD PUSH32 0xC26BEBCC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x648 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x660 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x103A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x2 SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x683 CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x690 TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP5 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SWAP1 DUP2 PUSH2 0x730 SWAP2 SWAP1 PUSH2 0x2DAB JUMP JUMPDEST POP PUSH32 0x15B1A221748794744CD2960E23AB851C4E6B2B22FBABE81F3404E15EEBF0AF16 CALLER DUP7 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x764 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 PUSH2 0x78E PUSH3 0x30D40 PUSH1 0x0 PUSH2 0x77F PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x14D6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7A1 PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD CALLVALUE LT ISZERO PUSH2 0x7EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E1 SWAP1 PUSH2 0x2F18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x80E PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP CALLER PUSH2 0x1654 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x820 PUSH2 0x1770 JUMP JUMPDEST PUSH2 0x82A DUP3 DUP3 PUSH2 0x17EE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x836 PUSH2 0x1770 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x840 PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x863 SWAP1 PUSH2 0x2F69 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E0 SWAP1 PUSH2 0x2FCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8FF CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x90C TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x925 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP PUSH2 0x95E PUSH2 0x9CE8 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x996 PUSH2 0x1770 JUMP JUMPDEST PUSH2 0x9A0 PUSH1 0x0 PUSH2 0x184F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x9BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 SLOAD PUSH2 0x9DA SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA06 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA53 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA28 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA53 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA36 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xBD4 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xB47 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB73 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBC0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB95 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBC0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBA3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xB28 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xCEE JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xC61 SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC8D SWAP1 PUSH2 0x2BD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCDA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCAF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCDA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCBD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xC42 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD11 JUMPI PUSH2 0xD10 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD44 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xD2F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xD9F JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD66 JUMPI PUSH2 0xD65 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD81 JUMPI PUSH2 0xD80 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0xD97 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD4A JUMP JUMPDEST POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDCE CALLER PUSH2 0x1043 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDDB TIMESTAMP PUSH2 0x134E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP6 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 PUSH2 0xE2C PUSH3 0x30D40 PUSH1 0x0 PUSH2 0xE1D PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x14D6 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE3F PUSH2 0x9CE8 DUP5 DUP5 PUSH1 0x0 PUSH2 0x1571 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE5B PUSH2 0x1770 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCA5EB5E1 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEB4 SWAP2 SWAP1 PUSH2 0x2727 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xEF1 PUSH2 0x1770 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF03 PUSH2 0x1770 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF69 SWAP1 PUSH2 0x3102 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7B DUP2 PUSH2 0x184F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x0 DUP5 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFA2 SWAP2 SWAP1 PUSH2 0x29D6 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 SUB PUSH2 0x1031 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xF6FF4FB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1028 SWAP2 SWAP1 PUSH2 0x201F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH1 0x2A PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10BA JUMPI PUSH2 0x10B9 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10EC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1124 JUMPI PUSH2 0x1123 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1188 JUMPI PUSH2 0x1187 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 JUMPDEST PUSH1 0x14 DUP2 LT ISZERO PUSH2 0x1342 JUMPI DUP3 PUSH1 0x4 DUP6 PUSH1 0xC DUP5 PUSH2 0x11D4 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x11E5 JUMPI PUSH2 0x11E4 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR PUSH1 0xF8 SHR PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1224 JUMPI PUSH2 0x1223 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 PUSH1 0x2 DUP4 PUSH2 0x123D SWAP2 SWAP1 PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x1249 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x125A JUMPI PUSH2 0x1259 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH1 0xF PUSH1 0xF8 SHL DUP6 PUSH1 0xC DUP5 PUSH2 0x129D SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x12AE JUMPI PUSH2 0x12AD PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL AND PUSH1 0xF8 SHR PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x12CA JUMPI PUSH2 0x12C9 PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP3 PUSH1 0x2 DUP4 PUSH2 0x12E3 SWAP2 SWAP1 PUSH2 0x3156 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x12EF SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1300 JUMPI PUSH2 0x12FF PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH2 0x133A SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11BA JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x1395 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x14A9 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x13C7 JUMPI DUP1 DUP1 PUSH2 0x13B0 SWAP1 PUSH2 0x3048 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x31C7 JUMP JUMPDEST SWAP2 POP PUSH2 0x139D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E3 JUMPI PUSH2 0x13E2 PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1415 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x14A2 JUMPI PUSH1 0x1 DUP3 PUSH2 0x142E SWAP2 SWAP1 PUSH2 0x31F8 JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x143D SWAP2 SWAP1 PUSH2 0x322C JUMP JUMPDEST PUSH1 0x30 PUSH2 0x1449 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x145F JUMPI PUSH2 0x145E PUSH2 0x2FEA JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x149B SWAP2 SWAP1 PUSH2 0x31C7 JUMP JUMPDEST SWAP5 POP PUSH2 0x1419 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x32A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x3 PUSH2 0xFFFF AND PUSH2 0x14F3 PUSH1 0x0 DUP4 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFFFF AND EQ PUSH2 0x154C JUMPI PUSH2 0x1510 PUSH1 0x0 DUP3 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A51740D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1543 SWAP2 SWAP1 PUSH2 0x32CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1558 DUP6 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP1 POP PUSH2 0x1566 DUP7 PUSH1 0x1 DUP4 PUSH2 0x19E6 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1579 PUSH2 0x1FB2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDDC28C58 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15D5 DUP10 PUSH2 0xFC5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 ISZERO ISZERO DUP2 MSTORE POP ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x160A SWAP3 SWAP2 SWAP1 PUSH2 0x3390 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1626 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x164A SWAP2 SWAP1 PUSH2 0x342A JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165C PUSH2 0x1FCC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x166B DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x1AA3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x1688 JUMPI PUSH2 0x1687 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1AF1 JUMP JUMPDEST JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2637A450 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP12 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E5 DUP13 PUSH2 0xFC5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP10 PUSH1 0x20 ADD MLOAD GT ISZERO ISZERO DUP2 MSTORE POP DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1721 SWAP3 SWAP2 SWAP1 PUSH2 0x3390 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x173F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1764 SWAP2 SWAP1 PUSH2 0x34FC JUMP JUMPDEST SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1778 PUSH2 0x1C3B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1796 PUSH2 0xA9E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17E3 SWAP1 PUSH2 0x3575 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x238399D427B947898EDB290F5FF0F9109849B1C3BA196A42E35F00C50A54B98B DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1843 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 PUSH2 0x1922 SWAP2 SWAP1 PUSH2 0x3122 JUMP JUMPDEST DUP4 MLOAD LT ISZERO PUSH2 0x1965 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195C SWAP1 PUSH2 0x35E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 DUP6 ADD ADD MLOAD SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19BD JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19A9 SWAP3 SWAP2 SWAP1 PUSH2 0x3653 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x19DE JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19CE SWAP2 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH1 0x3 PUSH2 0xFFFF AND PUSH2 0x1A03 PUSH1 0x0 DUP4 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFFFF AND EQ PUSH2 0x1A5C JUMPI PUSH2 0x1A20 PUSH1 0x0 DUP3 PUSH2 0x1913 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x3A51740D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A53 SWAP2 SWAP1 PUSH2 0x32CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 PUSH1 0x1 DUP1 PUSH2 0x1A6A DUP7 MLOAD PUSH2 0x1C43 JUMP JUMPDEST PUSH2 0x1A74 SWAP2 SWAP1 PUSH2 0x369A JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A8A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3744 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLVALUE EQ PUSH2 0x1AE9 JUMPI CALLVALUE PUSH1 0x40 MLOAD PUSH32 0x9F70412000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AE0 SWAP2 SWAP1 PUSH2 0x2A3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE4FE1D94 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B82 SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x5373352A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C37 CALLER PUSH32 0x0 DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C94 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 AND DUP3 GT ISZERO PUSH2 0x1C8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C83 SWAP1 PUSH2 0x384F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D17 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1CB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x386F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D1D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D7F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DE5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ DUP1 PUSH2 0x1DA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1DA0 SWAP2 SWAP1 PUSH2 0x38D2 JUMP JUMPDEST JUMPDEST PUSH2 0x1DE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DD7 SWAP1 PUSH2 0x3971 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DF4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1DFD JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E39 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1E6B SWAP2 SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1EA8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1EBE DUP8 DUP4 DUP4 DUP8 PUSH2 0x1ECA JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1F2C JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x1F24 JUMPI PUSH2 0x1EE4 DUP6 PUSH2 0x1F3F JUMP JUMPDEST PUSH2 0x1F23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F1A SWAP1 PUSH2 0x3A86 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x1F37 JUMP JUMPDEST PUSH2 0x1F36 DUP4 DUP4 PUSH2 0x1F62 JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1F75 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA9 SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FFA PUSH2 0x1FB2 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2019 DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2034 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2010 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2069 JUMPI PUSH2 0x2068 PUSH2 0x204E JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2085 DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP2 EQ PUSH2 0x2090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20A2 DUP2 PUSH2 0x207C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x20CD JUMPI PUSH2 0x20CC PUSH2 0x20A8 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20EA JUMPI PUSH2 0x20E9 PUSH2 0x20AD JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2106 JUMPI PUSH2 0x2105 PUSH2 0x20B2 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2138 DUP3 PUSH2 0x210D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2148 DUP2 PUSH2 0x212D JUMP JUMPDEST DUP2 EQ PUSH2 0x2153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2165 DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x218A JUMPI PUSH2 0x2189 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2198 DUP11 DUP3 DUP12 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x21A9 DUP11 DUP3 DUP12 ADD PUSH2 0x2093 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21CA JUMPI PUSH2 0x21C9 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x21D6 DUP11 DUP3 DUP12 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0xA0 PUSH2 0x21E9 DUP11 DUP3 DUP12 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x220A JUMPI PUSH2 0x2209 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x2216 DUP11 DUP3 DUP12 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2244 DUP2 PUSH2 0x2227 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x225F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x223B JUMP JUMPDEST PUSH2 0x226C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x223B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x22C1 DUP3 PUSH2 0x2278 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x22E0 JUMPI PUSH2 0x22DF PUSH2 0x2289 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F3 PUSH2 0x203A JUMP JUMPDEST SWAP1 POP PUSH2 0x22FF DUP3 DUP3 PUSH2 0x22B8 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x231F JUMPI PUSH2 0x231E PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH2 0x2328 DUP3 PUSH2 0x2278 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2357 PUSH2 0x2352 DUP5 PUSH2 0x2304 JUMP JUMPDEST PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2373 JUMPI PUSH2 0x2372 PUSH2 0x2273 JUMP JUMPDEST JUMPDEST PUSH2 0x237E DUP5 DUP3 DUP6 PUSH2 0x2335 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x239B JUMPI PUSH2 0x239A PUSH2 0x20A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x23AB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2344 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23CA JUMPI PUSH2 0x23C9 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23E8 JUMPI PUSH2 0x23E7 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x23F4 DUP5 DUP3 DUP6 ADD PUSH2 0x2386 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2406 DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP2 EQ PUSH2 0x2411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2423 DUP2 PUSH2 0x23FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2440 JUMPI PUSH2 0x243F PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x244E DUP6 DUP3 DUP7 ADD PUSH2 0x2414 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x245F DUP6 DUP3 DUP7 ADD PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2498 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x24AB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24C6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2482 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24F1 PUSH2 0x24EC PUSH2 0x24E7 DUP5 PUSH2 0x210D JUMP JUMPDEST PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x210D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2503 DUP3 PUSH2 0x24D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2515 DUP3 PUSH2 0x24F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2525 DUP2 PUSH2 0x250A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2540 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x251C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x254F DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP2 EQ PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x256C DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2589 JUMPI PUSH2 0x2588 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2597 DUP6 DUP3 DUP7 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x25A8 DUP6 DUP3 DUP7 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25EC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2603 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x260D DUP2 DUP6 PUSH2 0x25BD JUMP JUMPDEST SWAP4 POP PUSH2 0x261D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x2626 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x264B DUP2 DUP5 PUSH2 0x25F8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2668 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x223B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2688 JUMPI PUSH2 0x2687 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2696 DUP8 DUP3 DUP9 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B7 JUMPI PUSH2 0x26B6 PUSH2 0x2049 JUMP JUMPDEST JUMPDEST PUSH2 0x26C3 DUP8 DUP3 DUP9 ADD PUSH2 0x20B7 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x80 PUSH2 0x26D6 DUP8 DUP3 DUP9 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26F7 DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2712 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2721 DUP2 PUSH2 0x212D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x273C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2718 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2758 JUMPI PUSH2 0x2757 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP5 DUP3 DUP6 ADD PUSH2 0x2156 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B7 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x27C1 DUP2 DUP6 PUSH2 0x279B JUMP JUMPDEST SWAP4 POP PUSH2 0x27D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x27DA DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27F1 DUP4 DUP4 PUSH2 0x27AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2811 DUP3 PUSH2 0x276F JUMP JUMPDEST PUSH2 0x281B DUP2 DUP6 PUSH2 0x277A JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x282D DUP6 PUSH2 0x278B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2869 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x284A DUP6 DUP3 PUSH2 0x27E5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2855 DUP4 PUSH2 0x27F9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2831 JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2895 DUP2 DUP5 PUSH2 0x2806 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28F0 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x28FA DUP2 DUP6 PUSH2 0x28D4 JUMP JUMPDEST SWAP4 POP PUSH2 0x290A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x2913 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x292A DUP4 DUP4 PUSH2 0x28E5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294A DUP3 PUSH2 0x289D JUMP JUMPDEST PUSH2 0x2954 DUP2 DUP6 PUSH2 0x28A8 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x2966 DUP6 PUSH2 0x28B9 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A2 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x2983 DUP6 DUP3 PUSH2 0x291E JUMP JUMPDEST SWAP5 POP PUSH2 0x298E DUP4 PUSH2 0x2932 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x296A JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29CE DUP2 DUP5 PUSH2 0x293F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29EC JUMPI PUSH2 0x29EB PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29FA DUP5 DUP3 DUP6 ADD PUSH2 0x2414 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A0C DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A27 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A03 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A36 DUP2 PUSH2 0x2469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A51 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A6D JUMPI PUSH2 0x2A6C PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A7B DUP5 DUP3 DUP6 ADD PUSH2 0x255D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A9A JUMPI PUSH2 0x2A99 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AA8 DUP5 DUP3 DUP6 ADD PUSH2 0x2053 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2AC6 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2010 JUMP JUMPDEST PUSH2 0x2AD3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2A03 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF0 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x2AFA DUP2 DUP6 PUSH2 0x2ADA JUMP JUMPDEST SWAP4 POP PUSH2 0x2B0A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x2C00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B4C PUSH1 0x1 DUP4 PUSH2 0x2ADA JUMP JUMPDEST SWAP2 POP PUSH2 0x2B57 DUP3 PUSH2 0x2B16 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B6E DUP3 DUP7 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B79 DUP3 PUSH2 0x2B3F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B85 DUP3 DUP6 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B90 DUP3 PUSH2 0x2B3F JUMP JUMPDEST SWAP2 POP PUSH2 0x2B9C DUP3 DUP5 PUSH2 0x2AE5 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2BF0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2C03 JUMPI PUSH2 0x2C02 PUSH2 0x2BA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x2C6B PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2C2E JUMP JUMPDEST PUSH2 0x2C75 DUP7 DUP4 PUSH2 0x2C2E JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA8 PUSH2 0x2CA3 PUSH2 0x2C9E DUP5 PUSH2 0x2469 JUMP JUMPDEST PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2469 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2CC2 DUP4 PUSH2 0x2C8D JUMP JUMPDEST PUSH2 0x2CD6 PUSH2 0x2CCE DUP3 PUSH2 0x2CAF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2C3B JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CEB PUSH2 0x2CDE JUMP JUMPDEST PUSH2 0x2CF6 DUP2 DUP5 DUP5 PUSH2 0x2CB9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D1A JUMPI PUSH2 0x2D0F PUSH1 0x0 DUP3 PUSH2 0x2CE3 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2CFC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2D5F JUMPI PUSH2 0x2D30 DUP2 PUSH2 0x2C09 JUMP JUMPDEST PUSH2 0x2D39 DUP5 PUSH2 0x2C1E JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2D48 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x2D5C PUSH2 0x2D54 DUP6 PUSH2 0x2C1E JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2CFB JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D82 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x2D64 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9B DUP4 DUP4 PUSH2 0x2D71 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DB4 DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DCD JUMPI PUSH2 0x2DCC PUSH2 0x2289 JUMP JUMPDEST JUMPDEST PUSH2 0x2DD7 DUP3 SLOAD PUSH2 0x2BD8 JUMP JUMPDEST PUSH2 0x2DE2 DUP3 DUP3 DUP6 PUSH2 0x2D1E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2E15 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2E03 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2E0D DUP6 DUP3 PUSH2 0x2D8F JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2E75 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2E23 DUP7 PUSH2 0x2C09 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2E4B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2E26 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2E68 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x2E64 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x2D71 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2E92 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2718 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EA4 DUP2 DUP6 PUSH2 0x25F8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2EB3 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742066656500000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F02 PUSH1 0x10 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x2F0D DUP3 PUSH2 0x2ECC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F31 DUP2 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F53 PUSH1 0x0 DUP4 PUSH2 0x2F38 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F5E DUP3 PUSH2 0x2F43 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F74 DUP3 PUSH2 0x2F46 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB4 PUSH1 0xF DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x2FBF DUP3 PUSH2 0x2F7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FE3 DUP2 PUSH2 0x2FA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3053 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3085 JUMPI PUSH2 0x3084 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30EC PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x30F7 DUP3 PUSH2 0x3090 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x311B DUP2 PUSH2 0x30DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x312D DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3138 DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3150 JUMPI PUSH2 0x314F PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3161 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x316C DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x317A DUP2 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x3191 JUMPI PUSH2 0x3190 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x31D2 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x31DD DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x31ED JUMPI PUSH2 0x31EC PUSH2 0x3198 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3203 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x320E DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3226 JUMPI PUSH2 0x3225 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3237 DUP3 PUSH2 0x2469 JUMP JUMPDEST SWAP2 POP PUSH2 0x3242 DUP4 PUSH2 0x2469 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3252 JUMPI PUSH2 0x3251 PUSH2 0x3198 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF0 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3283 DUP3 PUSH2 0x326B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329B PUSH2 0x3296 DUP3 PUSH2 0x325D JUMP JUMPDEST PUSH2 0x3278 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32AD DUP3 DUP5 PUSH2 0x328A JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32C5 DUP2 PUSH2 0x325D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x32EF DUP2 PUSH2 0x2000 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x32FE DUP2 PUSH2 0x2072 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x330D DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD PUSH2 0x332B PUSH1 0x0 DUP7 ADD DUP3 PUSH2 0x32E6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x333E PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x32F5 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x3356 DUP3 DUP3 PUSH2 0x27AC JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x3370 DUP3 DUP3 PUSH2 0x27AC JUMP JUMPDEST SWAP2 POP POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x3385 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x3304 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33AA DUP2 DUP6 PUSH2 0x3313 JUMP JUMPDEST SWAP1 POP PUSH2 0x33B9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2718 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x33D4 DUP2 PUSH2 0x2546 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33F0 JUMPI PUSH2 0x33EF PUSH2 0x33C0 JUMP JUMPDEST JUMPDEST PUSH2 0x33FA PUSH1 0x40 PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x340A DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x341E DUP5 DUP3 DUP6 ADD PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3440 JUMPI PUSH2 0x343F PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x344E DUP5 DUP3 DUP6 ADD PUSH2 0x33DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3466 DUP2 PUSH2 0x207C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3475 DUP2 PUSH2 0x2227 JUMP JUMPDEST DUP2 EQ PUSH2 0x3480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3492 DUP2 PUSH2 0x346C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x34AE JUMPI PUSH2 0x34AD PUSH2 0x33C0 JUMP JUMPDEST JUMPDEST PUSH2 0x34B8 PUSH1 0x60 PUSH2 0x22E9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x34C8 DUP5 DUP3 DUP6 ADD PUSH2 0x3457 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x34DC DUP5 DUP3 DUP6 ADD PUSH2 0x3483 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x34F0 DUP5 DUP3 DUP6 ADD PUSH2 0x33DA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3512 JUMPI PUSH2 0x3511 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3520 DUP5 DUP3 DUP6 ADD PUSH2 0x3498 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x355F PUSH1 0x20 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x356A DUP3 PUSH2 0x3529 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x358E DUP2 PUSH2 0x3552 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x746F55696E7431365F6F75744F66426F756E6473000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35CB PUSH1 0x14 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x35D6 DUP3 PUSH2 0x3595 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35FA DUP2 PUSH2 0x35BE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x80 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3635 DUP3 PUSH2 0x361D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x364D PUSH2 0x3648 DUP3 PUSH2 0x3601 JUMP JUMPDEST PUSH2 0x362A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x365F DUP3 DUP6 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP PUSH2 0x366F DUP3 DUP5 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368B DUP3 DUP5 PUSH2 0x363C JUMP JUMPDEST PUSH1 0x10 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A5 DUP3 PUSH2 0x325D JUMP JUMPDEST SWAP2 POP PUSH2 0x36B0 DUP4 PUSH2 0x325D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH2 0xFFFF DUP2 GT ISZERO PUSH2 0x36CA JUMPI PUSH2 0x36C9 PUSH2 0x3019 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DB DUP3 PUSH2 0x25B2 JUMP JUMPDEST PUSH2 0x36E5 DUP2 DUP6 PUSH2 0x2F38 JUMP JUMPDEST SWAP4 POP PUSH2 0x36F5 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3726 DUP3 PUSH2 0x370E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x373E PUSH2 0x3739 DUP3 PUSH2 0x3701 JUMP JUMPDEST PUSH2 0x371B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3750 DUP3 DUP9 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x375C DUP3 DUP8 PUSH2 0x372D JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x376C DUP3 DUP7 PUSH2 0x328A JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP2 POP PUSH2 0x377C DUP3 DUP6 PUSH2 0x372D JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x378C DUP3 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x37AA DUP2 PUSH2 0x213F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C6 JUMPI PUSH2 0x37C5 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37D4 DUP5 DUP3 DUP6 ADD PUSH2 0x379B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2031 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3620626974730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3839 PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3844 DUP3 PUSH2 0x37DD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3868 DUP2 PUSH2 0x382C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3884 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2718 JUMP JUMPDEST PUSH2 0x3891 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2718 JUMP JUMPDEST PUSH2 0x389E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A2D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x38AF DUP2 PUSH2 0x26E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x38BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38CC DUP2 PUSH2 0x38A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38E8 JUMPI PUSH2 0x38E7 PUSH2 0x2044 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38F6 DUP5 DUP3 DUP6 ADD PUSH2 0x38BD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395B PUSH1 0x2A DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3966 DUP3 PUSH2 0x38FF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x398A DUP2 PUSH2 0x394E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39ED PUSH1 0x26 DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x39F8 DUP3 PUSH2 0x3991 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A1C DUP2 PUSH2 0x39E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A2F DUP3 DUP5 PUSH2 0x36D0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A70 PUSH1 0x1D DUP4 PUSH2 0x2EBB JUMP JUMPDEST SWAP2 POP PUSH2 0x3A7B DUP3 PUSH2 0x3A3A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A9F DUP2 PUSH2 0x3A63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB1 DUP3 PUSH2 0x28C9 JUMP JUMPDEST PUSH2 0x3ABB DUP2 DUP6 PUSH2 0x2EBB JUMP JUMPDEST SWAP4 POP PUSH2 0x3ACB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x25CE JUMP JUMPDEST PUSH2 0x3AD4 DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AF9 DUP2 DUP5 PUSH2 0x3AA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP 0xB6 JUMP XOR PUSH3 0x16A5E3 DIV 0xA5 0xE8 0xE DUP14 0xCE PUSH8 0x1A9F4BD0CAB26FAA 0xD 0x2E 0xC0 PUSH6 0x435915C96C64 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"388:7613:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;513:46;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4368:708:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1287:235:10;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1163:1515:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1724:108:11;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7829:169:24;;;;;;;;;;;;;:::i;:::-;;5328:674;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;446:46:11;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1824:101:17;;;;;;;;;;;;;:::i;:::-;;737:56:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3507:128:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2013:216;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:17;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4338:148:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4699:439;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;569:48:11;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6190:823:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3252:105:11;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7650:98:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2074:198:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;643:32:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2771:149:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;513:46:24;554:5;513:46;:::o;4368:708:12:-;4694:10;4673:31;;4681:8;4673:31;;;4669:68;;4726:10;4713:24;;;;;;;;;;;:::i;:::-;;;;;;;;4669:68;4873:7;:14;;;4837:32;4854:7;:14;;;;;;;;;;:::i;:::-;4837:16;:32::i;:::-;:50;4833:103;;4905:7;:14;;;;;;;;;;:::i;:::-;4921:7;:14;;;4896:40;;;;;;;;;;;;:::i;:::-;;;;;;;;4833:103;5010:59;5021:7;5030:5;5037:8;;5047:9;5058:10;;5010;:59::i;:::-;4368:708;;;;;;;:::o;1287:235:10:-;1414:20;1436:22;843:1:13;678::12;1474:41:10;;;;1287:235;;:::o;1163:1515:24:-;1371:27;1401;1417:10;1401:15;:27::i;:::-;1371:57;;1439:26;1468:32;1484:15;1468;:32::i;:::-;1439:61;;1511:21;1573:13;1607:14;1642:12;1542:123;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1511:155;;1735:20;1764:7;1735:37;;1833:21;:33;1855:10;1833:33;;;;;;;;;;;;;;;1878:14;1833:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1935:66;1950:10;1968:14;1985:15;1935:66;;;;;;;;:::i;:::-;;;;;;;;2072:20;2095:65;2150:6;2158:1;2095:27;:25;:27::i;:::-;:54;;:65;;;;;:::i;:::-;2072:88;;2233:23;2259:48;554:5;2283:7;2292;2301:5;2259:6;:48::i;:::-;2233:74;;2339:3;:13;;;2326:9;:26;;2318:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;2394:276;554:5;2483:7;2528;2573:26;;;;;;;;2586:9;2573:26;;;;2597:1;2573:26;;;2629:10;2394:7;:276::i;:::-;;1231:1447;;;;;;1163:1515;:::o;1724:108:11:-;1094:13:17;:11;:13::i;:::-;1804:21:11::1;1813:4;1819:5;1804:8;:21::i;:::-;1724:108:::0;;:::o;7829:169:24:-;1094:13:17;:11;:13::i;:::-;7880:12:24::1;7898:7;:5;:7::i;:::-;:12;;7918:21;7898:46;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7879:65;;;7963:7;7955:35;;;;;;;;;;;;:::i;:::-;;;;;;;;;7868:130;7829:169::o:0;5328:674::-;5403:23;;:::i;:::-;5503:27;5533;5549:10;5533:15;:27::i;:::-;5503:57;;5571:26;5600:32;5616:15;5600;:32::i;:::-;5571:61;;5643:21;5705:13;5739:14;5774:12;5674:123;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5643:155;;5819:20;5848:7;5819:37;;5867:20;5890:9;;;;;;;;;;;;5867:32;;5946:48;554:5;5970:7;5979;5988:5;5946:6;:48::i;:::-;5939:55;;;;;;;5328:674;;;:::o;446:46:11:-;;;:::o;1824:101:17:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;737:56:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3507:128:12:-;3596:12;3507:128;;;;:::o;2013:216::-;2175:4;2217;2198:24;;:7;:24;;;2191:31;;2013:216;;;;;;:::o;1201:85:17:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;4338:148:24:-;4410:14;4444:21;:34;4466:11;4444:34;;;;;;;;;;;;;;;4437:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4338:148;;;:::o;4699:439::-;4780:15;4808:29;4840:21;:34;4862:11;4840:34;;;;;;;;;;;;;;;4808:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4885:28;4929:14;:21;4916:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4885:66;;4977:6;4972:119;4993:14;:21;4989:1;:25;4972:119;;;5061:14;5076:1;5061:17;;;;;;;;:::i;:::-;;;;;;;;5036:12;5049:1;5036:15;;;;;;;;:::i;:::-;;;;;;;:43;;;;5016:3;;;;;:::i;:::-;;;;4972:119;;;;5118:12;5111:19;;;;4699:439;;;:::o;569:48:11:-;;;;;;;;;;;;;;;;;:::o;6190:823:24:-;6269:7;6343:27;6373;6389:10;6373:15;:27::i;:::-;6343:57;;6411:26;6440:32;6456:15;6440;:32::i;:::-;6411:61;;6483:21;6545:13;6579:14;6614:12;6514:123;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6483:155;;6659:20;6688:7;6659:37;;6791:20;6814:65;6869:6;6877:1;6814:27;:25;:27::i;:::-;:54;;:65;;;;;:::i;:::-;6791:88;;6900:23;6926:48;554:5;6950:7;6959;6968:5;6926:6;:48::i;:::-;6900:74;;6992:3;:13;;;6985:20;;;;;;;;6190:823;;;:::o;3252:105:11:-;1094:13:17;:11;:13::i;:::-;3319:8:11::1;:20;;;3340:9;3319:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3252:105:::0;:::o;7650:98:24:-;1094:13:17;:11;:13::i;:::-;7731:9:24::1;7720:8;:20;;;;7650:98:::0;:::o;2074:198:17:-;1094:13;:11;:13::i;:::-;2182:1:::1;2162:22;;:8;:22;;::::0;2154:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;643:32:24:-;;;;:::o;2771:149:12:-;2853:4;2900:6;:13;;;2876:5;:20;2882:6;:13;;;;;;;;;;:::i;:::-;2876:20;;;;;;;;;;;;;;;;:37;2869:44;;2771:149;;;:::o;2718:196:11:-;2788:7;2807:12;2822:5;:11;2828:4;2822:11;;;;;;;;;;;;;;;;2807:26;;2863:1;2855:10;;2847:4;:18;2843:43;;2881:4;2874:12;;;;;;;;;;;:::i;:::-;;;;;;;;2843:43;2903:4;2896:11;;;2718:196;;;:::o;7208:321:24:-;;;;;;;;:::o;2849:537::-;2912:13;2938;2978:5;2962:23;;2954:32;;2938:48;;2997:21;:42;;;;;;;;;;;;;;;;;;;3060:16;3089:2;3079:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3060:32;;3103:12;:3;3107:1;3103:6;;;;;;;;:::i;:::-;;;;;:12;;;;;;;;;;;3126;:3;3130:1;3126:6;;;;;;;;:::i;:::-;;;;;:12;;;;;;;;;;;3164:9;3159:181;3183:2;3179:1;:6;3159:181;;;3224:8;3256:1;3239:5;3249:2;3245:1;:6;;;;:::i;:::-;3239:13;;;;;;;:::i;:::-;;;;;:18;;;;;3233:25;;3224:35;;;;;;;;;;:::i;:::-;;;;;;;;;;3207:3;3219:1;3215;:5;;;;:::i;:::-;3211:1;:9;;;;:::i;:::-;3207:14;;;;;;;;:::i;:::-;;;;;:52;;;;;;;;;;;3291:8;3322:4;3306:20;;:5;3316:2;3312:1;:6;;;;:::i;:::-;3306:13;;;;;;;:::i;:::-;;;;;:20;3300:27;;3291:37;;;;;;;;;;:::i;:::-;;;;;;;;;;3274:3;3286:1;3282;:5;;;;:::i;:::-;3278:1;:9;;;;:::i;:::-;3274:14;;;;;;;;:::i;:::-;;;;;:54;;;;;;;;;;;3187:3;;;;;:::i;:::-;;;;3159:181;;;;3374:3;3360:18;;;;;2849:537;;;:::o;3557:585::-;3621:13;3661:1;3651:6;:11;3647:54;;3679:10;;;;;;;;;;;;;;;;;;;;;3647:54;3721:12;3736:6;3721:21;;3753:14;3788:78;3803:1;3795:4;:9;3788:78;;3821:8;;;;;:::i;:::-;;;;3852:2;3844:10;;;;;:::i;:::-;;;3788:78;;;3886:19;3918:6;3908:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3886:39;;3936:157;3953:1;3943:6;:11;3936:157;;3981:1;3971:11;;;;;:::i;:::-;;;4049:2;4040:6;:11;;;;:::i;:::-;4027:2;:25;;;;:::i;:::-;4014:40;;3997:6;4004;3997:14;;;;;;;;:::i;:::-;;;;;:57;;;;;;;;;;;4079:2;4069:12;;;;;:::i;:::-;;;3936:157;;;4127:6;4113:21;;;;;3557:585;;;;:::o;1303:107:16:-;1348:12;817:1;1379:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;1372:31;;1303:107;:::o;2101:357::-;2263:12;2244:8;817:1;1068:30;;:20;1086:1;1068:8;:17;;:20;;;;:::i;:::-;:30;;;1064:82;;1125:20;1143:1;1125:8;:17;;:20;;;;:::i;:::-;1107:39;;;;;;;;;;;:::i;:::-;;;;;;;;1064:82;2287:19:::1;2309:51;2347:4;2353:6;2309:37;:51::i;:::-;2287:73;;2377:74;2395:8;294:1:9;2444:6:16;2377:17;:74::i;:::-;2370:81;;;2101:357:::0;;;;;;:::o;2038:391:13:-;2205:23;;:::i;:::-;2259:8;:14;;;2291:86;;;;;;;;2307:7;2291:86;;;;;;2316:25;2333:7;2316:16;:25::i;:::-;2291:86;;;;2343:8;2291:86;;;;2353:8;2291:86;;;;2363:13;2291:86;;;;;2403:4;2259:163;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2240:182;;2038:391;;;;;;:::o;3188:766::-;3389:31;;:::i;:::-;3554:20;3577:26;3588:4;:14;;;3577:10;:26::i;:::-;3554:49;;3635:1;3617:4;:15;;;:19;3613:53;;;3638:28;3650:4;:15;;;3638:11;:28::i;:::-;3613:53;3755:8;:13;;;3777:12;3809:92;;;;;;;;3825:7;3809:92;;;;;;3834:25;3851:7;3834:16;:25::i;:::-;3809:92;;;;3861:8;3809:92;;;;3871:8;3809:92;;;;3899:1;3881:4;:15;;;:19;3809:92;;;;;3919:14;3755:192;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3677:270;;;3188:766;;;;;;;:::o;1359:130:17:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2286:134:11:-;2373:5;2359;:11;2365:4;2359:11;;;;;;;;;;;;;;;:19;;;;2393:20;2401:4;2407:5;2393:20;;;;;;;:::i;:::-;;;;;;;;2286:134;;:::o;2426:187:17:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;13100:305:25:-;13178:6;13230:1;13221:6;:10;;;;:::i;:::-;13204:6;:13;:27;;13196:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;13266:15;13355:6;13349:3;13341:6;13337:16;13333:29;13327:36;13315:48;;13390:8;13383:15;;;13100:305;;;;:::o;2968:191:9:-;3052:12;3093:1;3083:6;:11;;;:69;;3139:4;3145:6;3122:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3083:69;;;3114:4;3097:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;3083:69;3076:76;;2968:191;;;;:::o;5725:435:16:-;5889:12;5870:8;817:1;1068:30;;:20;1086:1;1068:8;:17;;:20;;;;:::i;:::-;:30;;;1064:82;;1125:20;1143:1;1125:8;:17;;:20;;;;:::i;:::-;1107:39;;;;;;;;;;;:::i;:::-;;;;;;;;1064:82;5966:8:::1;238:1:9;6063::16::0;6035:25:::1;:7;:14;:23;:25::i;:::-;:29;;;;:::i;:::-;6103:11;6132:7;5932:221;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5913:240;;5725:435:::0;;;;;;:::o;4650:191:13:-;4716:17;4762:10;4749:9;:23;4745:62;;4797:9;4781:26;;;;;;;;;;;:::i;:::-;;;;;;;;4745:62;4824:10;4817:17;;4650:191;;;:::o;5218:410::-;5371:15;5389:8;:16;;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5371:36;;5440:1;5421:21;;:7;:21;;;5417:54;;5451:20;;;;;;;;;;;;;;5417:54;5545:76;5578:10;5598:8;5609:11;5552:7;5545:32;;;;:76;;;;;;:::i;:::-;5277:351;5218:410;:::o;655:96:22:-;708:7;734:10;727:17;;655:96;:::o;16288:187:23:-;16344:6;16379:16;16370:25;;:5;:25;;16362:76;;;;;;;;;;;;:::i;:::-;;;;;;;;;16462:5;16448:20;;16288:187;;;:::o;1355:203:20:-;1455:96;1475:5;1505:27;;;1534:4;1540:2;1544:5;1482:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:19;:96::i;:::-;1355:203;;;;:::o;5196:642::-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5749:1;5728:10;:17;:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5728:56;5720:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5266:572;5196:642;;:::o;4108:223:21:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;;4108:223;;;;;:::o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;;;;5165:446;;;;;;:::o;7671:628::-;7851:12;7879:7;7875:418;;;7927:1;7906:10;:17;:22;7902:286;;8121:18;8132:6;8121:10;:18::i;:::-;8113:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7902:286;8208:10;8201:17;;;;7875:418;8249:33;8257:10;8269:12;8249:7;:33::i;:::-;7671:628;;;;;;;:::o;1412:320::-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;8821:540::-;9000:1;8980:10;:17;:21;8976:379;;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;7:93:26:-;43:7;83:10;76:5;72:22;61:33;;7:93;;;:::o;106:115::-;191:23;208:5;191:23;:::i;:::-;186:3;179:36;106:115;;:::o;227:218::-;318:4;356:2;345:9;341:18;333:26;;369:69;435:1;424:9;420:17;411:6;369:69;:::i;:::-;227:218;;;;:::o;451:75::-;484:6;517:2;511:9;501:19;;451:75;:::o;532:117::-;641:1;638;631:12;655:117;764:1;761;754:12;778:117;887:1;884;877:12;922:229;993:5;1034:2;1025:6;1020:3;1016:16;1012:25;1009:112;;;1040:79;;:::i;:::-;1009:112;1139:6;1130:15;;922:229;;;;:::o;1157:77::-;1194:7;1223:5;1212:16;;1157:77;;;:::o;1240:122::-;1313:24;1331:5;1313:24;:::i;:::-;1306:5;1303:35;1293:63;;1352:1;1349;1342:12;1293:63;1240:122;:::o;1368:139::-;1414:5;1452:6;1439:20;1430:29;;1468:33;1495:5;1468:33;:::i;:::-;1368:139;;;;:::o;1513:117::-;1622:1;1619;1612:12;1636:117;1745:1;1742;1735:12;1759:117;1868:1;1865;1858:12;1895:552;1952:8;1962:6;2012:3;2005:4;1997:6;1993:17;1989:27;1979:122;;2020:79;;:::i;:::-;1979:122;2133:6;2120:20;2110:30;;2163:18;2155:6;2152:30;2149:117;;;2185:79;;:::i;:::-;2149:117;2299:4;2291:6;2287:17;2275:29;;2353:3;2345:4;2337:6;2333:17;2323:8;2319:32;2316:41;2313:128;;;2360:79;;:::i;:::-;2313:128;1895:552;;;;;:::o;2453:126::-;2490:7;2530:42;2523:5;2519:54;2508:65;;2453:126;;;:::o;2585:96::-;2622:7;2651:24;2669:5;2651:24;:::i;:::-;2640:35;;2585:96;;;:::o;2687:122::-;2760:24;2778:5;2760:24;:::i;:::-;2753:5;2750:35;2740:63;;2799:1;2796;2789:12;2740:63;2687:122;:::o;2815:139::-;2861:5;2899:6;2886:20;2877:29;;2915:33;2942:5;2915:33;:::i;:::-;2815:139;;;;:::o;2960:1359::-;3102:6;3110;3118;3126;3134;3142;3150;3199:3;3187:9;3178:7;3174:23;3170:33;3167:120;;;3206:79;;:::i;:::-;3167:120;3326:1;3351:78;3421:7;3412:6;3401:9;3397:22;3351:78;:::i;:::-;3341:88;;3297:142;3478:2;3504:53;3549:7;3540:6;3529:9;3525:22;3504:53;:::i;:::-;3494:63;;3449:118;3634:3;3623:9;3619:19;3606:33;3666:18;3658:6;3655:30;3652:117;;;3688:79;;:::i;:::-;3652:117;3801:64;3857:7;3848:6;3837:9;3833:22;3801:64;:::i;:::-;3783:82;;;;3577:298;3914:3;3941:53;3986:7;3977:6;3966:9;3962:22;3941:53;:::i;:::-;3931:63;;3885:119;4071:3;4060:9;4056:19;4043:33;4103:18;4095:6;4092:30;4089:117;;;4125:79;;:::i;:::-;4089:117;4238:64;4294:7;4285:6;4274:9;4270:22;4238:64;:::i;:::-;4220:82;;;;4014:298;2960:1359;;;;;;;;;;:::o;4325:101::-;4361:7;4401:18;4394:5;4390:30;4379:41;;4325:101;;;:::o;4432:115::-;4517:23;4534:5;4517:23;:::i;:::-;4512:3;4505:36;4432:115;;:::o;4553:324::-;4670:4;4708:2;4697:9;4693:18;4685:26;;4721:69;4787:1;4776:9;4772:17;4763:6;4721:69;:::i;:::-;4800:70;4866:2;4855:9;4851:18;4842:6;4800:70;:::i;:::-;4553:324;;;;;:::o;4883:117::-;4992:1;4989;4982:12;5006:102;5047:6;5098:2;5094:7;5089:2;5082:5;5078:14;5074:28;5064:38;;5006:102;;;:::o;5114:180::-;5162:77;5159:1;5152:88;5259:4;5256:1;5249:15;5283:4;5280:1;5273:15;5300:281;5383:27;5405:4;5383:27;:::i;:::-;5375:6;5371:40;5513:6;5501:10;5498:22;5477:18;5465:10;5462:34;5459:62;5456:88;;;5524:18;;:::i;:::-;5456:88;5564:10;5560:2;5553:22;5343:238;5300:281;;:::o;5587:129::-;5621:6;5648:20;;:::i;:::-;5638:30;;5677:33;5705:4;5697:6;5677:33;:::i;:::-;5587:129;;;:::o;5722:308::-;5784:4;5874:18;5866:6;5863:30;5860:56;;;5896:18;;:::i;:::-;5860:56;5934:29;5956:6;5934:29;:::i;:::-;5926:37;;6018:4;6012;6008:15;6000:23;;5722:308;;;:::o;6036:146::-;6133:6;6128:3;6123;6110:30;6174:1;6165:6;6160:3;6156:16;6149:27;6036:146;;;:::o;6188:425::-;6266:5;6291:66;6307:49;6349:6;6307:49;:::i;:::-;6291:66;:::i;:::-;6282:75;;6380:6;6373:5;6366:21;6418:4;6411:5;6407:16;6456:3;6447:6;6442:3;6438:16;6435:25;6432:112;;;6463:79;;:::i;:::-;6432:112;6553:54;6600:6;6595:3;6590;6553:54;:::i;:::-;6272:341;6188:425;;;;;:::o;6633:340::-;6689:5;6738:3;6731:4;6723:6;6719:17;6715:27;6705:122;;6746:79;;:::i;:::-;6705:122;6863:6;6850:20;6888:79;6963:3;6955:6;6948:4;6940:6;6936:17;6888:79;:::i;:::-;6879:88;;6695:278;6633:340;;;;:::o;6979:509::-;7048:6;7097:2;7085:9;7076:7;7072:23;7068:32;7065:119;;;7103:79;;:::i;:::-;7065:119;7251:1;7240:9;7236:17;7223:31;7281:18;7273:6;7270:30;7267:117;;;7303:79;;:::i;:::-;7267:117;7408:63;7463:7;7454:6;7443:9;7439:22;7408:63;:::i;:::-;7398:73;;7194:287;6979:509;;;;:::o;7494:120::-;7566:23;7583:5;7566:23;:::i;:::-;7559:5;7556:34;7546:62;;7604:1;7601;7594:12;7546:62;7494:120;:::o;7620:137::-;7665:5;7703:6;7690:20;7681:29;;7719:32;7745:5;7719:32;:::i;:::-;7620:137;;;;:::o;7763:472::-;7830:6;7838;7887:2;7875:9;7866:7;7862:23;7858:32;7855:119;;;7893:79;;:::i;:::-;7855:119;8013:1;8038:52;8082:7;8073:6;8062:9;8058:22;8038:52;:::i;:::-;8028:62;;7984:116;8139:2;8165:53;8210:7;8201:6;8190:9;8186:22;8165:53;:::i;:::-;8155:63;;8110:118;7763:472;;;;;:::o;8241:77::-;8278:7;8307:5;8296:16;;8241:77;;;:::o;8324:108::-;8401:24;8419:5;8401:24;:::i;:::-;8396:3;8389:37;8324:108;;:::o;8488:526::-;8643:4;8638:3;8634:14;8735:4;8728:5;8724:16;8718:23;8754:63;8811:4;8806:3;8802:14;8788:12;8754:63;:::i;:::-;8658:169;8915:4;8908:5;8904:16;8898:23;8934:63;8991:4;8986:3;8982:14;8968:12;8934:63;:::i;:::-;8837:170;8612:402;8488:526;;:::o;9020:338::-;9171:4;9209:2;9198:9;9194:18;9186:26;;9222:129;9348:1;9337:9;9333:17;9324:6;9222:129;:::i;:::-;9020:338;;;;:::o;9364:60::-;9392:3;9413:5;9406:12;;9364:60;;;:::o;9430:142::-;9480:9;9513:53;9531:34;9540:24;9558:5;9540:24;:::i;:::-;9531:34;:::i;:::-;9513:53;:::i;:::-;9500:66;;9430:142;;;:::o;9578:126::-;9628:9;9661:37;9692:5;9661:37;:::i;:::-;9648:50;;9578:126;;;:::o;9710:154::-;9788:9;9821:37;9852:5;9821:37;:::i;:::-;9808:50;;9710:154;;;:::o;9870:187::-;9985:65;10044:5;9985:65;:::i;:::-;9980:3;9973:78;9870:187;;:::o;10063:278::-;10184:4;10222:2;10211:9;10207:18;10199:26;;10235:99;10331:1;10320:9;10316:17;10307:6;10235:99;:::i;:::-;10063:278;;;;:::o;10347:122::-;10420:24;10438:5;10420:24;:::i;:::-;10413:5;10410:35;10400:63;;10459:1;10456;10449:12;10400:63;10347:122;:::o;10475:139::-;10521:5;10559:6;10546:20;10537:29;;10575:33;10602:5;10575:33;:::i;:::-;10475:139;;;;:::o;10620:474::-;10688:6;10696;10745:2;10733:9;10724:7;10720:23;10716:32;10713:119;;;10751:79;;:::i;:::-;10713:119;10871:1;10896:53;10941:7;10932:6;10921:9;10917:22;10896:53;:::i;:::-;10886:63;;10842:117;10998:2;11024:53;11069:7;11060:6;11049:9;11045:22;11024:53;:::i;:::-;11014:63;;10969:118;10620:474;;;;;:::o;11100:98::-;11151:6;11185:5;11179:12;11169:22;;11100:98;;;:::o;11204:168::-;11287:11;11321:6;11316:3;11309:19;11361:4;11356:3;11352:14;11337:29;;11204:168;;;;:::o;11378:246::-;11459:1;11469:113;11483:6;11480:1;11477:13;11469:113;;;11568:1;11563:3;11559:11;11553:18;11549:1;11544:3;11540:11;11533:39;11505:2;11502:1;11498:10;11493:15;;11469:113;;;11616:1;11607:6;11602:3;11598:16;11591:27;11440:184;11378:246;;;:::o;11630:373::-;11716:3;11744:38;11776:5;11744:38;:::i;:::-;11798:70;11861:6;11856:3;11798:70;:::i;:::-;11791:77;;11877:65;11935:6;11930:3;11923:4;11916:5;11912:16;11877:65;:::i;:::-;11967:29;11989:6;11967:29;:::i;:::-;11962:3;11958:39;11951:46;;11720:283;11630:373;;;;:::o;12009:309::-;12120:4;12158:2;12147:9;12143:18;12135:26;;12207:9;12201:4;12197:20;12193:1;12182:9;12178:17;12171:47;12235:76;12306:4;12297:6;12235:76;:::i;:::-;12227:84;;12009:309;;;;:::o;12324:218::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12466:69;12532:1;12521:9;12517:17;12508:6;12466:69;:::i;:::-;12324:218;;;;:::o;12548:869::-;12661:6;12669;12677;12685;12734:3;12722:9;12713:7;12709:23;12705:33;12702:120;;;12741:79;;:::i;:::-;12702:120;12861:1;12886:78;12956:7;12947:6;12936:9;12932:22;12886:78;:::i;:::-;12876:88;;12832:142;13041:2;13030:9;13026:18;13013:32;13072:18;13064:6;13061:30;13058:117;;;13094:79;;:::i;:::-;13058:117;13207:64;13263:7;13254:6;13243:9;13239:22;13207:64;:::i;:::-;13189:82;;;;12984:297;13320:3;13347:53;13392:7;13383:6;13372:9;13368:22;13347:53;:::i;:::-;13337:63;;13291:119;12548:869;;;;;;;:::o;13423:90::-;13457:7;13500:5;13493:13;13486:21;13475:32;;13423:90;;;:::o;13519:109::-;13600:21;13615:5;13600:21;:::i;:::-;13595:3;13588:34;13519:109;;:::o;13634:210::-;13721:4;13759:2;13748:9;13744:18;13736:26;;13772:65;13834:1;13823:9;13819:17;13810:6;13772:65;:::i;:::-;13634:210;;;;:::o;13850:118::-;13937:24;13955:5;13937:24;:::i;:::-;13932:3;13925:37;13850:118;;:::o;13974:222::-;14067:4;14105:2;14094:9;14090:18;14082:26;;14118:71;14186:1;14175:9;14171:17;14162:6;14118:71;:::i;:::-;13974:222;;;;:::o;14202:329::-;14261:6;14310:2;14298:9;14289:7;14285:23;14281:32;14278:119;;;14316:79;;:::i;:::-;14278:119;14436:1;14461:53;14506:7;14497:6;14486:9;14482:22;14461:53;:::i;:::-;14451:63;;14407:117;14202:329;;;;:::o;14537:123::-;14613:6;14647:5;14641:12;14631:22;;14537:123;;;:::o;14666:193::-;14774:11;14808:6;14803:3;14796:19;14848:4;14843:3;14839:14;14824:29;;14666:193;;;;:::o;14865:141::-;14941:4;14964:3;14956:11;;14994:4;14989:3;14985:14;14977:22;;14865:141;;;:::o;15012:158::-;15085:11;15119:6;15114:3;15107:19;15159:4;15154:3;15150:14;15135:29;;15012:158;;;;:::o;15176:353::-;15252:3;15280:38;15312:5;15280:38;:::i;:::-;15334:60;15387:6;15382:3;15334:60;:::i;:::-;15327:67;;15403:65;15461:6;15456:3;15449:4;15442:5;15438:16;15403:65;:::i;:::-;15493:29;15515:6;15493:29;:::i;:::-;15488:3;15484:39;15477:46;;15256:273;15176:353;;;;:::o;15535:192::-;15622:10;15657:64;15717:3;15709:6;15657:64;:::i;:::-;15643:78;;15535:192;;;;:::o;15733:122::-;15812:4;15844;15839:3;15835:14;15827:22;;15733:122;;;:::o;15887:983::-;16024:3;16053:63;16110:5;16053:63;:::i;:::-;16132:95;16220:6;16215:3;16132:95;:::i;:::-;16125:102;;16253:3;16298:4;16290:6;16286:17;16281:3;16277:27;16328:65;16387:5;16328:65;:::i;:::-;16416:7;16447:1;16432:393;16457:6;16454:1;16451:13;16432:393;;;16528:9;16522:4;16518:20;16513:3;16506:33;16579:6;16573:13;16607:82;16684:4;16669:13;16607:82;:::i;:::-;16599:90;;16712:69;16774:6;16712:69;:::i;:::-;16702:79;;16810:4;16805:3;16801:14;16794:21;;16492:333;16479:1;16476;16472:9;16467:14;;16432:393;;;16436:14;16841:4;16834:11;;16861:3;16854:10;;16029:841;;;;;15887:983;;;;:::o;16876:409::-;17037:4;17075:2;17064:9;17060:18;17052:26;;17124:9;17118:4;17114:20;17110:1;17099:9;17095:17;17088:47;17152:126;17273:4;17264:6;17152:126;:::i;:::-;17144:134;;16876:409;;;;:::o;17291:124::-;17368:6;17402:5;17396:12;17386:22;;17291:124;;;:::o;17421:194::-;17530:11;17564:6;17559:3;17552:19;17604:4;17599:3;17595:14;17580:29;;17421:194;;;;:::o;17621:142::-;17698:4;17721:3;17713:11;;17751:4;17746:3;17742:14;17734:22;;17621:142;;;:::o;17769:99::-;17821:6;17855:5;17849:12;17839:22;;17769:99;;;:::o;17874:159::-;17948:11;17982:6;17977:3;17970:19;18022:4;18017:3;18013:14;17998:29;;17874:159;;;;:::o;18039:357::-;18117:3;18145:39;18178:5;18145:39;:::i;:::-;18200:61;18254:6;18249:3;18200:61;:::i;:::-;18193:68;;18270:65;18328:6;18323:3;18316:4;18309:5;18305:16;18270:65;:::i;:::-;18360:29;18382:6;18360:29;:::i;:::-;18355:3;18351:39;18344:46;;18121:275;18039:357;;;;:::o;18402:196::-;18491:10;18526:66;18588:3;18580:6;18526:66;:::i;:::-;18512:80;;18402:196;;;;:::o;18604:123::-;18684:4;18716;18711:3;18707:14;18699:22;;18604:123;;;:::o;18761:991::-;18900:3;18929:64;18987:5;18929:64;:::i;:::-;19009:96;19098:6;19093:3;19009:96;:::i;:::-;19002:103;;19131:3;19176:4;19168:6;19164:17;19159:3;19155:27;19206:66;19266:5;19206:66;:::i;:::-;19295:7;19326:1;19311:396;19336:6;19333:1;19330:13;19311:396;;;19407:9;19401:4;19397:20;19392:3;19385:33;19458:6;19452:13;19486:84;19565:4;19550:13;19486:84;:::i;:::-;19478:92;;19593:70;19656:6;19593:70;:::i;:::-;19583:80;;19692:4;19687:3;19683:14;19676:21;;19371:336;19358:1;19355;19351:9;19346:14;;19311:396;;;19315:14;19723:4;19716:11;;19743:3;19736:10;;18905:847;;;;;18761:991;;;;:::o;19758:413::-;19921:4;19959:2;19948:9;19944:18;19936:26;;20008:9;20002:4;19998:20;19994:1;19983:9;19979:17;19972:47;20036:128;20159:4;20150:6;20036:128;:::i;:::-;20028:136;;19758:413;;;;:::o;20177:327::-;20235:6;20284:2;20272:9;20263:7;20259:23;20255:32;20252:119;;;20290:79;;:::i;:::-;20252:119;20410:1;20435:52;20479:7;20470:6;20459:9;20455:22;20435:52;:::i;:::-;20425:62;;20381:116;20177:327;;;;:::o;20510:118::-;20597:24;20615:5;20597:24;:::i;:::-;20592:3;20585:37;20510:118;;:::o;20634:222::-;20727:4;20765:2;20754:9;20750:18;20742:26;;20778:71;20846:1;20835:9;20831:17;20822:6;20778:71;:::i;:::-;20634:222;;;;:::o;20862:118::-;20949:24;20967:5;20949:24;:::i;:::-;20944:3;20937:37;20862:118;;:::o;20986:222::-;21079:4;21117:2;21106:9;21102:18;21094:26;;21130:71;21198:1;21187:9;21183:17;21174:6;21130:71;:::i;:::-;20986:222;;;;:::o;21214:329::-;21273:6;21322:2;21310:9;21301:7;21297:23;21293:32;21290:119;;;21328:79;;:::i;:::-;21290:119;21448:1;21473:53;21518:7;21509:6;21498:9;21494:22;21473:53;:::i;:::-;21463:63;;21419:117;21214:329;;;;:::o;21549:379::-;21633:6;21682:2;21670:9;21661:7;21657:23;21653:32;21650:119;;;21688:79;;:::i;:::-;21650:119;21808:1;21833:78;21903:7;21894:6;21883:9;21879:22;21833:78;:::i;:::-;21823:88;;21779:142;21549:379;;;;:::o;21934:328::-;22053:4;22091:2;22080:9;22076:18;22068:26;;22104:69;22170:1;22159:9;22155:17;22146:6;22104:69;:::i;:::-;22183:72;22251:2;22240:9;22236:18;22227:6;22183:72;:::i;:::-;21934:328;;;;;:::o;22268:148::-;22370:11;22407:3;22392:18;;22268:148;;;;:::o;22422:390::-;22528:3;22556:39;22589:5;22556:39;:::i;:::-;22611:89;22693:6;22688:3;22611:89;:::i;:::-;22604:96;;22709:65;22767:6;22762:3;22755:4;22748:5;22744:16;22709:65;:::i;:::-;22799:6;22794:3;22790:16;22783:23;;22532:280;22422:390;;;;:::o;22818:151::-;22958:3;22954:1;22946:6;22942:14;22935:27;22818:151;:::o;22975:400::-;23135:3;23156:84;23238:1;23233:3;23156:84;:::i;:::-;23149:91;;23249:93;23338:3;23249:93;:::i;:::-;23367:1;23362:3;23358:11;23351:18;;22975:400;;;:::o;23381:1127::-;23811:3;23833:95;23924:3;23915:6;23833:95;:::i;:::-;23826:102;;23945:148;24089:3;23945:148;:::i;:::-;23938:155;;24110:95;24201:3;24192:6;24110:95;:::i;:::-;24103:102;;24222:148;24366:3;24222:148;:::i;:::-;24215:155;;24387:95;24478:3;24469:6;24387:95;:::i;:::-;24380:102;;24499:3;24492:10;;23381:1127;;;;;;:::o;24514:180::-;24562:77;24559:1;24552:88;24659:4;24656:1;24649:15;24683:4;24680:1;24673:15;24700:320;24744:6;24781:1;24775:4;24771:12;24761:22;;24828:1;24822:4;24818:12;24849:18;24839:81;;24905:4;24897:6;24893:17;24883:27;;24839:81;24967:2;24959:6;24956:14;24936:18;24933:38;24930:84;;24986:18;;:::i;:::-;24930:84;24751:269;24700:320;;;:::o;25026:140::-;25074:4;25097:3;25089:11;;25120:3;25117:1;25110:14;25154:4;25151:1;25141:18;25133:26;;25026:140;;;:::o;25172:93::-;25209:6;25256:2;25251;25244:5;25240:14;25236:23;25226:33;;25172:93;;;:::o;25271:107::-;25315:8;25365:5;25359:4;25355:16;25334:37;;25271:107;;;;:::o;25384:393::-;25453:6;25503:1;25491:10;25487:18;25526:97;25556:66;25545:9;25526:97;:::i;:::-;25644:39;25674:8;25663:9;25644:39;:::i;:::-;25632:51;;25716:4;25712:9;25705:5;25701:21;25692:30;;25765:4;25755:8;25751:19;25744:5;25741:30;25731:40;;25460:317;;25384:393;;;;;:::o;25783:142::-;25833:9;25866:53;25884:34;25893:24;25911:5;25893:24;:::i;:::-;25884:34;:::i;:::-;25866:53;:::i;:::-;25853:66;;25783:142;;;:::o;25931:75::-;25974:3;25995:5;25988:12;;25931:75;;;:::o;26012:269::-;26122:39;26153:7;26122:39;:::i;:::-;26183:91;26232:41;26256:16;26232:41;:::i;:::-;26224:6;26217:4;26211:11;26183:91;:::i;:::-;26177:4;26170:105;26088:193;26012:269;;;:::o;26287:73::-;26332:3;26287:73;:::o;26366:189::-;26443:32;;:::i;:::-;26484:65;26542:6;26534;26528:4;26484:65;:::i;:::-;26419:136;26366:189;;:::o;26561:186::-;26621:120;26638:3;26631:5;26628:14;26621:120;;;26692:39;26729:1;26722:5;26692:39;:::i;:::-;26665:1;26658:5;26654:13;26645:22;;26621:120;;;26561:186;;:::o;26753:541::-;26853:2;26848:3;26845:11;26842:445;;;26887:37;26918:5;26887:37;:::i;:::-;26970:29;26988:10;26970:29;:::i;:::-;26960:8;26956:44;27153:2;27141:10;27138:18;27135:49;;;27174:8;27159:23;;27135:49;27197:80;27253:22;27271:3;27253:22;:::i;:::-;27243:8;27239:37;27226:11;27197:80;:::i;:::-;26857:430;;26842:445;26753:541;;;:::o;27300:117::-;27354:8;27404:5;27398:4;27394:16;27373:37;;27300:117;;;;:::o;27423:169::-;27467:6;27500:51;27548:1;27544:6;27536:5;27533:1;27529:13;27500:51;:::i;:::-;27496:56;27581:4;27575;27571:15;27561:25;;27474:118;27423:169;;;;:::o;27597:295::-;27673:4;27819:29;27844:3;27838:4;27819:29;:::i;:::-;27811:37;;27881:3;27878:1;27874:11;27868:4;27865:21;27857:29;;27597:295;;;;:::o;27897:1390::-;28012:36;28044:3;28012:36;:::i;:::-;28113:18;28105:6;28102:30;28099:56;;;28135:18;;:::i;:::-;28099:56;28179:38;28211:4;28205:11;28179:38;:::i;:::-;28264:66;28323:6;28315;28309:4;28264:66;:::i;:::-;28357:1;28381:4;28368:17;;28413:2;28405:6;28402:14;28430:1;28425:617;;;;29086:1;29103:6;29100:77;;;29152:9;29147:3;29143:19;29137:26;29128:35;;29100:77;29203:67;29263:6;29256:5;29203:67;:::i;:::-;29197:4;29190:81;29059:222;28395:886;;28425:617;28477:4;28473:9;28465:6;28461:22;28511:36;28542:4;28511:36;:::i;:::-;28569:1;28583:208;28597:7;28594:1;28591:14;28583:208;;;28676:9;28671:3;28667:19;28661:26;28653:6;28646:42;28727:1;28719:6;28715:14;28705:24;;28774:2;28763:9;28759:18;28746:31;;28620:4;28617:1;28613:12;28608:17;;28583:208;;;28819:6;28810:7;28807:19;28804:179;;;28877:9;28872:3;28868:19;28862:26;28920:48;28962:4;28954:6;28950:17;28939:9;28920:48;:::i;:::-;28912:6;28905:64;28827:156;28804:179;29029:1;29025;29017:6;29013:14;29009:22;29003:4;28996:36;28432:610;;;28395:886;;27987:1300;;;27897:1390;;:::o;29293:529::-;29460:4;29498:2;29487:9;29483:18;29475:26;;29511:71;29579:1;29568:9;29564:17;29555:6;29511:71;:::i;:::-;29629:9;29623:4;29619:20;29614:2;29603:9;29599:18;29592:48;29657:76;29728:4;29719:6;29657:76;:::i;:::-;29649:84;;29743:72;29811:2;29800:9;29796:18;29787:6;29743:72;:::i;:::-;29293:529;;;;;;:::o;29828:169::-;29912:11;29946:6;29941:3;29934:19;29986:4;29981:3;29977:14;29962:29;;29828:169;;;;:::o;30003:166::-;30143:18;30139:1;30131:6;30127:14;30120:42;30003:166;:::o;30175:366::-;30317:3;30338:67;30402:2;30397:3;30338:67;:::i;:::-;30331:74;;30414:93;30503:3;30414:93;:::i;:::-;30532:2;30527:3;30523:12;30516:19;;30175:366;;;:::o;30547:419::-;30713:4;30751:2;30740:9;30736:18;30728:26;;30800:9;30794:4;30790:20;30786:1;30775:9;30771:17;30764:47;30828:131;30954:4;30828:131;:::i;:::-;30820:139;;30547:419;;;:::o;30972:147::-;31073:11;31110:3;31095:18;;30972:147;;;;:::o;31125:114::-;;:::o;31245:398::-;31404:3;31425:83;31506:1;31501:3;31425:83;:::i;:::-;31418:90;;31517:93;31606:3;31517:93;:::i;:::-;31635:1;31630:3;31626:11;31619:18;;31245:398;;;:::o;31649:379::-;31833:3;31855:147;31998:3;31855:147;:::i;:::-;31848:154;;32019:3;32012:10;;31649:379;;;:::o;32034:165::-;32174:17;32170:1;32162:6;32158:14;32151:41;32034:165;:::o;32205:366::-;32347:3;32368:67;32432:2;32427:3;32368:67;:::i;:::-;32361:74;;32444:93;32533:3;32444:93;:::i;:::-;32562:2;32557:3;32553:12;32546:19;;32205:366;;;:::o;32577:419::-;32743:4;32781:2;32770:9;32766:18;32758:26;;32830:9;32824:4;32820:20;32816:1;32805:9;32801:17;32794:47;32858:131;32984:4;32858:131;:::i;:::-;32850:139;;32577:419;;;:::o;33002:180::-;33050:77;33047:1;33040:88;33147:4;33144:1;33137:15;33171:4;33168:1;33161:15;33188:180;33236:77;33233:1;33226:88;33333:4;33330:1;33323:15;33357:4;33354:1;33347:15;33374:233;33413:3;33436:24;33454:5;33436:24;:::i;:::-;33427:33;;33482:66;33475:5;33472:77;33469:103;;33552:18;;:::i;:::-;33469:103;33599:1;33592:5;33588:13;33581:20;;33374:233;;;:::o;33613:225::-;33753:34;33749:1;33741:6;33737:14;33730:58;33822:8;33817:2;33809:6;33805:15;33798:33;33613:225;:::o;33844:366::-;33986:3;34007:67;34071:2;34066:3;34007:67;:::i;:::-;34000:74;;34083:93;34172:3;34083:93;:::i;:::-;34201:2;34196:3;34192:12;34185:19;;33844:366;;;:::o;34216:419::-;34382:4;34420:2;34409:9;34405:18;34397:26;;34469:9;34463:4;34459:20;34455:1;34444:9;34440:17;34433:47;34497:131;34623:4;34497:131;:::i;:::-;34489:139;;34216:419;;;:::o;34641:191::-;34681:3;34700:20;34718:1;34700:20;:::i;:::-;34695:25;;34734:20;34752:1;34734:20;:::i;:::-;34729:25;;34777:1;34774;34770:9;34763:16;;34798:3;34795:1;34792:10;34789:36;;;34805:18;;:::i;:::-;34789:36;34641:191;;;;:::o;34838:410::-;34878:7;34901:20;34919:1;34901:20;:::i;:::-;34896:25;;34935:20;34953:1;34935:20;:::i;:::-;34930:25;;34990:1;34987;34983:9;35012:30;35030:11;35012:30;:::i;:::-;35001:41;;35191:1;35182:7;35178:15;35175:1;35172:22;35152:1;35145:9;35125:83;35102:139;;35221:18;;:::i;:::-;35102:139;34886:362;34838:410;;;;:::o;35254:180::-;35302:77;35299:1;35292:88;35399:4;35396:1;35389:15;35423:4;35420:1;35413:15;35440:185;35480:1;35497:20;35515:1;35497:20;:::i;:::-;35492:25;;35531:20;35549:1;35531:20;:::i;:::-;35526:25;;35570:1;35560:35;;35575:18;;:::i;:::-;35560:35;35617:1;35614;35610:9;35605:14;;35440:185;;;;:::o;35631:194::-;35671:4;35691:20;35709:1;35691:20;:::i;:::-;35686:25;;35725:20;35743:1;35725:20;:::i;:::-;35720:25;;35769:1;35766;35762:9;35754:17;;35793:1;35787:4;35784:11;35781:37;;;35798:18;;:::i;:::-;35781:37;35631:194;;;;:::o;35831:176::-;35863:1;35880:20;35898:1;35880:20;:::i;:::-;35875:25;;35914:20;35932:1;35914:20;:::i;:::-;35909:25;;35953:1;35943:35;;35958:18;;:::i;:::-;35943:35;35999:1;35996;35992:9;35987:14;;35831:176;;;;:::o;36013:89::-;36049:7;36089:6;36082:5;36078:18;36067:29;;36013:89;;;:::o;36108:96::-;36142:8;36191:5;36186:3;36182:15;36161:36;;36108:96;;;:::o;36210:94::-;36248:7;36277:21;36292:5;36277:21;:::i;:::-;36266:32;;36210:94;;;:::o;36310:153::-;36413:43;36432:23;36449:5;36432:23;:::i;:::-;36413:43;:::i;:::-;36408:3;36401:56;36310:153;;:::o;36469:251::-;36579:3;36594:73;36663:3;36654:6;36594:73;:::i;:::-;36692:1;36687:3;36683:11;36676:18;;36711:3;36704:10;;36469:251;;;;:::o;36726:115::-;36811:23;36828:5;36811:23;:::i;:::-;36806:3;36799:36;36726:115;;:::o;36847:218::-;36938:4;36976:2;36965:9;36961:18;36953:26;;36989:69;37055:1;37044:9;37040:17;37031:6;36989:69;:::i;:::-;36847:218;;;;:::o;37071:105::-;37146:23;37163:5;37146:23;:::i;:::-;37141:3;37134:36;37071:105;;:::o;37182:108::-;37259:24;37277:5;37259:24;:::i;:::-;37254:3;37247:37;37182:108;;:::o;37296:99::-;37367:21;37382:5;37367:21;:::i;:::-;37362:3;37355:34;37296:99;;:::o;37457:1221::-;37590:3;37626:4;37621:3;37617:14;37715:4;37708:5;37704:16;37698:23;37734:61;37789:4;37784:3;37780:14;37766:12;37734:61;:::i;:::-;37641:164;37891:4;37884:5;37880:16;37874:23;37910:63;37967:4;37962:3;37958:14;37944:12;37910:63;:::i;:::-;37815:168;38068:4;38061:5;38057:16;38051:23;38121:3;38115:4;38111:14;38104:4;38099:3;38095:14;38088:38;38147:71;38213:4;38199:12;38147:71;:::i;:::-;38139:79;;37993:236;38314:4;38307:5;38303:16;38297:23;38367:3;38361:4;38357:14;38350:4;38345:3;38341:14;38334:38;38393:71;38459:4;38445:12;38393:71;:::i;:::-;38385:79;;38239:236;38565:4;38558:5;38554:16;38548:23;38584:57;38635:4;38630:3;38626:14;38612:12;38584:57;:::i;:::-;38485:166;38668:4;38661:11;;37595:1083;37457:1221;;;;:::o;38684:511::-;38869:4;38907:2;38896:9;38892:18;38884:26;;38956:9;38950:4;38946:20;38942:1;38931:9;38927:17;38920:47;38984:122;39101:4;39092:6;38984:122;:::i;:::-;38976:130;;39116:72;39184:2;39173:9;39169:18;39160:6;39116:72;:::i;:::-;38684:511;;;;;:::o;39201:117::-;39310:1;39307;39300:12;39447:143;39504:5;39535:6;39529:13;39520:22;;39551:33;39578:5;39551:33;:::i;:::-;39447:143;;;;:::o;39623:622::-;39712:5;39756:4;39744:9;39739:3;39735:19;39731:30;39728:117;;;39764:79;;:::i;:::-;39728:117;39863:21;39879:4;39863:21;:::i;:::-;39854:30;;39948:1;39988:60;40044:3;40035:6;40024:9;40020:22;39988:60;:::i;:::-;39981:4;39974:5;39970:16;39963:86;39894:166;40125:2;40166:60;40222:3;40213:6;40202:9;40198:22;40166:60;:::i;:::-;40159:4;40152:5;40148:16;40141:86;40070:168;39623:622;;;;:::o;40251:409::-;40350:6;40399:2;40387:9;40378:7;40374:23;40370:32;40367:119;;;40405:79;;:::i;:::-;40367:119;40525:1;40550:93;40635:7;40626:6;40615:9;40611:22;40550:93;:::i;:::-;40540:103;;40496:157;40251:409;;;;:::o;40666:143::-;40723:5;40754:6;40748:13;40739:22;;40770:33;40797:5;40770:33;:::i;:::-;40666:143;;;;:::o;40815:120::-;40887:23;40904:5;40887:23;:::i;:::-;40880:5;40877:34;40867:62;;40925:1;40922;40915:12;40867:62;40815:120;:::o;40941:141::-;40997:5;41028:6;41022:13;41013:22;;41044:32;41070:5;41044:32;:::i;:::-;40941:141;;;;:::o;41119:815::-;41212:5;41256:4;41244:9;41239:3;41235:19;41231:30;41228:117;;;41264:79;;:::i;:::-;41228:117;41363:21;41379:4;41363:21;:::i;:::-;41354:30;;41443:1;41483:60;41539:3;41530:6;41519:9;41515:22;41483:60;:::i;:::-;41476:4;41469:5;41465:16;41458:86;41394:161;41615:2;41656:59;41711:3;41702:6;41691:9;41687:22;41656:59;:::i;:::-;41649:4;41642:5;41638:16;41631:85;41565:162;41785:2;41826:89;41911:3;41902:6;41891:9;41887:22;41826:89;:::i;:::-;41819:4;41812:5;41808:16;41801:115;41737:190;41119:815;;;;:::o;41940:418::-;42043:6;42092:3;42080:9;42071:7;42067:23;42063:33;42060:120;;;42099:79;;:::i;:::-;42060:120;42219:1;42244:97;42333:7;42324:6;42313:9;42309:22;42244:97;:::i;:::-;42234:107;;42190:161;41940:418;;;;:::o;42364:182::-;42504:34;42500:1;42492:6;42488:14;42481:58;42364:182;:::o;42552:366::-;42694:3;42715:67;42779:2;42774:3;42715:67;:::i;:::-;42708:74;;42791:93;42880:3;42791:93;:::i;:::-;42909:2;42904:3;42900:12;42893:19;;42552:366;;;:::o;42924:419::-;43090:4;43128:2;43117:9;43113:18;43105:26;;43177:9;43171:4;43167:20;43163:1;43152:9;43148:17;43141:47;43205:131;43331:4;43205:131;:::i;:::-;43197:139;;42924:419;;;:::o;43349:170::-;43489:22;43485:1;43477:6;43473:14;43466:46;43349:170;:::o;43525:366::-;43667:3;43688:67;43752:2;43747:3;43688:67;:::i;:::-;43681:74;;43764:93;43853:3;43764:93;:::i;:::-;43882:2;43877:3;43873:12;43866:19;;43525:366;;;:::o;43897:419::-;44063:4;44101:2;44090:9;44086:18;44078:26;;44150:9;44144:4;44140:20;44136:1;44125:9;44121:17;44114:47;44178:131;44304:4;44178:131;:::i;:::-;44170:139;;43897:419;;;:::o;44322:118::-;44359:7;44399:34;44392:5;44388:46;44377:57;;44322:118;;;:::o;44446:96::-;44480:8;44529:5;44524:3;44520:15;44499:36;;44446:96;;;:::o;44548:95::-;44587:7;44616:21;44631:5;44616:21;:::i;:::-;44605:32;;44548:95;;;:::o;44649:157::-;44754:45;44774:24;44792:5;44774:24;:::i;:::-;44754:45;:::i;:::-;44749:3;44742:58;44649:157;;:::o;44812:397::-;44952:3;44967:75;45038:3;45029:6;44967:75;:::i;:::-;45067:2;45062:3;45058:12;45051:19;;45080:75;45151:3;45142:6;45080:75;:::i;:::-;45180:2;45175:3;45171:12;45164:19;;45200:3;45193:10;;44812:397;;;;;:::o;45215:256::-;45327:3;45342:75;45413:3;45404:6;45342:75;:::i;:::-;45442:2;45437:3;45433:12;45426:19;;45462:3;45455:10;;45215:256;;;;:::o;45477:193::-;45516:3;45535:19;45552:1;45535:19;:::i;:::-;45530:24;;45568:19;45585:1;45568:19;:::i;:::-;45563:24;;45610:1;45607;45603:9;45596:16;;45633:6;45628:3;45625:15;45622:41;;;45643:18;;:::i;:::-;45622:41;45477:193;;;;:::o;45676:386::-;45780:3;45808:38;45840:5;45808:38;:::i;:::-;45862:88;45943:6;45938:3;45862:88;:::i;:::-;45855:95;;45959:65;46017:6;46012:3;46005:4;45998:5;45994:16;45959:65;:::i;:::-;46049:6;46044:3;46040:16;46033:23;;45784:278;45676:386;;;;:::o;46068:86::-;46103:7;46143:4;46136:5;46132:16;46121:27;;46068:86;;;:::o;46160:96::-;46194:8;46243:5;46238:3;46234:15;46213:36;;46160:96;;;:::o;46262:93::-;46299:7;46328:21;46343:5;46328:21;:::i;:::-;46317:32;;46262:93;;;:::o;46361:149::-;46462:41;46480:22;46496:5;46480:22;:::i;:::-;46462:41;:::i;:::-;46457:3;46450:54;46361:149;;:::o;46516:827::-;46766:3;46788:93;46877:3;46868:6;46788:93;:::i;:::-;46781:100;;46891:71;46958:3;46949:6;46891:71;:::i;:::-;46987:1;46982:3;46978:11;46971:18;;46999:73;47068:3;47059:6;46999:73;:::i;:::-;47097:1;47092:3;47088:11;47081:18;;47109:71;47176:3;47167:6;47109:71;:::i;:::-;47205:1;47200:3;47196:11;47189:18;;47224:93;47313:3;47304:6;47224:93;:::i;:::-;47217:100;;47334:3;47327:10;;46516:827;;;;;;;;:::o;47349:143::-;47406:5;47437:6;47431:13;47422:22;;47453:33;47480:5;47453:33;:::i;:::-;47349:143;;;;:::o;47498:351::-;47568:6;47617:2;47605:9;47596:7;47592:23;47588:32;47585:119;;;47623:79;;:::i;:::-;47585:119;47743:1;47768:64;47824:7;47815:6;47804:9;47800:22;47768:64;:::i;:::-;47758:74;;47714:128;47498:351;;;;:::o;47855:225::-;47995:34;47991:1;47983:6;47979:14;47972:58;48064:8;48059:2;48051:6;48047:15;48040:33;47855:225;:::o;48086:366::-;48228:3;48249:67;48313:2;48308:3;48249:67;:::i;:::-;48242:74;;48325:93;48414:3;48325:93;:::i;:::-;48443:2;48438:3;48434:12;48427:19;;48086:366;;;:::o;48458:419::-;48624:4;48662:2;48651:9;48647:18;48639:26;;48711:9;48705:4;48701:20;48697:1;48686:9;48682:17;48675:47;48739:131;48865:4;48739:131;:::i;:::-;48731:139;;48458:419;;;:::o;48883:442::-;49032:4;49070:2;49059:9;49055:18;49047:26;;49083:71;49151:1;49140:9;49136:17;49127:6;49083:71;:::i;:::-;49164:72;49232:2;49221:9;49217:18;49208:6;49164:72;:::i;:::-;49246;49314:2;49303:9;49299:18;49290:6;49246:72;:::i;:::-;48883:442;;;;;;:::o;49331:116::-;49401:21;49416:5;49401:21;:::i;:::-;49394:5;49391:32;49381:60;;49437:1;49434;49427:12;49381:60;49331:116;:::o;49453:137::-;49507:5;49538:6;49532:13;49523:22;;49554:30;49578:5;49554:30;:::i;:::-;49453:137;;;;:::o;49596:345::-;49663:6;49712:2;49700:9;49691:7;49687:23;49683:32;49680:119;;;49718:79;;:::i;:::-;49680:119;49838:1;49863:61;49916:7;49907:6;49896:9;49892:22;49863:61;:::i;:::-;49853:71;;49809:125;49596:345;;;;:::o;49947:229::-;50087:34;50083:1;50075:6;50071:14;50064:58;50156:12;50151:2;50143:6;50139:15;50132:37;49947:229;:::o;50182:366::-;50324:3;50345:67;50409:2;50404:3;50345:67;:::i;:::-;50338:74;;50421:93;50510:3;50421:93;:::i;:::-;50539:2;50534:3;50530:12;50523:19;;50182:366;;;:::o;50554:419::-;50720:4;50758:2;50747:9;50743:18;50735:26;;50807:9;50801:4;50797:20;50793:1;50782:9;50778:17;50771:47;50835:131;50961:4;50835:131;:::i;:::-;50827:139;;50554:419;;;:::o;50979:225::-;51119:34;51115:1;51107:6;51103:14;51096:58;51188:8;51183:2;51175:6;51171:15;51164:33;50979:225;:::o;51210:366::-;51352:3;51373:67;51437:2;51432:3;51373:67;:::i;:::-;51366:74;;51449:93;51538:3;51449:93;:::i;:::-;51567:2;51562:3;51558:12;51551:19;;51210:366;;;:::o;51582:419::-;51748:4;51786:2;51775:9;51771:18;51763:26;;51835:9;51829:4;51825:20;51821:1;51810:9;51806:17;51799:47;51863:131;51989:4;51863:131;:::i;:::-;51855:139;;51582:419;;;:::o;52007:271::-;52137:3;52159:93;52248:3;52239:6;52159:93;:::i;:::-;52152:100;;52269:3;52262:10;;52007:271;;;;:::o;52284:179::-;52424:31;52420:1;52412:6;52408:14;52401:55;52284:179;:::o;52469:366::-;52611:3;52632:67;52696:2;52691:3;52632:67;:::i;:::-;52625:74;;52708:93;52797:3;52708:93;:::i;:::-;52826:2;52821:3;52817:12;52810:19;;52469:366;;;:::o;52841:419::-;53007:4;53045:2;53034:9;53030:18;53022:26;;53094:9;53088:4;53084:20;53080:1;53069:9;53065:17;53058:47;53122:131;53248:4;53122:131;:::i;:::-;53114:139;;52841:419;;;:::o;53266:377::-;53354:3;53382:39;53415:5;53382:39;:::i;:::-;53437:71;53501:6;53496:3;53437:71;:::i;:::-;53430:78;;53517:65;53575:6;53570:3;53563:4;53556:5;53552:16;53517:65;:::i;:::-;53607:29;53629:6;53607:29;:::i;:::-;53602:3;53598:39;53591:46;;53358:285;53266:377;;;;:::o;53649:313::-;53762:4;53800:2;53789:9;53785:18;53777:26;;53849:9;53843:4;53839:20;53835:1;53824:9;53820:17;53813:47;53877:78;53950:4;53941:6;53877:78;:::i;:::-;53869:86;;53649:313;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3031800","executionCost":"infinite","totalCost":"infinite"},"external":{"SOLANA_CHAIN_ID()":"359","allowInitializePath((uint32,bytes32,uint64))":"3143","endpoint()":"infinite","gasLimit()":"2539","getLinkedAddresses(address)":"infinite","getLinkedAddressesAsStrings(address)":"infinite","isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":"1045","linkAddress(string)":"infinite","linkedSolanaAddresses(address,uint256)":"infinite","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"infinite","nextNonce(uint32,bytes32)":"912","oAppVersion()":"infinite","owner()":"2567","peers(uint32)":"2882","quoteLinkAddress(string)":"infinite","quoteLinkFee(string)":"infinite","renounceOwnership()":"30487","setDelegate(address)":"infinite","setGasLimit(uint256)":"24850","setPeer(uint32,bytes32)":"infinite","transferOwnership(address)":"30832","withdraw()":"infinite"},"internal":{"_lzReceive(struct Origin calldata,bytes32,bytes calldata,address,bytes calldata)":"23","addressToString(address)":"infinite","uint256ToString(uint256)":"infinite"}},"methodIdentifiers":{"SOLANA_CHAIN_ID()":"067bd07a","allowInitializePath((uint32,bytes32,uint64))":"ff7bd03d","endpoint()":"5e280f11","gasLimit()":"f68016b7","getLinkedAddresses(address)":"9541618c","getLinkedAddressesAsStrings(address)":"a6451163","isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":"82413eac","linkAddress(string)":"306fed73","linkedSolanaAddresses(address,uint256)":"7954c58f","lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)":"13137d65","nextNonce(uint32,bytes32)":"7d25a05e","oAppVersion()":"17442b70","owner()":"8da5cb5b","peers(uint32)":"bb0b6a53","quoteLinkAddress(string)":"bf3f3de9","quoteLinkFee(string)":"56368126","renounceOwnership()":"715018a6","setDelegate(address)":"ca5eb5e1","setGasLimit(uint256)":"ee7d72b4","setPeer(uint32,bytes32)":"3400288b","transferOwnership(address)":"f2fde38b","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"solanaAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IdentityLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmAddress\",\"type\":\"address\"}],\"name\":\"getLinkedAddresses\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evmAddress\",\"type\":\"address\"}],\"name\":\"getLinkedAddressesAsStrings\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_solanaAddress\",\"type\":\"string\"}],\"name\":\"linkAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linkedSolanaAddresses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_solanaAddress\",\"type\":\"string\"}],\"name\":\"quoteLinkAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_solanaAddress\",\"type\":\"string\"}],\"name\":\"quoteLinkFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for linking EVM addresses to Solana addresses via LayerZero V2 This contract sends messages from EVM chains to a Solana OApp\",\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"getLinkedAddresses(address)\":{\"details\":\"Get linked Solana addresses for an EVM address\",\"params\":{\"_evmAddress\":\"The EVM address to check\"},\"returns\":{\"_0\":\"Array of linked Solana addresses as bytes\"}},\"getLinkedAddressesAsStrings(address)\":{\"details\":\"Get linked Solana addresses for an EVM address as strings\",\"params\":{\"_evmAddress\":\"The EVM address to check\"},\"returns\":{\"_0\":\"Array of linked Solana addresses as strings\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"linkAddress(string)\":{\"details\":\"Link the sender's EVM address to a Solana address\",\"params\":{\"_solanaAddress\":\"Solana address as string\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteLinkAddress(string)\":{\"details\":\"Quote the fee for linking an address\",\"params\":{\"_solanaAddress\":\"Solana address as string\"},\"returns\":{\"_0\":\"Fee required for the cross-chain message\"}},\"quoteLinkFee(string)\":{\"details\":\"Quote the fee for sending a message to Solana\",\"params\":{\"_solanaAddress\":\"The Solana address to link\"},\"returns\":{\"fee\":\"The estimated messaging fee\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setGasLimit(uint256)\":{\"details\":\"Update the gas limit for cross-chain calls\",\"params\":{\"_gasLimit\":\"New gas limit\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Withdraw any stuck funds (admin function)\"}},\"title\":\"OmnichainIdentityLinker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OmnichainIdentityLinker.sol\":\"OmnichainIdentityLinker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2beee03cdf59a9bc72e94d08b69cb2e908725f4ceabb48651494938100e21e35\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { CalldataBytesLib } from \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x621c6090fc432f94a99f677a95d72b75f56db89ddc5fc870669777a313587c28\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport { DVNOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\\\";\\n\\n/**\\n * @title OptionsBuilder\\n * @dev Library for building and encoding various message options.\\n */\\nlibrary OptionsBuilder {\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    // Constants for options types\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // Custom error message\\n    error InvalidSize(uint256 max, uint256 actual);\\n    error InvalidOptionType(uint16 optionType);\\n\\n    // Modifier to ensure only options of type 3 are used\\n    modifier onlyType3(bytes memory _options) {\\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new options container with type 3.\\n     * @return options The newly created options container.\\n     */\\n    function newOptions() internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_3);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ receive option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor\\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\\n     */\\n    function addExecutorLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor native drop option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n     * @param _receiver The receiver address for the native drop option.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n     */\\n    function addExecutorNativeDropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ compose option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _index The index for the lzCompose() function call.\\n     * @param _gas The gasLimit for the lzCompose() function call.\\n     * @param _value The msg.value for the lzCompose() function call.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\\n     */\\n    function addExecutorLzComposeOption(\\n        bytes memory _options,\\n        uint16 _index,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor ordered execution option to the existing options.\\n     * @param _options The existing options container.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOrderedExecutionOption(\\n        bytes memory _options\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds a DVN pre-crime option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the pre-crime option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNPreCrimeOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds an executor option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _optionType The type of the executor option.\\n     * @param _option The encoded data for the executor option.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOption(\\n        bytes memory _options,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                ExecutorOptions.WORKER_ID,\\n                _option.length.toUint16() + 1, // +1 for optionType\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Adds a DVN option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the DVN option.\\n     * @param _optionType The type of the DVN option.\\n     * @param _option The encoded data for the DVN option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                DVNOptions.WORKER_ID,\\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\\n                _dvnIdx,\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 1.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @return legacyOptions The encoded legacy options.\\n     */\\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 2.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @param _nativeForDst The amount of native air dropped to the receiver.\\n     * @param _receiver The _nativeForDst receiver address.\\n     * @return legacyOptions The encoded legacy options of type 2.\\n     */\\n    function encodeLegacyOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _nativeForDst,\\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\\n    ) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x9ba881395fe0906e40d9222c318b8c74d45cc4035369db4a4c6c7d5de2c42378\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/OmnichainIdentityLinker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\r\\nimport \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OmnichainIdentityLinker\\r\\n * @dev Contract for linking EVM addresses to Solana addresses via LayerZero V2\\r\\n * This contract sends messages from EVM chains to a Solana OApp\\r\\n */\\r\\ncontract OmnichainIdentityLinker is OApp {\\r\\n    using OptionsBuilder for bytes;\\r\\n    // Solana chain ID in LayerZero V2\\r\\n    uint32 public constant SOLANA_CHAIN_ID = 40168; // Solana DEVNET chain ID in LZ V2\\r\\n\\r\\n    // Gas limit for cross-chain calls\\r\\n    uint256 public gasLimit = 200000;\\r\\n\\r\\n    // Store linked addresses history for reference\\r\\n    mapping(address => bytes[]) public linkedSolanaAddresses;\\r\\n\\r\\n    // Event emitted when a link is created\\r\\n    event IdentityLinked(address evmAddress, bytes solanaAddress, uint256 timestamp);\\r\\n\\r\\n    constructor(address _lzEndpoint, address _delegate) OApp(_lzEndpoint, _delegate) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Link the sender's EVM address to a Solana address\\r\\n     * @param _solanaAddress Solana address as string\\r\\n     */\\r\\n    function linkAddress(string memory _solanaAddress) external payable {\\r\\n        // Format the message as CSV string for easy parsing on Solana\\r\\n        // Format: \\\"evmAddress,solanaAddress,timestamp\\\"\\r\\n        string memory evmAddressStr = addressToString(msg.sender);\\r\\n        string memory timestampStr = uint256ToString(block.timestamp);\\r\\n        string memory message = string(abi.encodePacked(\\r\\n            evmAddressStr, \\\",\\\", \\r\\n            _solanaAddress, \\\",\\\", \\r\\n            timestampStr\\r\\n        ));\\r\\n        \\r\\n        // Convert string to bytes for sending\\r\\n        bytes memory payload = bytes(message);\\r\\n\\r\\n        // Store the linked address in history\\r\\n        linkedSolanaAddresses[msg.sender].push(bytes(_solanaAddress));\\r\\n\\r\\n        // Emit event\\r\\n        emit IdentityLinked(msg.sender, bytes(_solanaAddress), block.timestamp);\\r\\n\\r\\n        // Prepare messaging parameters for LayerZero V2\\r\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(200000, 0);\\r\\n        \\r\\n        // Send message to Solana via LayerZero V2\\r\\n        MessagingFee memory fee = _quote(SOLANA_CHAIN_ID, payload, options, false);\\r\\n        require(msg.value >= fee.nativeFee, \\\"Insufficient fee\\\");\\r\\n        \\r\\n        _lzSend(\\r\\n            SOLANA_CHAIN_ID,     // Destination chain ID (Solana)\\r\\n            payload,             // Payload\\r\\n            options,             // Options\\r\\n            MessagingFee(msg.value, 0), // Fee\\r\\n            payable(msg.sender)  // Refund address\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Convert an address to a string\\r\\n     * @param _addr The address to convert\\r\\n     * @return String representation of the address\\r\\n     */\\r\\n    function addressToString(address _addr) internal pure returns (string memory) {\\r\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n        \\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        \\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n        \\r\\n        return string(str);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Convert a uint256 to a string\\r\\n     * @param _value The uint256 to convert\\r\\n     * @return String representation of the uint256\\r\\n     */\\r\\n    function uint256ToString(uint256 _value) internal pure returns (string memory) {\\r\\n        if (_value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        \\r\\n        uint256 temp = _value;\\r\\n        uint256 digits;\\r\\n        \\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        \\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (_value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(_value % 10)));\\r\\n            _value /= 10;\\r\\n        }\\r\\n        \\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get linked Solana addresses for an EVM address\\r\\n     * @param _evmAddress The EVM address to check\\r\\n     * @return Array of linked Solana addresses as bytes\\r\\n     */\\r\\n    function getLinkedAddresses(address _evmAddress) external view returns (bytes[] memory) {\\r\\n        return linkedSolanaAddresses[_evmAddress];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get linked Solana addresses for an EVM address as strings\\r\\n     * @param _evmAddress The EVM address to check\\r\\n     * @return Array of linked Solana addresses as strings\\r\\n     */\\r\\n    function getLinkedAddressesAsStrings(address _evmAddress) external view returns (string[] memory) {\\r\\n        bytes[] memory bytesAddresses = linkedSolanaAddresses[_evmAddress];\\r\\n        string[] memory strAddresses = new string[](bytesAddresses.length);\\r\\n        \\r\\n        for (uint i = 0; i < bytesAddresses.length; i++) {\\r\\n            strAddresses[i] = string(bytesAddresses[i]);\\r\\n        }\\r\\n        \\r\\n        return strAddresses;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Quote the fee for sending a message to Solana\\r\\n     * @param _solanaAddress The Solana address to link\\r\\n     * @return fee The estimated messaging fee\\r\\n     */\\r\\n    function quoteLinkFee(string memory _solanaAddress) external view returns (MessagingFee memory fee) {\\r\\n        // Format the message as CSV string for fee estimation\\r\\n        string memory evmAddressStr = addressToString(msg.sender);\\r\\n        string memory timestampStr = uint256ToString(block.timestamp);\\r\\n        string memory message = string(abi.encodePacked(\\r\\n            evmAddressStr, \\\",\\\", \\r\\n            _solanaAddress, \\\",\\\", \\r\\n            timestampStr\\r\\n        ));\\r\\n        \\r\\n        bytes memory payload = bytes(message);\\r\\n        bytes memory options = bytes(\\\"\\\"); // Default options\\r\\n        \\r\\n        return _quote(SOLANA_CHAIN_ID, payload, options, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Quote the fee for linking an address\\r\\n     * @param _solanaAddress Solana address as string\\r\\n     * @return Fee required for the cross-chain message\\r\\n     */\\r\\n    function quoteLinkAddress(string memory _solanaAddress) external view returns (uint256) {\\r\\n        // Format the same message as in linkAddress\\r\\n        string memory evmAddressStr = addressToString(msg.sender);\\r\\n        string memory timestampStr = uint256ToString(block.timestamp);\\r\\n        string memory message = string(abi.encodePacked(\\r\\n            evmAddressStr, \\\",\\\", \\r\\n            _solanaAddress, \\\",\\\", \\r\\n            timestampStr\\r\\n        ));\\r\\n        \\r\\n        bytes memory payload = bytes(message);\\r\\n        \\r\\n        // Build proper options with gas limit for destination execution\\r\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(200000, 0);\\r\\n        \\r\\n        MessagingFee memory fee = _quote(SOLANA_CHAIN_ID, payload, options, false);\\r\\n        return fee.nativeFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override the _lzReceive function to handle incoming messages (if needed)\\r\\n     * This would be used if you want to receive messages from Solana back to EVM\\r\\n     */\\r\\n    function _lzReceive(\\r\\n        Origin calldata _origin,\\r\\n        bytes32 _guid,\\r\\n        bytes calldata _payload,\\r\\n        address _executor,\\r\\n        bytes calldata _extraData\\r\\n    ) internal override {\\r\\n        // Add handling for received messages from Solana if needed\\r\\n        // For now, this is a placeholder\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the gas limit for cross-chain calls\\r\\n     * @param _gasLimit New gas limit\\r\\n     */\\r\\n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\\r\\n        gasLimit = _gasLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw any stuck funds (admin function)\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd7d929741fed50d7d3903576e861bb17ec10fe5cc73967ad7aa6b6acdaab180\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // We're using the unchecked block below because otherwise execution ends \\n        // with the native overflow error code.\\n        unchecked {\\n            require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        }\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b07e5d8f69407bb43c6db224adfcf6c73b512dd64e85008ac3c222910c3555\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2741,"contract":"contracts/OmnichainIdentityLinker.sol:OmnichainIdentityLinker","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1825,"contract":"contracts/OmnichainIdentityLinker.sol:OmnichainIdentityLinker","label":"peers","offset":0,"slot":"1","type":"t_mapping(t_uint32,t_bytes32)"},{"astId":5253,"contract":"contracts/OmnichainIdentityLinker.sol:OmnichainIdentityLinker","label":"gasLimit","offset":0,"slot":"2","type":"t_uint256"},{"astId":5258,"contract":"contracts/OmnichainIdentityLinker.sol:OmnichainIdentityLinker","label":"linkedSolanaAddresses","offset":0,"slot":"3","type":"t_mapping(t_address,t_array(t_bytes_storage)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes_storage)dyn_storage":{"base":"t_bytes_storage","encoding":"dynamic_array","label":"bytes[]","numberOfBytes":"32"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_array(t_bytes_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bytes[])","numberOfBytes":"32","value":"t_array(t_bytes_storage)dyn_storage"},"t_mapping(t_uint32,t_bytes32)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => bytes32)","numberOfBytes":"32","value":"t_bytes32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{"allowInitializePath((uint32,bytes32,uint64))":{"notice":"Checks if the path initialization is allowed based on the provided origin."},"endpoint()":{"notice":"Retrieves the LayerZero endpoint associated with the OApp."},"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)":{"notice":"Indicates whether an address is an approved composeMsg sender to the Endpoint."},"nextNonce(uint32,bytes32)":{"notice":"Retrieves the next nonce for a given source endpoint and sender address."},"oAppVersion()":{"notice":"Retrieves the OApp version information."},"peers(uint32)":{"notice":"Retrieves the peer (OApp) associated with a corresponding endpoint."},"setDelegate(address)":{"notice":"Sets the delegate address for the OApp."},"setPeer(uint32,bytes32)":{"notice":"Sets the peer address (OApp instance) for a corresponding endpoint."}},"version":1}}},"solidity-bytes-utils/contracts/BytesLib.sol":{"BytesLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202a4187276a80934b3e732ed76a3985026b179a48df6a9a51468aa715752d3ba864736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A COINBASE DUP8 0x27 PUSH11 0x80934B3E732ED76A398502 PUSH12 0x179A48DF6A9A51468AA71575 0x2D EXTCODESIZE 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"370:19069:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202a4187276a80934b3e732ed76a3985026b179a48df6a9a51468aa715752d3ba864736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A COINBASE DUP8 0x27 PUSH11 0x80934B3E732ED76A398502 PUSH12 0x179A48DF6A9A51468AA71575 0x2D EXTCODESIZE 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"370:19069:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"concat(bytes memory,bytes memory)":"infinite","concatStorage(bytes storage pointer,bytes memory)":"infinite","equal(bytes memory,bytes memory)":"infinite","equalStorage(bytes storage pointer,bytes memory)":"infinite","slice(bytes memory,uint256,uint256)":"infinite","toAddress(bytes memory,uint256)":"infinite","toBytes32(bytes memory,uint256)":"infinite","toUint128(bytes memory,uint256)":"infinite","toUint16(bytes memory,uint256)":"infinite","toUint256(bytes memory,uint256)":"infinite","toUint32(bytes memory,uint256)":"infinite","toUint64(bytes memory,uint256)":"infinite","toUint8(bytes memory,uint256)":"infinite","toUint96(bytes memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity-bytes-utils/contracts/BytesLib.sol\":\"BytesLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // We're using the unchecked block below because otherwise execution ends \\n        // with the native overflow error code.\\n        unchecked {\\n            require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        }\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b07e5d8f69407bb43c6db224adfcf6c73b512dd64e85008ac3c222910c3555\",\"license\":\"Unlicense\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}